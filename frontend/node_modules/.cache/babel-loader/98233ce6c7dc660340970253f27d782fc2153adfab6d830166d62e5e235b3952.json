{"ast":null,"code":"'use client';\n\nimport * as React from \"react\";\nimport { platform } from \"../../lib/platform.js\";\nimport { DEFAULT_TOKENS_CLASS_NAMES } from \"../../lib/tokens/constants.js\";\nexport const ConfigProviderContext = /*#__PURE__*/React.createContext({\n  hasCustomPanelHeaderAfter: false,\n  customPanelHeaderAfterMinWidth: 90,\n  isWebView: false,\n  transitionMotionEnabled: true,\n  platform: platform(),\n  colorScheme: undefined,\n  tokensClassNames: DEFAULT_TOKENS_CLASS_NAMES,\n  locale: 'ru',\n  direction: undefined\n});\nexport const useConfigProvider = () => React.useContext(ConfigProviderContext);\nexport function useConfigProviderContextMemo(config) {\n  const {\n    isWebView,\n    hasCustomPanelHeaderAfter,\n    customPanelHeaderAfterMinWidth,\n    colorScheme,\n    transitionMotionEnabled,\n    platform,\n    tokensClassNames,\n    locale,\n    direction\n  } = config;\n  return React.useMemo(() => {\n    return {\n      isWebView,\n      hasCustomPanelHeaderAfter,\n      customPanelHeaderAfterMinWidth,\n      colorScheme,\n      transitionMotionEnabled,\n      platform,\n      tokensClassNames,\n      locale,\n      direction\n    };\n  }, [isWebView, hasCustomPanelHeaderAfter, customPanelHeaderAfterMinWidth, colorScheme, transitionMotionEnabled, platform, tokensClassNames, locale, direction]);\n}","map":{"version":3,"names":["React","platform","DEFAULT_TOKENS_CLASS_NAMES","ConfigProviderContext","createContext","hasCustomPanelHeaderAfter","customPanelHeaderAfterMinWidth","isWebView","transitionMotionEnabled","colorScheme","undefined","tokensClassNames","locale","direction","useConfigProvider","useContext","useConfigProviderContextMemo","config","useMemo"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/ConfigProvider/ConfigProviderContext.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport type { ColorSchemeType } from '../../lib/colorScheme';\nimport { type Direction } from '../../lib/direction';\nimport { platform, type PlatformType } from '../../lib/platform';\nimport { DEFAULT_TOKENS_CLASS_NAMES } from '../../lib/tokens/constants';\nimport { type TokensClassNames } from '../../lib/tokens/types';\n\nexport interface ConfigProviderContextInterface {\n  /**\n   * Подсказывает приложению, обёрнутому в `ConfigProvider`, где открыто приложение: внутри webview или в мобильном браузере.\n   *\n   * В условиях когда:\n   * - `isWebView={true}`\n   * - platform=\"ios\"\n   *\n   * для компонента `View` включается возможность навигации через смахивание.\n   */\n  isWebView: boolean;\n  /**\n   * При `true` слот `after` у `PanelHeader` игнорируется под размещение пользовательского\n   * \"плавающего\" элемента (например, панель управления webview).\n   *\n   * > Note: Правило не распространяется на `PanelHeader` внутри модальных окон, предоставляемых\n   * > библиотекой.\n   */\n  hasCustomPanelHeaderAfter: boolean;\n  /**\n   * Задаёт необходимый минимальную ширину слота `after` в `PanelHeader` под пользовательский\n   * \"плавающий\" элемент (например, ширина панели управления webview).\n   *\n   * Учитывается только при `hasCustomPanelHeaderAfter={true}` (см. документацию `hasCustomPanelHeaderAfter`).\n   *\n   * @default 90\n   */\n  customPanelHeaderAfterMinWidth: number | string;\n  /**\n   * Тип цветовой схемы – `light` или `dark`\n   */\n  colorScheme: ColorSchemeType | undefined;\n  /**\n   * Включена ли анимация переходов между экранами в `Root` и `View`\n   */\n  transitionMotionEnabled: boolean;\n  /**\n   * Платформа\n   */\n  platform: PlatformType;\n  /**\n   * CSS классы, определяющие набор токенов.\n   *\n   * - Используйте `{ light?: '<css_class>', dark?: '<css_class>' }`, чтобы задать для всех платформ одинаковый набор токенов для светлой и/или тёмной тем.\n   * - Используйте `{ [key in 'android' | 'ios' | 'vkcom']?: '<css_class>' }`, чтобы задать для одной или нескольких платформ свой набор токенов.\n   *\n   * @default\n   * {\n   *   android: {\n   *     light: 'vkui--vkBase--light',\n   *     dark: 'vkui--vkBase--dark',\n   *   },\n   *   ios: {\n   *     light: 'vkui--vkIOS--light',\n   *     dark: 'vkui--vkIOS--dark',\n   *   },\n   *   vkcom: {\n   *     light: 'vkui--vkCom--light',\n   *     dark: 'vkui--vkCom--dark',\n   *   }\n   * }\n   */\n  tokensClassNames: TokensClassNames;\n  /**\n   * Строка с языковой меткой BCP 47\n   */\n  locale: string;\n  /**\n   * Направление контента.\n   *\n   * При использовании определенного значения, важно установить атрибут `dir` с таким же значением либо на дочерний элемент,\n   * либо на все страницу в целом.\n   *\n   * @default Определяется автоматически в зависимости от значения атрибута `dir` установленного на `body` страницы\n   */\n  direction: Direction | undefined;\n}\n\nexport const ConfigProviderContext: React.Context<ConfigProviderContextInterface> =\n  React.createContext<ConfigProviderContextInterface>({\n    hasCustomPanelHeaderAfter: false,\n    customPanelHeaderAfterMinWidth: 90,\n    isWebView: false,\n    transitionMotionEnabled: true,\n    platform: platform(),\n    colorScheme: undefined, // undefined обозначает что тема должна определиться автоматически\n    tokensClassNames: DEFAULT_TOKENS_CLASS_NAMES,\n    locale: 'ru',\n    direction: undefined,\n  });\n\nexport const useConfigProvider = (): ConfigProviderContextInterface =>\n  React.useContext(ConfigProviderContext);\n\nexport function useConfigProviderContextMemo(config: ConfigProviderContextInterface) {\n  const {\n    isWebView,\n    hasCustomPanelHeaderAfter,\n    customPanelHeaderAfterMinWidth,\n    colorScheme,\n    transitionMotionEnabled,\n    platform,\n    tokensClassNames,\n    locale,\n    direction,\n  } = config;\n\n  return React.useMemo<ConfigProviderContextInterface>(() => {\n    return {\n      isWebView,\n      hasCustomPanelHeaderAfter,\n      customPanelHeaderAfterMinWidth,\n      colorScheme,\n      transitionMotionEnabled,\n      platform,\n      tokensClassNames,\n      locale,\n      direction,\n    };\n  }, [\n    isWebView,\n    hasCustomPanelHeaderAfter,\n    customPanelHeaderAfterMinWidth,\n    colorScheme,\n    transitionMotionEnabled,\n    platform,\n    tokensClassNames,\n    locale,\n    direction,\n  ]);\n}\n"],"mappings":"AAAA;;AAEA,YAAYA,KAAA,MAAW;AAGvB,SAASC,QAAQ,QAA2B;AAC5C,SAASC,0BAA0B,QAAQ;AAiF3C,OAAO,MAAMC,qBAAA,gBACXH,KAAA,CAAMI,aAAa,CAAiC;EAClDC,yBAAA,EAA2B;EAC3BC,8BAAA,EAAgC;EAChCC,SAAA,EAAW;EACXC,uBAAA,EAAyB;EACzBP,QAAA,EAAUA,QAAA;EACVQ,WAAA,EAAaC,SAAA;EACbC,gBAAA,EAAkBT,0BAAA;EAClBU,MAAA,EAAQ;EACRC,SAAA,EAAWH;AACb;AAEF,OAAO,MAAMI,iBAAA,GAAoBA,CAAA,KAC/Bd,KAAA,CAAMe,UAAU,CAACZ,qBAAA;AAEnB,OAAO,SAASa,6BAA6BC,MAAsC;EACjF,MAAM;IACJV,SAAS;IACTF,yBAAyB;IACzBC,8BAA8B;IAC9BG,WAAW;IACXD,uBAAuB;IACvBP,QAAQ;IACRU,gBAAgB;IAChBC,MAAM;IACNC;EAAS,CACV,GAAGI,MAAA;EAEJ,OAAOjB,KAAA,CAAMkB,OAAO,CAAiC;IACnD,OAAO;MACLX,SAAA;MACAF,yBAAA;MACAC,8BAAA;MACAG,WAAA;MACAD,uBAAA;MACAP,QAAA;MACAU,gBAAA;MACAC,MAAA;MACAC;IACF;EACF,GAAG,CACDN,SAAA,EACAF,yBAAA,EACAC,8BAAA,EACAG,WAAA,EACAD,uBAAA,EACAP,QAAA,EACAU,gBAAA,EACAC,MAAA,EACAC,SAAA,CACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}