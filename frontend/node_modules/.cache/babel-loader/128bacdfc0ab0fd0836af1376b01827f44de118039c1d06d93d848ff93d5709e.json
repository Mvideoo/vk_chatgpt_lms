{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { Icon16Chevron } from \"@vkontakte/icons\";\nimport { classNames, hasReactNode } from \"@vkontakte/vkjs\";\nimport { RootComponent } from \"../RootComponent/RootComponent.js\";\nimport { Tappable } from \"../Tappable/Tappable.js\";\nimport { Paragraph } from \"../Typography/Paragraph/Paragraph.js\";\nconst stylesMode = {\n  add: \"vkuiMiniInfoCell__modeAdd\",\n  accent: \"vkuiMiniInfoCell__modeAccent\",\n  more: \"vkuiMiniInfoCell__modeMore\"\n};\nconst stylesTextWrap = {\n  nowrap: \"vkuiMiniInfoCell__textWrapNowrap\",\n  full: \"vkuiMiniInfoCell__textWrapFull\",\n  short: \"vkuiMiniInfoCell__textWrapShort\"\n};\n/**\n * @see https://vkcom.github.io/VKUI/#/MiniInfoCell\n */\nexport const MiniInfoCell = _param => {\n  var {\n      before,\n      after,\n      children,\n      mode = 'base',\n      textWrap = 'nowrap',\n      chevron = false\n    } = _param,\n    restProps = _object_without_properties(_param, [\"before\", \"after\", \"children\", \"mode\", \"textWrap\", \"chevron\"]);\n  const cellClasses = classNames(\"vkuiMiniInfoCell__host\", stylesTextWrap[textWrap], mode !== 'base' && stylesMode[mode]);\n  const cellContent = /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [hasReactNode(before) && /*#__PURE__*/_jsx(\"span\", {\n      className: \"vkuiMiniInfoCell__before\",\n      children: before\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"vkuiMiniInfoCell__middle\",\n      children: [/*#__PURE__*/_jsx(Paragraph, {\n        className: \"vkuiMiniInfoCell__content\",\n        weight: mode === 'more' ? '2' : undefined,\n        children: children\n      }), chevron && /*#__PURE__*/_jsx(Icon16Chevron, {})]\n    }), hasReactNode(after) && /*#__PURE__*/_jsx(\"span\", {\n      className: \"vkuiMiniInfoCell__after\",\n      children: after\n    })]\n  });\n  return restProps.onClick ? /*#__PURE__*/_jsx(Tappable, _object_spread_props(_object_spread({\n    Component: \"div\",\n    role: \"button\"\n  }, restProps), {\n    baseClassName: cellClasses,\n    children: cellContent\n  })) : /*#__PURE__*/_jsx(RootComponent, _object_spread_props(_object_spread({}, restProps), {\n    baseClassName: cellClasses,\n    children: cellContent\n  }));\n};","map":{"version":3,"names":["React","Icon16Chevron","classNames","hasReactNode","RootComponent","Tappable","Paragraph","stylesMode","add","accent","more","stylesTextWrap","nowrap","full","short","MiniInfoCell","_param","before","after","children","mode","textWrap","chevron","restProps","_object_without_properties","cellClasses","cellContent","_jsxs","Fragment","_jsx","className","weight","undefined","onClick","_object_spread_props","_object_spread","Component","role","baseClassName"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/MiniInfoCell/MiniInfoCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon16Chevron } from '@vkontakte/icons';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport type { HTMLAttributesWithRootRef } from '../../types';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Paragraph } from '../Typography/Paragraph/Paragraph';\nimport styles from './MiniInfoCell.module.css';\n\nconst stylesMode = {\n  add: styles.modeAdd,\n  accent: styles.modeAccent,\n  more: styles.modeMore,\n};\n\nconst stylesTextWrap = {\n  nowrap: styles.textWrapNowrap,\n  full: styles.textWrapFull,\n  short: styles.textWrapShort,\n};\n\nexport interface MiniInfoCellProps extends HTMLAttributesWithRootRef<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before?: React.ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: React.ReactNode;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'accent' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью. В дизайне это свойство `multiline`\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  chevron?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/MiniInfoCell\n */\nexport const MiniInfoCell = ({\n  before,\n  after,\n  children,\n  mode = 'base',\n  textWrap = 'nowrap',\n  chevron = false,\n  ...restProps\n}: MiniInfoCellProps): React.ReactNode => {\n  const cellClasses = classNames(\n    styles.host,\n    stylesTextWrap[textWrap],\n    mode !== 'base' && stylesMode[mode],\n  );\n\n  const cellContent = (\n    <React.Fragment>\n      {hasReactNode(before) && <span className={styles.before}>{before}</span>}\n      <div className={styles.middle}>\n        <Paragraph className={styles.content} weight={mode === 'more' ? '2' : undefined}>\n          {children}\n        </Paragraph>\n        {chevron && <Icon16Chevron />}\n      </div>\n      {hasReactNode(after) && <span className={styles.after}>{after}</span>}\n    </React.Fragment>\n  );\n\n  return restProps.onClick ? (\n    <Tappable Component=\"div\" role=\"button\" {...restProps} baseClassName={cellClasses}>\n      {cellContent}\n    </Tappable>\n  ) : (\n    <RootComponent {...restProps} baseClassName={cellClasses}>\n      {cellContent}\n    </RootComponent>\n  );\n};\n"],"mappings":";;;;AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,aAAa,QAAQ;AAC9B,SAASC,UAAU,EAAEC,YAAY,QAAQ;AAEzC,SAASC,aAAa,QAAQ;AAC9B,SAASC,QAAQ,QAAQ;AACzB,SAASC,SAAS,QAAQ;AAG1B,MAAMC,UAAA,GAAa;EACjBC,GAAG;EACHC,MAAM;EACNC,IAAI;AACN;AAEA,MAAMC,cAAA,GAAiB;EACrBC,MAAM;EACNC,IAAI;EACJC,KAAK;AACP;AAwCA;;;AAGA,OAAO,MAAMC,YAAA,GAAeC,MAAA;MAAC;MAC3BC,MAAM;MACNC,KAAK;MACLC,QAAQ;MACRC,IAAA,GAAO,MAAM;MACbC,QAAA,GAAW,QAAQ;MACnBC,OAAA,GAAU;IAAK,CAEG,GAAAN,MAAA;IADfO,SAAA,GAAAC,0BAAA,CAAAR,MAAA,GANH,UACA,SACA,YACA,QACA,YACA,U;EAGA,MAAMS,WAAA,GAAcvB,UAAA,2BAElBS,cAAc,CAACU,QAAA,CAAS,EACxBD,IAAA,KAAS,UAAUb,UAAU,CAACa,IAAA,CAAK;EAGrC,MAAMM,WAAA,gBACJC,KAAA,CAAC3B,KAAA,CAAM4B,QAAQ;eACZzB,YAAA,CAAac,MAAA,kBAAWY,IAAA,CAAC;MAAKC,SAAS;gBAAkBb;qBAC1DU,KAAA,CAAC;MAAIG,SAAS;8BACZD,IAAA,CAACvB,SAAA;QAAUwB,SAAS;QAAkBC,MAAA,EAAQX,IAAA,KAAS,SAAS,MAAMY,SAAA;kBACnEb;UAEFG,OAAA,iBAAWO,IAAA,CAAC5B,aAAA;QAEdE,YAAA,CAAae,KAAA,kBAAUW,IAAA,CAAC;MAAKC,SAAS;gBAAiBZ;;;EAI5D,OAAOK,SAAA,CAAUU,OAAO,gBACtBJ,IAAA,CAACxB,QAAA,EAAA6B,oBAAA,CAAAC,cAAA;IAASC,SAAA,EAAU;IAAMC,IAAA,EAAK;KAAad,SAAA;IAAWe,aAAA,EAAeb,WAAA;cACnEC;qBAGHG,IAAA,CAACzB,aAAA,EAAA8B,oBAAA,CAAAC,cAAA,KAAkBZ,SAAA;IAAWe,aAAA,EAAeb,WAAA;cAC1CC;;AAGP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}