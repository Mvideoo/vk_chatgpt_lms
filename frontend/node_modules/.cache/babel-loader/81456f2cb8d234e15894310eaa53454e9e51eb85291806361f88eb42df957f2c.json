{"ast":null,"code":"import * as React from \"react\";\nimport { isRefObject } from \"../../lib/isRefObject.js\";\nexport const extractPortalRootByProp = portalRootProp => isRefObject(portalRootProp) ? portalRootProp.current : portalRootProp;\nexport const CUSTOM_PROPERTY_INSET_PREFIX = `--vkui_internal--safe_area_inset_`;\nexport function useSafeAreaInsetsMemo(safeAreaInsetsProp) {\n  const {\n    top,\n    right,\n    bottom,\n    left\n  } = safeAreaInsetsProp !== null && safeAreaInsetsProp !== void 0 ? safeAreaInsetsProp : {};\n  const safeAreaInsets = React.useMemo(() => ({\n    top,\n    right,\n    bottom,\n    left\n  }), [top, right, bottom, left]);\n  return safeAreaInsets;\n}\nexport function getSafeAreaInsetsAsCssVariables(safeAreaInsets) {\n  if (!safeAreaInsets) {\n    return {};\n  }\n  const cssVariables = {};\n  for (const key in safeAreaInsets) {\n    if (safeAreaInsets.hasOwnProperty(key) && typeof safeAreaInsets[key] === 'number') {\n      const propertyKey = `${CUSTOM_PROPERTY_INSET_PREFIX}${key}`;\n      const propertyValue = safeAreaInsets[key];\n      cssVariables[propertyKey] = `${propertyValue}px`;\n    }\n  }\n  return cssVariables;\n}\nexport function getUserSelectModeClassName(_ref) {\n  let {\n    userSelectMode,\n    isWebView,\n    hasPointer\n  } = _ref;\n  switch (userSelectMode) {\n    case 'enabled-with-pointer':\n      {\n        if (hasPointer) {\n          return null;\n        }\n        const enableByHasPointerMediaQuery = hasPointer === undefined;\n        if (enableByHasPointerMediaQuery) {\n          return \"vkuiAppRootStyleContainer__pointerNone\";\n        }\n        return \"vkuiAppRootStyleContainer__userSelectNone\";\n      }\n    case 'disabled':\n      return \"vkuiAppRootStyleContainer__userSelectNone\";\n    case 'enabled':\n      return null;\n    default:\n      return isWebView ? \"vkuiAppRootStyleContainer__userSelectNone\" : null;\n  }\n}","map":{"version":3,"names":["React","isRefObject","extractPortalRootByProp","portalRootProp","current","CUSTOM_PROPERTY_INSET_PREFIX","useSafeAreaInsetsMemo","safeAreaInsetsProp","top","right","bottom","left","safeAreaInsets","useMemo","getSafeAreaInsetsAsCssVariables","cssVariables","key","hasOwnProperty","propertyKey","propertyValue","getUserSelectModeClassName","_ref","userSelectMode","isWebView","hasPointer","enableByHasPointerMediaQuery","undefined"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/AppRoot/helpers.ts"],"sourcesContent":["import * as React from 'react';\nimport { isRefObject } from '../../lib/isRefObject';\nimport type { AppRootUserSelectMode, SafeAreaInsets } from './types';\nimport styles from './AppRootStyleContainer/AppRootStyleContainer.module.css';\n\nexport const extractPortalRootByProp = (\n  portalRootProp: HTMLElement | React.RefObject<HTMLElement>,\n): HTMLElement | null => (isRefObject(portalRootProp) ? portalRootProp.current : portalRootProp);\n\nexport const CUSTOM_PROPERTY_INSET_PREFIX = `--vkui_internal--safe_area_inset_`;\n\nexport function useSafeAreaInsetsMemo(safeAreaInsetsProp: SafeAreaInsets | undefined) {\n  const { top, right, bottom, left } = safeAreaInsetsProp ?? {};\n  const safeAreaInsets = React.useMemo(\n    () => ({\n      top,\n      right,\n      bottom,\n      left,\n    }),\n    [top, right, bottom, left],\n  );\n\n  return safeAreaInsets;\n}\n\nexport function getSafeAreaInsetsAsCssVariables(\n  safeAreaInsets: SafeAreaInsets | undefined,\n): Record<string, string> {\n  if (!safeAreaInsets) {\n    return {};\n  }\n\n  const cssVariables: Record<string, string> = {};\n\n  for (const key in safeAreaInsets) {\n    if (safeAreaInsets.hasOwnProperty(key) && typeof safeAreaInsets[key] === 'number') {\n      const propertyKey = `${CUSTOM_PROPERTY_INSET_PREFIX}${key}`;\n      const propertyValue = safeAreaInsets[key];\n\n      cssVariables[propertyKey] = `${propertyValue}px`;\n    }\n  }\n\n  return cssVariables;\n}\n\nexport function getUserSelectModeClassName({\n  userSelectMode,\n  isWebView,\n  hasPointer,\n}: {\n  userSelectMode: AppRootUserSelectMode | undefined;\n  isWebView: boolean;\n  hasPointer: boolean | undefined;\n}): string | null {\n  switch (userSelectMode) {\n    case 'enabled-with-pointer': {\n      if (hasPointer) {\n        return null;\n      }\n\n      const enableByHasPointerMediaQuery = hasPointer === undefined;\n      if (enableByHasPointerMediaQuery) {\n        return styles.pointerNone;\n      }\n\n      return styles.userSelectNone;\n    }\n    case 'disabled':\n      return styles.userSelectNone;\n    case 'enabled':\n      return null;\n    default:\n      return isWebView ? styles.userSelectNone : null;\n  }\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,WAAW,QAAQ;AAI5B,OAAO,MAAMC,uBAAA,GACXC,cAAA,IACwBF,WAAA,CAAYE,cAAA,IAAkBA,cAAA,CAAeC,OAAO,GAAGD,cAAA;AAEjF,OAAO,MAAME,4BAAA,GAA+B,mCAAmC;AAE/E,OAAO,SAASC,sBAAsBC,kBAA8C;EAClF,MAAM;IAAEC,GAAG;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAI,CAAE,GAAGJ,kBAAA,aAAAA,kBAAA,cAAAA,kBAAA,GAAsB,CAAC;EAC5D,MAAMK,cAAA,GAAiBZ,KAAA,CAAMa,OAAO,CAClC,OAAO;IACLL,GAAA;IACAC,KAAA;IACAC,MAAA;IACAC;EACF,IACA,CAACH,GAAA,EAAKC,KAAA,EAAOC,MAAA,EAAQC,IAAA,CAAK;EAG5B,OAAOC,cAAA;AACT;AAEA,OAAO,SAASE,gCACdF,cAA0C;EAE1C,IAAI,CAACA,cAAA,EAAgB;IACnB,OAAO,CAAC;EACV;EAEA,MAAMG,YAAA,GAAuC,CAAC;EAE9C,KAAK,MAAMC,GAAA,IAAOJ,cAAA,EAAgB;IAChC,IAAIA,cAAA,CAAeK,cAAc,CAACD,GAAA,KAAQ,OAAOJ,cAAc,CAACI,GAAA,CAAI,KAAK,UAAU;MACjF,MAAME,WAAA,GAAc,GAAGb,4BAAA,GAA+BW,GAAA,EAAK;MAC3D,MAAMG,aAAA,GAAgBP,cAAc,CAACI,GAAA,CAAI;MAEzCD,YAAY,CAACG,WAAA,CAAY,GAAG,GAAGC,aAAA,IAAiB;IAClD;EACF;EAEA,OAAOJ,YAAA;AACT;AAEA,OAAO,SAASK,2BAAAC,IAAA,EAQf;EAAA,IAR0C;IACzCC,cAAc;IACdC,SAAS;IACTC;EAAU,CAKX,GAAAH,IAAA;EACC,QAAQC,cAAA;IACN,KAAK;MAAwB;QAC3B,IAAIE,UAAA,EAAY;UACd,OAAO;QACT;QAEA,MAAMC,4BAAA,GAA+BD,UAAA,KAAeE,SAAA;QACpD,IAAID,4BAAA,EAA8B;UAChC;QACF;QAEA;MACF;IACA,KAAK;MACH;IACF,KAAK;MACH,OAAO;IACT;MACE,OAAOF,SAAA,iDAAoC;EAC/C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}