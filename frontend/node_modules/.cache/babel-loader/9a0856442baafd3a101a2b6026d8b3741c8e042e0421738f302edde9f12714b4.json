{"ast":null,"code":"const isFunctionExistInProps = (props, key) => typeof props[key] === 'function';\n/**\n * Полезен, когда нужно сохранить пользовательские события.\n *\n * Приоритет даём пользовательскому событию. Например, можно будет отловить был ли вызван\n * `event.preventDefault()` через `event.defaultPrevented`.\n *\n * @private\n */\nexport const getMergedSameEventsByProps = (mainProps, secondProps) => {\n  const result = {};\n  for (const eventName in mainProps) {\n    if (mainProps.hasOwnProperty(eventName) && secondProps.hasOwnProperty(eventName) && isFunctionExistInProps(mainProps, eventName) && isFunctionExistInProps(secondProps, eventName)) {\n      result[eventName] = function mergeSameEventsByProps() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        secondProps[eventName].apply(this, args);\n        mainProps[eventName].apply(this, args);\n      };\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["isFunctionExistInProps","props","key","getMergedSameEventsByProps","mainProps","secondProps","result","eventName","hasOwnProperty","mergeSameEventsByProps","_len","arguments","length","args","Array","_key","apply"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/helpers/getMergedSameEventsByProps.ts"],"sourcesContent":["import type * as React from 'react';\nimport type { AnyFunction } from '@vkontakte/vkjs';\nimport type { PickOnlyFunctionProps } from '../types';\n\nconst isFunctionExistInProps = <Props extends Record<PropertyKey, any>>(\n  props: Props,\n  key: PropertyKey,\n): key is Extract<keyof Props, AnyFunction> => typeof props[key] === 'function';\n\n/**\n * Полезен, когда нужно сохранить пользовательские события.\n *\n * Приоритет даём пользовательскому событию. Например, можно будет отловить был ли вызван\n * `event.preventDefault()` через `event.defaultPrevented`.\n *\n * @private\n */\nexport const getMergedSameEventsByProps = <\n  T extends keyof React.JSX.IntrinsicElements | React.JSXElementConstructor<any>,\n  MainProps extends React.ComponentProps<T>,\n  OnlyFnPropsByMain extends PickOnlyFunctionProps<MainProps>,\n>(\n  mainProps: MainProps,\n  secondProps: React.ComponentProps<T>,\n): {\n  [K in keyof OnlyFnPropsByMain]?:\n    | ((this: any, ...args: Parameters<OnlyFnPropsByMain[K]>) => void)\n    | undefined;\n} => {\n  const result: {\n    [K in keyof OnlyFnPropsByMain]?:\n      | ((this: any, ...args: Parameters<OnlyFnPropsByMain[K]>) => void)\n      | undefined;\n  } = {};\n\n  for (const eventName in mainProps) {\n    if (\n      mainProps.hasOwnProperty(eventName) &&\n      secondProps.hasOwnProperty(eventName) &&\n      isFunctionExistInProps(mainProps, eventName) &&\n      isFunctionExistInProps(secondProps, eventName)\n    ) {\n      result[eventName] = function mergeSameEventsByProps(\n        ...args: Parameters<OnlyFnPropsByMain[typeof eventName]>\n      ) {\n        secondProps[eventName].apply(this, args);\n        mainProps[eventName].apply(this, args);\n      };\n    }\n  }\n  return result;\n};\n"],"mappings":"AAIA,MAAMA,sBAAA,GAAyBA,CAC7BC,KAAA,EACAC,GAAA,KAC6C,OAAOD,KAAK,CAACC,GAAA,CAAI,KAAK;AAErE;;;;;;;;AAQA,OAAO,MAAMC,0BAAA,GAA6BA,CAKxCC,SAAA,EACAC,WAAA;EAMA,MAAMC,MAAA,GAIF,CAAC;EAEL,KAAK,MAAMC,SAAA,IAAaH,SAAA,EAAW;IACjC,IACEA,SAAA,CAAUI,cAAc,CAACD,SAAA,KACzBF,WAAA,CAAYG,cAAc,CAACD,SAAA,KAC3BP,sBAAA,CAAuBI,SAAA,EAAWG,SAAA,KAClCP,sBAAA,CAAuBK,WAAA,EAAaE,SAAA,GACpC;MACAD,MAAM,CAACC,SAAA,CAAU,GAAG,SAASE,uBAAA,EAC6B;QAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAArDC,IAAqD,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;UAArDF,IAAqD,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;QAAA;QAExDV,WAAW,CAACE,SAAA,CAAU,CAACS,KAAK,CAAC,IAAI,EAAEH,IAAA;QACnCT,SAAS,CAACG,SAAA,CAAU,CAACS,KAAK,CAAC,IAAI,EAAEH,IAAA;MACnC;IACF;EACF;EACA,OAAOP,MAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}