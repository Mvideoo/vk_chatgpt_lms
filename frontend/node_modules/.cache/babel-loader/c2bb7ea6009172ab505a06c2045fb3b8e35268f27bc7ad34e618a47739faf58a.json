{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { CustomSelectOption } from \"../CustomSelectOption/CustomSelectOption.js\";\nexport const DEFAULT_SELECTED_BEHAVIOR = 'highlight';\nexport const DEFAULT_EMPTY_TEXT = 'Ничего не найдено';\nexport const FOCUS_ACTION_NEXT = 'next';\nexport const FOCUS_ACTION_PREV = 'prev';\nexport const renderOptionDefault = props => /*#__PURE__*/_jsx(CustomSelectOption, _object_spread({}, props));\nexport const isCreateNewOptionPreset = option => option && 'actionText' in option;\nexport const isEmptyOptionPreset = option => option && 'placeholder' in option;\nexport const isNotServicePreset = option => !isCreateNewOptionPreset(option) && !isEmptyOptionPreset(option);","map":{"version":3,"names":["CustomSelectOption","DEFAULT_SELECTED_BEHAVIOR","DEFAULT_EMPTY_TEXT","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","renderOptionDefault","props","_jsx","_object_spread","isCreateNewOptionPreset","option","isEmptyOptionPreset","isNotServicePreset"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/ChipsSelect/constants.tsx"],"sourcesContent":["import type { ChipOption } from '../ChipsInputBase/types';\nimport {\n  CustomSelectOption,\n  type CustomSelectOptionProps,\n} from '../CustomSelectOption/CustomSelectOption';\nimport type {\n  CreateNewOptionPreset,\n  FocusActionType,\n  OptionPreset,\n  PlaceholderPreset,\n} from './types';\n\nexport const DEFAULT_SELECTED_BEHAVIOR = 'highlight';\n\nexport const DEFAULT_EMPTY_TEXT = 'Ничего не найдено';\n\nexport const FOCUS_ACTION_NEXT: FocusActionType = 'next';\n\nexport const FOCUS_ACTION_PREV: FocusActionType = 'prev';\n\nexport const renderOptionDefault = (props: CustomSelectOptionProps): React.ReactNode => (\n  <CustomSelectOption {...props} />\n);\n\nexport const isCreateNewOptionPreset = <O extends ChipOption>(\n  option: OptionPreset<O>,\n): option is CreateNewOptionPreset => option && 'actionText' in option;\n\nexport const isEmptyOptionPreset = <O extends ChipOption>(\n  option: OptionPreset<O>,\n): option is PlaceholderPreset => option && 'placeholder' in option;\n\nexport const isNotServicePreset = <O extends ChipOption>(option: OptionPreset<O>): option is O =>\n  !isCreateNewOptionPreset(option) && !isEmptyOptionPreset(option);\n"],"mappings":";;AACA,SACEA,kBAAkB,QAEb;AAQP,OAAO,MAAMC,yBAAA,GAA4B;AAEzC,OAAO,MAAMC,kBAAA,GAAqB;AAElC,OAAO,MAAMC,iBAAA,GAAqC;AAElD,OAAO,MAAMC,iBAAA,GAAqC;AAElD,OAAO,MAAMC,mBAAA,GAAuBC,KAAA,iBAClCC,IAAA,CAACP,kBAAA,EAAAQ,cAAA,KAAuBF,KAAA;AAG1B,OAAO,MAAMG,uBAAA,GACXC,MAAA,IACoCA,MAAA,IAAU,gBAAgBA,MAAA;AAEhE,OAAO,MAAMC,mBAAA,GACXD,MAAA,IACgCA,MAAA,IAAU,iBAAiBA,MAAA;AAE7D,OAAO,MAAME,kBAAA,GAA4CF,MAAA,IACvD,CAACD,uBAAA,CAAwBC,MAAA,KAAW,CAACC,mBAAA,CAAoBD,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}