{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useKeyboardInputTracker } from \"../../hooks/useKeyboardInputTracker.js\";\nimport { useSyncHTMLWithBaseVKUIClasses } from \"../../hooks/useSyncHTMLWithBaseVKUIClasses.js\";\nimport { useSyncHTMLWithTokens } from \"../../hooks/useSyncHTMLWithTokens.js\";\nimport { AppRootContext } from \"./AppRootContext.js\";\nimport { AppRootStyleContainer } from \"./AppRootStyleContainer/AppRootStyleContainer.js\";\nimport { ElementScrollController, GlobalScrollController } from \"./ScrollContext.js\";\nimport { useSafeAreaInsetsMemo } from \"./helpers.js\";\nconst layoutClassNames = {\n  card: \"vkuiAppRoot__layoutCard\",\n  plain: \"vkuiAppRoot__layoutPlain\"\n};\n/**\n * @see https://vkcom.github.io/VKUI/#/AppRoot\n */\nexport const AppRoot = _param => {\n  var {\n      children,\n      mode = 'full',\n      scroll = 'global',\n      portalRoot,\n      disablePortal = false,\n      disableParentTransformForPositionFixedElements,\n      safeAreaInsets: safeAreaInsetsProp,\n      layout,\n      userSelectMode,\n      disableSettingVKUIClassesInRuntime,\n      className\n    } = _param,\n    props = _object_without_properties(_param, [\"children\", \"mode\", \"scroll\", \"portalRoot\", \"disablePortal\", \"disableParentTransformForPositionFixedElements\", \"safeAreaInsets\", \"layout\", \"userSelectMode\", \"disableSettingVKUIClassesInRuntime\", \"className\"]);\n  const appRootRef = React.useRef(null);\n  const isKeyboardInputActiveRef = useKeyboardInputTracker();\n  const safeAreaInsets = useSafeAreaInsetsMemo(safeAreaInsetsProp);\n  const contextValue = React.useMemo(() => ({\n    appRoot: appRootRef,\n    portalRoot,\n    safeAreaInsets,\n    embedded: mode === 'embedded',\n    mode,\n    disablePortal,\n    layout,\n    get keyboardInput() {\n      return isKeyboardInputActiveRef.current;\n    },\n    userSelectMode\n  }), [portalRoot, disablePortal, isKeyboardInputActiveRef, layout, mode, safeAreaInsets, userSelectMode]);\n  /*\n  * Вешаем класс токенов на html в режиме full.\n  * Это необходимо, чтобы цвета html элемента и скроллбара соответствовали текущей цветовой схеме:\n  * - фон html элемента виден, если пользователь оверскролит. Тогда возникает анимация bounce-эффекта и виден фон html элемента. Без токенов в черной теме будет выглядывать белый фон.\n  * - цвет системного сколлбара зависит от color-sheme свойства, значение которого задётся токенами и должно быть выставлено именно на html элементе.\n  * В режме SSR пользователи сами могу задать этот класс на html-элементе. главное, чтобы он соответствовал переданным platform и appearence свойствам.\n  */\n  useSyncHTMLWithTokens({\n    appRootRef,\n    enable: mode === 'full'\n  });\n  /*\n  * По умолчанию VKUI будет выставлять .vkui на html и .vkui__root на контейнере в режиме full.\n  * В режиме embedded будет выставлять только .vkui__root и .vkui__root--embedded на контейнере.\n  * В режиме partial мы классы не выставляем.\n  */\n  useSyncHTMLWithBaseVKUIClasses({\n    appRootRef,\n    mode,\n    layout,\n    enable: mode !== 'partial' && !disableSettingVKUIClassesInRuntime\n  });\n  const ScrollController = React.useMemo(() => scroll === 'contain' ? ElementScrollController : GlobalScrollController, [scroll]);\n  return mode === 'partial' ? /*#__PURE__*/_jsx(AppRootContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(ScrollController, {\n      elRef: appRootRef,\n      children: children\n    })\n  }) : /*#__PURE__*/_jsx(AppRootContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(AppRootStyleContainer, _object_spread_props(_object_spread({\n      getRootRef: appRootRef,\n      className: classNames(className, \"vkuiAppRoot__host\", layout && layoutClassNames[layout], mode === 'embedded' && !disableParentTransformForPositionFixedElements ? \"vkuiAppRoot__transformForPositionFixedElements\" : undefined)\n    }, props), {\n      children: /*#__PURE__*/_jsx(ScrollController, {\n        elRef: appRootRef,\n        children: children\n      })\n    }))\n  });\n};","map":{"version":3,"names":["React","classNames","useKeyboardInputTracker","useSyncHTMLWithBaseVKUIClasses","useSyncHTMLWithTokens","AppRootContext","AppRootStyleContainer","ElementScrollController","GlobalScrollController","useSafeAreaInsetsMemo","layoutClassNames","card","plain","AppRoot","_param","children","mode","scroll","portalRoot","disablePortal","disableParentTransformForPositionFixedElements","safeAreaInsets","safeAreaInsetsProp","layout","userSelectMode","disableSettingVKUIClassesInRuntime","className","props","_object_without_properties","appRootRef","useRef","isKeyboardInputActiveRef","contextValue","useMemo","appRoot","embedded","keyboardInput","current","enable","ScrollController","_jsx","Provider","value","elRef","_object_spread_props","_object_spread","getRootRef","undefined"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/AppRoot/AppRoot.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useKeyboardInputTracker } from '../../hooks/useKeyboardInputTracker';\nimport { useSyncHTMLWithBaseVKUIClasses } from '../../hooks/useSyncHTMLWithBaseVKUIClasses';\nimport { useSyncHTMLWithTokens } from '../../hooks/useSyncHTMLWithTokens';\nimport { AppRootContext } from './AppRootContext';\nimport { AppRootStyleContainer } from './AppRootStyleContainer/AppRootStyleContainer';\nimport { ElementScrollController, GlobalScrollController } from './ScrollContext';\nimport { useSafeAreaInsetsMemo } from './helpers';\nimport type {\n  AppRootLayout,\n  AppRootMode,\n  AppRootScroll,\n  AppRootUserSelectMode,\n  SafeAreaInsets,\n} from './types';\nimport styles from './AppRoot.module.css';\n\nconst layoutClassNames = {\n  card: styles.layoutCard,\n  plain: styles.layoutPlain,\n};\n\nexport interface AppRootProps extends React.HTMLAttributes<HTMLDivElement> {\n  /** Режим встраивания */\n  mode?: AppRootMode;\n  /**\n   * - `global` (по умолчанию) — VKUI-приложение скроллится вместе со страницей.\n   * - `contain` — VKUI-приложение живет в отдельной зоне и скроллится независимо внутри `AppRoot` (например, в модалке).\n   *\n   * Полезно при использовании `mode=\"embedded\"`.\n   */\n  scroll?: AppRootScroll;\n  /**\n   * см. документацию [mdn web docs | env#values](https://developer.mozilla.org/en-US/docs/Web/CSS/env#values).\n   */\n  safeAreaInsets?: SafeAreaInsets;\n  /**\n   * Кастомный root-элемент портала\n   */\n  portalRoot?: HTMLElement | React.RefObject<HTMLElement | null> | null;\n  /**\n   * Отключает рендер всплывающих компонентов в отдельном контейнере\n   */\n  disablePortal?: boolean;\n  /**\n   * По умолчанию, mode=\"embedded\" переносит систему координат элементов с `position: fixed` на\n   * свой контейнер через `transform: translate3d(0, 0, 0)`.\n   *\n   * Это поведение можно отключить с помощью этого параметра.\n   */\n  disableParentTransformForPositionFixedElements?: boolean;\n  /**\n   * Глобально задаёт тип оформления макета для компонентов\n   * [Panel](https://vkcom.github.io/VKUI/#/Panel) и [Group](https://vkcom.github.io/VKUI/#/Group).\n   */\n  layout?: AppRootLayout;\n  /**\n   * Задаёт режим выбора текста (выделения текста) для всего приложения.\n   * По умолчанию, если режим не задан, запрещает выбор текста в приложениях,\n   * запущенных в webview (по значению свойства `isWebView` из [ConfigProvider](https://vkcom.github.io/VKUI/#/ConfigProvider)).\n   *\n   * - `enabled-with-pointer` – разрешает выбор текста, если устройство ввода типа `pointer` (например, `мышь`), в остальных случаях запрещает;\n   * - `disabled` – запрещает выбор текста;\n   * - `enabled` – разрешает выбор текста.\n   *\n   * @since 6.2.0\n   */\n  userSelectMode?: AppRootUserSelectMode;\n  /*\n   * По умолчанию в режиме `mode=\"full\"` VKUI в рантайме выставляет:\n   * - класс .vkui на html элемент\n   * - класс .vkui__root на элемент-контейнер, в который монтируется VKUI\n   * С помощью этой опции такое поведение можно отключить.\n   *\n   * Для корректной работы SSR рекоммендуется выставлять эти классы самостоятельно\n   * и отключить это поведение.\n   */\n  disableSettingVKUIClassesInRuntime?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/AppRoot\n */\nexport const AppRoot = ({\n  children,\n  mode = 'full',\n  scroll = 'global',\n  portalRoot,\n  disablePortal = false,\n  disableParentTransformForPositionFixedElements,\n  safeAreaInsets: safeAreaInsetsProp,\n  layout,\n  userSelectMode,\n  disableSettingVKUIClassesInRuntime,\n  className,\n  ...props\n}: AppRootProps): React.ReactNode => {\n  const appRootRef = React.useRef<HTMLDivElement | null>(null);\n\n  const isKeyboardInputActiveRef = useKeyboardInputTracker();\n  const safeAreaInsets = useSafeAreaInsetsMemo(safeAreaInsetsProp);\n\n  const contextValue = React.useMemo(\n    () => ({\n      appRoot: appRootRef,\n      portalRoot,\n      safeAreaInsets,\n      embedded: mode === 'embedded',\n      mode,\n      disablePortal,\n      layout,\n      get keyboardInput() {\n        return isKeyboardInputActiveRef.current;\n      },\n      userSelectMode,\n    }),\n    [\n      portalRoot,\n      disablePortal,\n      isKeyboardInputActiveRef,\n      layout,\n      mode,\n      safeAreaInsets,\n      userSelectMode,\n    ],\n  );\n\n  /*\n   * Вешаем класс токенов на html в режиме full.\n   * Это необходимо, чтобы цвета html элемента и скроллбара соответствовали текущей цветовой схеме:\n   * - фон html элемента виден, если пользователь оверскролит. Тогда возникает анимация bounce-эффекта и виден фон html элемента. Без токенов в черной теме будет выглядывать белый фон.\n   * - цвет системного сколлбара зависит от color-sheme свойства, значение которого задётся токенами и должно быть выставлено именно на html элементе.\n   * В режме SSR пользователи сами могу задать этот класс на html-элементе. главное, чтобы он соответствовал переданным platform и appearence свойствам.\n   */\n  useSyncHTMLWithTokens({ appRootRef, enable: mode === 'full' });\n  /*\n   * По умолчанию VKUI будет выставлять .vkui на html и .vkui__root на контейнере в режиме full.\n   * В режиме embedded будет выставлять только .vkui__root и .vkui__root--embedded на контейнере.\n   * В режиме partial мы классы не выставляем.\n   */\n  useSyncHTMLWithBaseVKUIClasses({\n    appRootRef,\n    mode,\n    layout,\n    enable: mode !== 'partial' && !disableSettingVKUIClassesInRuntime,\n  });\n\n  const ScrollController = React.useMemo(\n    () => (scroll === 'contain' ? ElementScrollController : GlobalScrollController),\n    [scroll],\n  );\n\n  return mode === 'partial' ? (\n    <AppRootContext.Provider value={contextValue}>\n      <ScrollController elRef={appRootRef}>{children}</ScrollController>\n    </AppRootContext.Provider>\n  ) : (\n    <AppRootContext.Provider value={contextValue}>\n      <AppRootStyleContainer\n        getRootRef={appRootRef}\n        className={classNames(\n          className,\n          styles.host,\n          layout && layoutClassNames[layout],\n          mode === 'embedded' && !disableParentTransformForPositionFixedElements\n            ? styles.transformForPositionFixedElements\n            : undefined,\n        )}\n        {...props}\n      >\n        <ScrollController elRef={appRootRef}>{children}</ScrollController>\n      </AppRootStyleContainer>\n    </AppRootContext.Provider>\n  );\n};\n"],"mappings":"AAAA;;;;;;AAEA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,QAAQ;AAC3B,SAASC,uBAAuB,QAAQ;AACxC,SAASC,8BAA8B,QAAQ;AAC/C,SAASC,qBAAqB,QAAQ;AACtC,SAASC,cAAc,QAAQ;AAC/B,SAASC,qBAAqB,QAAQ;AACtC,SAASC,uBAAuB,EAAEC,sBAAsB,QAAQ;AAChE,SAASC,qBAAqB,QAAQ;AAUtC,MAAMC,gBAAA,GAAmB;EACvBC,IAAI;EACJC,KAAK;AACP;AA4DA;;;AAGA,OAAO,MAAMC,OAAA,GAAUC,MAAA;MAAC;MACtBC,QAAQ;MACRC,IAAA,GAAO,MAAM;MACbC,MAAA,GAAS,QAAQ;MACjBC,UAAU;MACVC,aAAA,GAAgB,KAAK;MACrBC,8CAA8C;MAC9CC,cAAA,EAAgBC,kBAAkB;MAClCC,MAAM;MACNC,cAAc;MACdC,kCAAkC;MAClCC;IAAS,CAEI,GAAAZ,MAAA;IADVa,KAAA,GAAAC,0BAAA,CAAAd,MAAA,GAXH,YACA,QACA,UACA,cACA,iBACA,kDACA,kBACA,UACA,kBACA,sCACA,Y;EAGA,MAAMe,UAAA,GAAa7B,KAAA,CAAM8B,MAAM,CAAwB;EAEvD,MAAMC,wBAAA,GAA2B7B,uBAAA;EACjC,MAAMmB,cAAA,GAAiBZ,qBAAA,CAAsBa,kBAAA;EAE7C,MAAMU,YAAA,GAAehC,KAAA,CAAMiC,OAAO,CAChC,OAAO;IACLC,OAAA,EAASL,UAAA;IACTX,UAAA;IACAG,cAAA;IACAc,QAAA,EAAUnB,IAAA,KAAS;IACnBA,IAAA;IACAG,aAAA;IACAI,MAAA;IACA,IAAIa,cAAA,EAAgB;MAClB,OAAOL,wBAAA,CAAyBM,OAAO;IACzC;IACAb;EACF,IACA,CACEN,UAAA,EACAC,aAAA,EACAY,wBAAA,EACAR,MAAA,EACAP,IAAA,EACAK,cAAA,EACAG,cAAA,CACD;EAGH;;;;;;;EAOApB,qBAAA,CAAsB;IAAEyB,UAAA;IAAYS,MAAA,EAAQtB,IAAA,KAAS;EAAO;EAC5D;;;;;EAKAb,8BAAA,CAA+B;IAC7B0B,UAAA;IACAb,IAAA;IACAO,MAAA;IACAe,MAAA,EAAQtB,IAAA,KAAS,aAAa,CAACS;EACjC;EAEA,MAAMc,gBAAA,GAAmBvC,KAAA,CAAMiC,OAAO,CACpC,MAAOhB,MAAA,KAAW,YAAYV,uBAAA,GAA0BC,sBAAA,EACxD,CAACS,MAAA,CAAO;EAGV,OAAOD,IAAA,KAAS,yBACdwB,IAAA,CAACnC,cAAA,CAAeoC,QAAQ;IAACC,KAAA,EAAOV,YAAA;cAC9B,aAAAQ,IAAA,CAACD,gBAAA;MAAiBI,KAAA,EAAOd,UAAA;gBAAad;;oBAGxCyB,IAAA,CAACnC,cAAA,CAAeoC,QAAQ;IAACC,KAAA,EAAOV,YAAA;cAC9B,aAAAQ,IAAA,CAAClC,qBAAA,EAAAsC,oBAAA,CAAAC,cAAA;MACCC,UAAA,EAAYjB,UAAA;MACZH,SAAA,EAAWzB,UAAA,CACTyB,SAAA,uBAEAH,MAAA,IAAUb,gBAAgB,CAACa,MAAA,CAAO,EAClCP,IAAA,KAAS,cAAc,CAACI,8CAAA,sDAEpB2B,SAAA;OAEFpB,KAAA;gBAEJ,aAAAa,IAAA,CAACD,gBAAA;QAAiBI,KAAA,EAAOd,UAAA;kBAAad;;;;AAI9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}