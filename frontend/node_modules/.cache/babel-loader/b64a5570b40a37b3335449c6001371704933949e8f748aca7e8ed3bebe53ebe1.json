{"ast":null,"code":"import * as React from \"react\";\nimport { canUseDOM, hasHover as hasHoverLib, hasMouse as hasPointerLib } from \"@vkontakte/vkjs\";\nimport { AdaptivityContext } from \"../components/AdaptivityProvider/AdaptivityContext.js\";\nimport { getOrDefault } from \"../helpers/getOrDefault.js\";\nimport { getSizeX, getSizeY, getViewHeightByMediaQueries, getViewWidthByMediaQueries, tryToCheckIsDesktop } from \"../lib/adaptivity/index.js\";\nimport { matchMediaListAddListener, matchMediaListRemoveListener } from \"../lib/matchMedia.js\";\nimport { useMediaQueries } from \"./useMediaQueries.js\";\nimport { usePlatform } from \"./usePlatform.js\";\n/**\n * Высчитывает и возвращает параметры адаптивности при изменении вьюпорта.\n *\n * Берёт в приоритет значения из `AdaptivityContext`.\n *\n * > ⚠ SSR\n * >\n * > Во избежания ошибок при гидратации, не используйте данный хук, если есть вероятность, что компонент будет отрендерен\n * > на стороне сервера.\n * >\n * > Лучше всего использовать для всплывающих окон, т.к. они вызываются только после загрузки\n * > страницы либо пользователем, либо программно.\n */\nexport const useAdaptivityWithJSMediaQueries = () => {\n  if (!canUseDOM) {\n    // eslint-disable-next-line no-console\n    console.error(`[useAdaptivityWithJSMediaQueries] Похоже, вы пытаетесь использовать хук вне браузера.\n\nПостарайтесь этого избегать, чтобы не было ошибок при гидратации: при SSR нет информации о размерах экрана.\n\nИспользуйте CSS Media Query или библиотеку по типу https://github.com/artsy/fresnel.`);\n  }\n  const {\n    viewWidth: viewWidthContext,\n    viewHeight: viewHeightContext,\n    sizeX: sizeXContext,\n    sizeY: sizeYContext,\n    hasPointer: hasPointerContext,\n    hasHover: hasHoverContext\n  } = React.useContext(AdaptivityContext);\n  const platform = usePlatform();\n  const mediaQueries = useMediaQueries();\n  const [[viewWidthLocal, viewHeightLocal], setViewSizeLocal] = React.useState(() => [getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries)), getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries))]);\n  const adaptivityProps = React.useMemo(() => {\n    const hasPointer = getOrDefault(hasPointerContext, hasPointerLib);\n    const hasHover = getOrDefault(hasHoverContext, hasHoverLib);\n    const viewWidth = getOrDefault(viewWidthContext, viewWidthLocal);\n    const viewHeight = getOrDefault(viewHeightContext, viewHeightLocal);\n    const sizeX = getOrDefault(sizeXContext, getSizeX(viewWidth));\n    const sizeY = getOrDefault(sizeYContext, getSizeY(viewWidth, viewHeight, hasPointer));\n    const isDesktop = tryToCheckIsDesktop(viewWidth, viewHeight, hasPointer, platform);\n    return {\n      viewWidth,\n      viewHeight,\n      sizeX,\n      sizeY,\n      hasPointer,\n      hasHover,\n      isDesktop\n    };\n  }, [viewWidthLocal, viewHeightLocal, viewWidthContext, viewHeightContext, sizeXContext, sizeYContext, hasPointerContext, hasHoverContext, platform]);\n  React.useEffect(() => {\n    const handleMediaQuery = () => {\n      setViewSizeLocal(prevSizeLocal => {\n        const newViewWidthLocal = getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries));\n        const newViewHeightLocal = getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries));\n        const [prevViewWidthLocal, prevViewHeightLocal] = prevSizeLocal;\n        if (prevViewWidthLocal !== newViewWidthLocal || prevViewHeightLocal !== newViewHeightLocal) {\n          return [newViewWidthLocal, newViewHeightLocal];\n        }\n        return prevSizeLocal;\n      });\n    };\n    if (!viewWidthContext) {\n      [mediaQueries.desktopPlus, mediaQueries.tablet, mediaQueries.smallTablet, mediaQueries.mobile].forEach(matchMediaListener => matchMediaListAddListener(matchMediaListener, handleMediaQuery));\n    }\n    if (!viewHeightContext) {\n      [mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(matchMediaListener => matchMediaListAddListener(matchMediaListener, handleMediaQuery));\n    }\n    return () => {\n      [mediaQueries.desktopPlus, mediaQueries.tablet, mediaQueries.smallTablet, mediaQueries.mobile, mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(matchMediaListener => matchMediaListRemoveListener(matchMediaListener, handleMediaQuery));\n    };\n  }, [mediaQueries, viewWidthContext, viewHeightContext]);\n  return adaptivityProps;\n};","map":{"version":3,"names":["React","canUseDOM","hasHover","hasHoverLib","hasMouse","hasPointerLib","AdaptivityContext","getOrDefault","getSizeX","getSizeY","getViewHeightByMediaQueries","getViewWidthByMediaQueries","tryToCheckIsDesktop","matchMediaListAddListener","matchMediaListRemoveListener","useMediaQueries","usePlatform","useAdaptivityWithJSMediaQueries","console","error","viewWidth","viewWidthContext","viewHeight","viewHeightContext","sizeX","sizeXContext","sizeY","sizeYContext","hasPointer","hasPointerContext","hasHoverContext","useContext","platform","mediaQueries","viewWidthLocal","viewHeightLocal","setViewSizeLocal","useState","adaptivityProps","useMemo","isDesktop","useEffect","handleMediaQuery","prevSizeLocal","newViewWidthLocal","newViewHeightLocal","prevViewWidthLocal","prevViewHeightLocal","desktopPlus","tablet","smallTablet","mobile","forEach","matchMediaListener","mediumHeight","mobileLandscapeHeight"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/hooks/useAdaptivityWithJSMediaQueries.ts"],"sourcesContent":["import * as React from 'react';\nimport { canUseDOM, hasHover as hasHoverLib, hasMouse as hasPointerLib } from '@vkontakte/vkjs';\nimport {\n  AdaptivityContext,\n  type AdaptivityProps as BaseAdaptivityProps,\n} from '../components/AdaptivityProvider/AdaptivityContext';\nimport { getOrDefault } from '../helpers/getOrDefault';\nimport {\n  getSizeX,\n  getSizeY,\n  getViewHeightByMediaQueries,\n  getViewWidthByMediaQueries,\n  tryToCheckIsDesktop,\n} from '../lib/adaptivity';\nimport { matchMediaListAddListener, matchMediaListRemoveListener } from '../lib/matchMedia';\nimport { useMediaQueries } from './useMediaQueries';\nimport { usePlatform } from './usePlatform';\n\nexport interface UseAdaptivityWithJSMediaQueries extends Required<BaseAdaptivityProps> {\n  isDesktop: boolean;\n}\n\n/**\n * Высчитывает и возвращает параметры адаптивности при изменении вьюпорта.\n *\n * Берёт в приоритет значения из `AdaptivityContext`.\n *\n * > ⚠ SSR\n * >\n * > Во избежания ошибок при гидратации, не используйте данный хук, если есть вероятность, что компонент будет отрендерен\n * > на стороне сервера.\n * >\n * > Лучше всего использовать для всплывающих окон, т.к. они вызываются только после загрузки\n * > страницы либо пользователем, либо программно.\n */\nexport const useAdaptivityWithJSMediaQueries = (): UseAdaptivityWithJSMediaQueries => {\n  if (!canUseDOM) {\n    // eslint-disable-next-line no-console\n    console.error(`[useAdaptivityWithJSMediaQueries] Похоже, вы пытаетесь использовать хук вне браузера.\n\nПостарайтесь этого избегать, чтобы не было ошибок при гидратации: при SSR нет информации о размерах экрана.\n\nИспользуйте CSS Media Query или библиотеку по типу https://github.com/artsy/fresnel.`);\n  }\n\n  const {\n    viewWidth: viewWidthContext,\n    viewHeight: viewHeightContext,\n    sizeX: sizeXContext,\n    sizeY: sizeYContext,\n    hasPointer: hasPointerContext,\n    hasHover: hasHoverContext,\n  } = React.useContext(AdaptivityContext);\n\n  const platform = usePlatform();\n  const mediaQueries = useMediaQueries();\n\n  const [[viewWidthLocal, viewHeightLocal], setViewSizeLocal] = React.useState(() => [\n    getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries)),\n    getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries)),\n  ]);\n\n  const adaptivityProps = React.useMemo(() => {\n    const hasPointer = getOrDefault(hasPointerContext, hasPointerLib);\n    const hasHover = getOrDefault(hasHoverContext, hasHoverLib);\n    const viewWidth = getOrDefault(viewWidthContext, viewWidthLocal);\n    const viewHeight = getOrDefault(viewHeightContext, viewHeightLocal);\n    const sizeX = getOrDefault(sizeXContext, getSizeX(viewWidth));\n    const sizeY = getOrDefault(sizeYContext, getSizeY(viewWidth, viewHeight, hasPointer));\n    const isDesktop = tryToCheckIsDesktop(viewWidth, viewHeight, hasPointer, platform);\n\n    return {\n      viewWidth,\n      viewHeight,\n      sizeX,\n      sizeY,\n      hasPointer,\n      hasHover,\n      isDesktop,\n    };\n  }, [\n    viewWidthLocal,\n    viewHeightLocal,\n    viewWidthContext,\n    viewHeightContext,\n    sizeXContext,\n    sizeYContext,\n    hasPointerContext,\n    hasHoverContext,\n    platform,\n  ]);\n\n  React.useEffect(() => {\n    const handleMediaQuery = () => {\n      setViewSizeLocal((prevSizeLocal) => {\n        const newViewWidthLocal = getOrDefault(\n          viewWidthContext,\n          getViewWidthByMediaQueries(mediaQueries),\n        );\n        const newViewHeightLocal = getOrDefault(\n          viewHeightContext,\n          getViewHeightByMediaQueries(mediaQueries),\n        );\n\n        const [prevViewWidthLocal, prevViewHeightLocal] = prevSizeLocal;\n\n        if (\n          prevViewWidthLocal !== newViewWidthLocal ||\n          prevViewHeightLocal !== newViewHeightLocal\n        ) {\n          return [newViewWidthLocal, newViewHeightLocal];\n        }\n\n        return prevSizeLocal;\n      });\n    };\n\n    if (!viewWidthContext) {\n      [\n        mediaQueries.desktopPlus,\n        mediaQueries.tablet,\n        mediaQueries.smallTablet,\n        mediaQueries.mobile,\n      ].forEach((matchMediaListener) =>\n        matchMediaListAddListener(matchMediaListener, handleMediaQuery),\n      );\n    }\n\n    if (!viewHeightContext) {\n      [mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(\n        (matchMediaListener) => matchMediaListAddListener(matchMediaListener, handleMediaQuery),\n      );\n    }\n\n    return () => {\n      [\n        mediaQueries.desktopPlus,\n        mediaQueries.tablet,\n        mediaQueries.smallTablet,\n        mediaQueries.mobile,\n        mediaQueries.mediumHeight,\n        mediaQueries.mobileLandscapeHeight,\n      ].forEach((matchMediaListener) =>\n        matchMediaListRemoveListener(matchMediaListener, handleMediaQuery),\n      );\n    };\n  }, [mediaQueries, viewWidthContext, viewHeightContext]);\n\n  return adaptivityProps;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}