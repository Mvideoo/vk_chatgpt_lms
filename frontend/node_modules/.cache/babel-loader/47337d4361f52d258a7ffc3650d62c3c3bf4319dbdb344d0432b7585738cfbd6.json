{"ast":null,"code":"import { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport { getFirstTouchEventData } from \"../dom.js\";\nconst DEFAULT_INITIAL_TIME = 0;\nconst MILLISECONDS = 1000;\n/**\n * JS имплементация класса из UIKIt iOS.\n *\n * https://developer.apple.com/documentation/uikit/uipangesturerecognizer\n */\nexport class UIPanGestureRecognizer {\n  setInitialTimeOnce() {\n    if (this.initialTime === DEFAULT_INITIAL_TIME) {\n      this.initialTime = Date.now();\n    }\n  }\n  setStartCoords(event) {\n    const {\n      clientX,\n      clientY\n    } = getFirstTouchEventData(event);\n    this.x1 = clientX;\n    this.y1 = clientY;\n  }\n  setEndCoords(event) {\n    const {\n      clientX,\n      clientY\n    } = getFirstTouchEventData(event);\n    this.x2 = clientX;\n    this.y2 = clientY;\n  }\n  delta() {\n    return {\n      x: this.x2 - this.x1,\n      y: this.y2 - this.y1\n    };\n  }\n  distance() {\n    const {\n      x,\n      y\n    } = this.delta();\n    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n  }\n  velocity() {\n    const deltaTime = (Date.now() - this.initialTime) / MILLISECONDS;\n    if (deltaTime <= 0) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n    const {\n      x,\n      y\n    } = this.delta();\n    return {\n      x: x / deltaTime,\n      y: y / deltaTime\n    };\n  }\n  angle() {\n    const deltaX = this.x2 - this.x1;\n    const deltaY = this.y2 - this.y1;\n    const radians = Math.atan2(deltaY, deltaX);\n    const degrees = radians * 180 / Math.PI;\n    return degrees < 0 ? 360 + degrees : degrees;\n  }\n  direction() {\n    const {\n      x,\n      y\n    } = this.delta();\n    return Math.abs(x) > Math.abs(y) ? {\n      axis: 'x',\n      direction: x > 0 ? 1 : x < 0 ? -1 : null\n    } : {\n      axis: 'y',\n      direction: y > 0 ? 1 : y < 0 ? -1 : null\n    };\n  }\n  reset() {\n    this.initialTime = DEFAULT_INITIAL_TIME;\n    this.x1 = this.y1 = 0;\n    this.x2 = this.y2 = 0;\n  }\n  constructor() {\n    _define_property(this, \"initialTime\", DEFAULT_INITIAL_TIME);\n    _define_property(this, \"x1\", 0);\n    _define_property(this, \"y1\", 0);\n    _define_property(this, \"x2\", 0);\n    _define_property(this, \"y2\", 0);\n  }\n}","map":{"version":3,"names":["getFirstTouchEventData","DEFAULT_INITIAL_TIME","MILLISECONDS","UIPanGestureRecognizer","setInitialTimeOnce","initialTime","Date","now","setStartCoords","event","clientX","clientY","x1","y1","setEndCoords","x2","y2","delta","x","y","distance","Math","sqrt","pow","velocity","deltaTime","angle","deltaX","deltaY","radians","atan2","degrees","PI","direction","abs","axis","reset","_define_property"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/lib/touch/UIPanGestureRecognizer.ts"],"sourcesContent":["import { getFirstTouchEventData } from '../dom';\n\nexport type Direction = { axis: 'x' | 'y'; direction: -1 | 1 | null };\n\nexport type Coords = { x: number; y: number };\n\nconst DEFAULT_INITIAL_TIME = 0;\nconst MILLISECONDS = 1000;\n\n/**\n * JS имплементация класса из UIKIt iOS.\n *\n * https://developer.apple.com/documentation/uikit/uipangesturerecognizer\n */\nexport class UIPanGestureRecognizer {\n  private initialTime = DEFAULT_INITIAL_TIME;\n  x1 = 0;\n  y1 = 0;\n  x2 = 0;\n  y2 = 0;\n\n  setInitialTimeOnce(): void {\n    if (this.initialTime === DEFAULT_INITIAL_TIME) {\n      this.initialTime = Date.now();\n    }\n  }\n\n  setStartCoords(event: UIEvent): void {\n    const { clientX, clientY } = getFirstTouchEventData(event);\n    this.x1 = clientX;\n    this.y1 = clientY;\n  }\n\n  setEndCoords(event: UIEvent): void {\n    const { clientX, clientY } = getFirstTouchEventData(event);\n    this.x2 = clientX;\n    this.y2 = clientY;\n  }\n\n  delta(): Coords {\n    return {\n      x: this.x2 - this.x1,\n      y: this.y2 - this.y1,\n    };\n  }\n\n  distance(): number {\n    const { x, y } = this.delta();\n    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n  }\n\n  velocity(): Coords {\n    const deltaTime = (Date.now() - this.initialTime) / MILLISECONDS;\n\n    if (deltaTime <= 0) {\n      return { x: 0, y: 0 };\n    }\n\n    const { x, y } = this.delta();\n    return { x: x / deltaTime, y: y / deltaTime };\n  }\n\n  angle(): number {\n    const deltaX = this.x2 - this.x1;\n    const deltaY = this.y2 - this.y1;\n    const radians = Math.atan2(deltaY, deltaX);\n    const degrees = (radians * 180) / Math.PI;\n    return degrees < 0 ? 360 + degrees : degrees;\n  }\n\n  direction(): Direction {\n    const { x, y } = this.delta();\n    return Math.abs(x) > Math.abs(y)\n      ? { axis: 'x', direction: x > 0 ? 1 : x < 0 ? -1 : null }\n      : { axis: 'y', direction: y > 0 ? 1 : y < 0 ? -1 : null };\n  }\n\n  reset(): void {\n    this.initialTime = DEFAULT_INITIAL_TIME;\n    this.x1 = this.y1 = 0;\n    this.x2 = this.y2 = 0;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}