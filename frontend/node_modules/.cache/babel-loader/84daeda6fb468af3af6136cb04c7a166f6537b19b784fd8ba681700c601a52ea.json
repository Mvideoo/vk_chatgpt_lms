{"ast":null,"code":"import * as React from \"react\";\nimport { convertDateFromTimeZone, convertDateToTimeZone } from \"../../lib/date.js\";\nconst _convertDateToTimeZone = (date, timezone) => {\n  return convertDateToTimeZone(date, timezone) || undefined;\n};\nconst _convertDateFromTimeZone = (date, timezone) => {\n  return convertDateFromTimeZone(date, timezone) || undefined;\n};\nconst getStateValue = (defaultStateValue, value, defaultValue, timezone) => {\n  if (value !== undefined) {\n    return _convertDateToTimeZone(value, timezone);\n  }\n  if (defaultValue !== undefined) {\n    return _convertDateToTimeZone(defaultValue, timezone);\n  }\n  return _convertDateToTimeZone(defaultStateValue, timezone);\n};\nexport const useDateInputValue = _ref => {\n  let {\n    value,\n    defaultValue,\n    onChange,\n    timezone\n  } = _ref;\n  const isControlled = value !== undefined;\n  const [internalValue, setInternalValue] = React.useState(getStateValue(undefined, value, defaultValue, timezone));\n  const lastUpdatedValueRef = React.useRef(getStateValue(undefined, value, defaultValue, timezone));\n  React.useEffect(() => {\n    if (isControlled) {\n      setInternalValue(_convertDateToTimeZone(value, timezone));\n      lastUpdatedValueRef.current = _convertDateToTimeZone(value, timezone);\n    }\n  }, [isControlled, timezone, value]);\n  const getLastUpdatedValue = React.useCallback(() => lastUpdatedValueRef.current, []);\n  const updateValue = React.useCallback(newValue => {\n    if (!isControlled) {\n      setInternalValue(newValue);\n      lastUpdatedValueRef.current = newValue;\n    }\n    const originalTimezoneValue = _convertDateFromTimeZone(newValue, timezone);\n    onChange === null || onChange === void 0 ? void 0 : onChange(originalTimezoneValue);\n    return originalTimezoneValue;\n  }, [isControlled, onChange, timezone]);\n  return {\n    value: internalValue,\n    updateValue,\n    setInternalValue,\n    getLastUpdatedValue\n  };\n};","map":{"version":3,"names":["React","convertDateFromTimeZone","convertDateToTimeZone","_convertDateToTimeZone","date","timezone","undefined","_convertDateFromTimeZone","getStateValue","defaultStateValue","value","defaultValue","useDateInputValue","_ref","onChange","isControlled","internalValue","setInternalValue","useState","lastUpdatedValueRef","useRef","useEffect","current","getLastUpdatedValue","useCallback","updateValue","newValue","originalTimezoneValue"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/DateInput/hooks.ts"],"sourcesContent":["import * as React from 'react';\nimport { convertDateFromTimeZone, convertDateToTimeZone } from '../../lib/date';\n\ninterface UseDateInputValueOptions {\n  value?: Date;\n  defaultValue?: Date;\n  onChange?: (value?: Date) => void;\n  timezone?: string;\n}\n\nexport interface UseDateInputValueReturn {\n  value?: Date;\n  updateValue: (v?: Date) => Date | undefined;\n  setInternalValue: (v?: Date) => void;\n  getLastUpdatedValue: () => Date | undefined;\n}\n\nconst _convertDateToTimeZone = (date?: Date, timezone?: string): Date | undefined => {\n  return convertDateToTimeZone(date, timezone) || undefined;\n};\n\nconst _convertDateFromTimeZone = (date?: Date, timezone?: string): Date | undefined => {\n  return convertDateFromTimeZone(date, timezone) || undefined;\n};\n\nconst getStateValue = (\n  defaultStateValue?: Date,\n  value?: Date,\n  defaultValue?: Date,\n  timezone?: string,\n): Date | undefined => {\n  if (value !== undefined) {\n    return _convertDateToTimeZone(value, timezone);\n  }\n  if (defaultValue !== undefined) {\n    return _convertDateToTimeZone(defaultValue, timezone);\n  }\n  return _convertDateToTimeZone(defaultStateValue, timezone);\n};\n\nexport const useDateInputValue = ({\n  value,\n  defaultValue,\n  onChange,\n  timezone,\n}: UseDateInputValueOptions): UseDateInputValueReturn => {\n  const isControlled = value !== undefined;\n\n  const [internalValue, setInternalValue] = React.useState<Date | undefined>(\n    getStateValue(undefined, value, defaultValue, timezone),\n  );\n  const lastUpdatedValueRef = React.useRef<Date | undefined>(\n    getStateValue(undefined, value, defaultValue, timezone),\n  );\n\n  React.useEffect(() => {\n    if (isControlled) {\n      setInternalValue(_convertDateToTimeZone(value, timezone));\n      lastUpdatedValueRef.current = _convertDateToTimeZone(value, timezone);\n    }\n  }, [isControlled, timezone, value]);\n\n  const getLastUpdatedValue = React.useCallback(() => lastUpdatedValueRef.current, []);\n\n  const updateValue = React.useCallback(\n    (newValue?: Date) => {\n      if (!isControlled) {\n        setInternalValue(newValue);\n        lastUpdatedValueRef.current = newValue;\n      }\n      const originalTimezoneValue = _convertDateFromTimeZone(newValue, timezone);\n      onChange?.(originalTimezoneValue);\n      return originalTimezoneValue;\n    },\n    [isControlled, onChange, timezone],\n  );\n\n  return {\n    value: internalValue,\n    updateValue,\n    setInternalValue,\n    getLastUpdatedValue,\n  };\n};\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ;AAgB/D,MAAMC,sBAAA,GAAyBA,CAACC,IAAA,EAAaC,QAAA;EAC3C,OAAOH,qBAAA,CAAsBE,IAAA,EAAMC,QAAA,KAAaC,SAAA;AAClD;AAEA,MAAMC,wBAAA,GAA2BA,CAACH,IAAA,EAAaC,QAAA;EAC7C,OAAOJ,uBAAA,CAAwBG,IAAA,EAAMC,QAAA,KAAaC,SAAA;AACpD;AAEA,MAAME,aAAA,GAAgBA,CACpBC,iBAAA,EACAC,KAAA,EACAC,YAAA,EACAN,QAAA;EAEA,IAAIK,KAAA,KAAUJ,SAAA,EAAW;IACvB,OAAOH,sBAAA,CAAuBO,KAAA,EAAOL,QAAA;EACvC;EACA,IAAIM,YAAA,KAAiBL,SAAA,EAAW;IAC9B,OAAOH,sBAAA,CAAuBQ,YAAA,EAAcN,QAAA;EAC9C;EACA,OAAOF,sBAAA,CAAuBM,iBAAA,EAAmBJ,QAAA;AACnD;AAEA,OAAO,MAAMO,iBAAA,GAAoBC,IAAA,IAKN;EAAA,IALO;IAChCH,KAAK;IACLC,YAAY;IACZG,QAAQ;IACRT;EAAQ,CACiB,GAAAQ,IAAA;EACzB,MAAME,YAAA,GAAeL,KAAA,KAAUJ,SAAA;EAE/B,MAAM,CAACU,aAAA,EAAeC,gBAAA,CAAiB,GAAGjB,KAAA,CAAMkB,QAAQ,CACtDV,aAAA,CAAcF,SAAA,EAAWI,KAAA,EAAOC,YAAA,EAAcN,QAAA;EAEhD,MAAMc,mBAAA,GAAsBnB,KAAA,CAAMoB,MAAM,CACtCZ,aAAA,CAAcF,SAAA,EAAWI,KAAA,EAAOC,YAAA,EAAcN,QAAA;EAGhDL,KAAA,CAAMqB,SAAS,CAAC;IACd,IAAIN,YAAA,EAAc;MAChBE,gBAAA,CAAiBd,sBAAA,CAAuBO,KAAA,EAAOL,QAAA;MAC/Cc,mBAAA,CAAoBG,OAAO,GAAGnB,sBAAA,CAAuBO,KAAA,EAAOL,QAAA;IAC9D;EACF,GAAG,CAACU,YAAA,EAAcV,QAAA,EAAUK,KAAA,CAAM;EAElC,MAAMa,mBAAA,GAAsBvB,KAAA,CAAMwB,WAAW,CAAC,MAAML,mBAAA,CAAoBG,OAAO,EAAE,EAAE;EAEnF,MAAMG,WAAA,GAAczB,KAAA,CAAMwB,WAAW,CAClCE,QAAA;IACC,IAAI,CAACX,YAAA,EAAc;MACjBE,gBAAA,CAAiBS,QAAA;MACjBP,mBAAA,CAAoBG,OAAO,GAAGI,QAAA;IAChC;IACA,MAAMC,qBAAA,GAAwBpB,wBAAA,CAAyBmB,QAAA,EAAUrB,QAAA;IACjES,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAWa,qBAAA;IACX,OAAOA,qBAAA;EACT,GACA,CAACZ,YAAA,EAAcD,QAAA,EAAUT,QAAA,CAAS;EAGpC,OAAO;IACLK,KAAA,EAAOM,aAAA;IACPS,WAAA;IACAR,gBAAA;IACAM;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}