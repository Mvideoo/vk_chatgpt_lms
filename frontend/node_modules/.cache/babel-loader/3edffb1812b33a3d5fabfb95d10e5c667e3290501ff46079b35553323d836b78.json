{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useBooleanState } from \"../../../hooks/useBooleanState.js\";\nimport { useExternRef } from \"../../../hooks/useExternRef.js\";\nimport { useFocusVisible } from \"../../../hooks/useFocusVisible.js\";\nimport { useFocusVisibleClassName } from \"../../../hooks/useFocusVisibleClassName.js\";\nimport { arrowMiddleware, convertFloatingDataToReactCSSProperties, flipMiddleware, offsetMiddleware, shiftMiddleware, useFloating } from \"../../../lib/floating/index.js\";\nimport { TooltipBase } from \"../../TooltipBase/TooltipBase.js\";\nexport const SliderThumb = _param => {\n  var {\n      className,\n      getRootRef,\n      inputProps,\n      withTooltip,\n      isActive\n    } = _param,\n    restProps = _object_without_properties(_param, [\"className\", \"getRootRef\", \"inputProps\", \"withTooltip\", \"isActive\"]);\n  const {\n    focusVisible,\n    onBlur,\n    onFocus\n  } = useFocusVisible();\n  const focusVisibleClassNames = useFocusVisibleClassName({\n    focusVisible,\n    mode: \"vkuiSliderThumb__focusVisible\"\n  });\n  const [arrowRef, setArrowRef] = React.useState(null);\n  const memoizedMiddlewares = React.useMemo(() => {\n    return [offsetMiddleware({\n      crossAxis: 0,\n      mainAxis: 15\n    }), flipMiddleware(), shiftMiddleware({\n      padding: 8\n    }), arrowMiddleware({\n      element: arrowRef\n    })];\n  }, [arrowRef]);\n  const {\n    x: floatingDataX,\n    y: floatingDataY,\n    placement: resolvedPlacement,\n    refs,\n    strategy: floatingPositionStrategy,\n    middlewareData: {\n      arrow: arrowCoords\n    },\n    update: updateTooltipPosition\n  } = useFloating({\n    placement: 'top',\n    middleware: memoizedMiddlewares\n  });\n  const {\n    value: isHovered,\n    setTrue: setHoveredTrue,\n    setFalse: setHoveredFalse\n  } = useBooleanState(false);\n  const handleRootRef = useExternRef(getRootRef, refs.setReference);\n  const shouldShowTooltip = withTooltip && (focusVisible || isHovered || isActive);\n  const inputValue = inputProps && inputProps.value;\n  React.useEffect(function udpateTooltipPositionOnValueChange() {\n    if (shouldShowTooltip && inputValue !== 'undefined') {\n      updateTooltipPosition();\n    }\n  }, [inputValue, updateTooltipPosition, shouldShowTooltip]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"span\", _object_spread_props(_object_spread({}, restProps), {\n      ref: handleRootRef,\n      onMouseEnter: setHoveredTrue,\n      onMouseLeave: setHoveredFalse,\n      className: classNames(\"vkuiSliderThumb__host\", focusVisibleClassNames, isActive && \"vkuiSliderThumb__active\", isHovered && \"vkuiSliderThumb__hover\", className),\n      children: /*#__PURE__*/_jsx(\"input\", _object_spread_props(_object_spread({}, inputProps), {\n        type: \"range\",\n        className: \"vkuiSliderThumb__nativeInput\",\n        \"aria-orientation\": \"horizontal\",\n        onBlur: onBlur,\n        onFocus: onFocus\n      }))\n    })), shouldShowTooltip && /*#__PURE__*/_jsx(TooltipBase, {\n      appearance: \"neutral\",\n      getRootRef: refs.setFloating,\n      style: convertFloatingDataToReactCSSProperties({\n        strategy: floatingPositionStrategy,\n        x: floatingDataX,\n        y: floatingDataY\n      }),\n      arrowProps: {\n        coords: arrowCoords,\n        placement: resolvedPlacement,\n        getRootRef: setArrowRef\n      },\n      description: inputValue\n    })]\n  });\n};","map":{"version":3,"names":["React","classNames","useBooleanState","useExternRef","useFocusVisible","useFocusVisibleClassName","arrowMiddleware","convertFloatingDataToReactCSSProperties","flipMiddleware","offsetMiddleware","shiftMiddleware","useFloating","TooltipBase","SliderThumb","_param","className","getRootRef","inputProps","withTooltip","isActive","restProps","_object_without_properties","focusVisible","onBlur","onFocus","focusVisibleClassNames","mode","arrowRef","setArrowRef","useState","memoizedMiddlewares","useMemo","crossAxis","mainAxis","padding","element","x","floatingDataX","y","floatingDataY","placement","resolvedPlacement","refs","strategy","floatingPositionStrategy","middlewareData","arrow","arrowCoords","update","updateTooltipPosition","middleware","value","isHovered","setTrue","setHoveredTrue","setFalse","setHoveredFalse","handleRootRef","setReference","shouldShowTooltip","inputValue","useEffect","udpateTooltipPositionOnValueChange","_jsxs","Fragment","_jsx","_object_spread_props","_object_spread","ref","onMouseEnter","onMouseLeave","type","appearance","setFloating","style","arrowProps","coords","description"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/Slider/SliderThumb/SliderThumb.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useBooleanState } from '../../../hooks/useBooleanState';\nimport { useExternRef } from '../../../hooks/useExternRef';\nimport { useFocusVisible } from '../../../hooks/useFocusVisible';\nimport { useFocusVisibleClassName } from '../../../hooks/useFocusVisibleClassName';\nimport {\n  arrowMiddleware,\n  convertFloatingDataToReactCSSProperties,\n  flipMiddleware,\n  offsetMiddleware,\n  shiftMiddleware,\n  useFloating,\n} from '../../../lib/floating';\nimport type { HasDataAttribute, HasRootRef } from '../../../types';\nimport { TooltipBase } from '../../TooltipBase/TooltipBase';\nimport styles from './SliderThumb.module.css';\n\ninterface SliderThumbProps extends HasRootRef<HTMLSpanElement>, HasDataAttribute {\n  className?: string;\n  style?: React.CSSProperties;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement> &\n    React.RefAttributes<HTMLInputElement> &\n    HasDataAttribute;\n  withTooltip?: boolean;\n  isActive?: boolean;\n}\n\nexport const SliderThumb = ({\n  className,\n  getRootRef,\n  inputProps,\n  withTooltip,\n  isActive,\n  ...restProps\n}: SliderThumbProps): React.ReactNode => {\n  const { focusVisible, onBlur, onFocus } = useFocusVisible();\n  const focusVisibleClassNames = useFocusVisibleClassName({\n    focusVisible,\n    mode: styles.focusVisible,\n  });\n  const [arrowRef, setArrowRef] = React.useState<HTMLDivElement | null>(null);\n\n  const memoizedMiddlewares = React.useMemo(() => {\n    return [\n      offsetMiddleware({\n        crossAxis: 0,\n        mainAxis: 15,\n      }),\n      flipMiddleware(),\n      shiftMiddleware({ padding: 8 }),\n      arrowMiddleware({\n        element: arrowRef,\n      }),\n    ];\n  }, [arrowRef]);\n\n  const {\n    x: floatingDataX,\n    y: floatingDataY,\n    placement: resolvedPlacement,\n    refs,\n    strategy: floatingPositionStrategy,\n    middlewareData: { arrow: arrowCoords },\n    update: updateTooltipPosition,\n  } = useFloating({\n    placement: 'top',\n    middleware: memoizedMiddlewares,\n  });\n\n  const {\n    value: isHovered,\n    setTrue: setHoveredTrue,\n    setFalse: setHoveredFalse,\n  } = useBooleanState(false);\n\n  const handleRootRef = useExternRef<HTMLSpanElement>(getRootRef, refs.setReference);\n\n  const shouldShowTooltip = withTooltip && (focusVisible || isHovered || isActive);\n\n  const inputValue = inputProps && inputProps.value;\n  React.useEffect(\n    function udpateTooltipPositionOnValueChange() {\n      if (shouldShowTooltip && inputValue !== 'undefined') {\n        updateTooltipPosition();\n      }\n    },\n    [inputValue, updateTooltipPosition, shouldShowTooltip],\n  );\n\n  return (\n    <React.Fragment>\n      <span\n        {...restProps}\n        ref={handleRootRef}\n        onMouseEnter={setHoveredTrue}\n        onMouseLeave={setHoveredFalse}\n        className={classNames(\n          styles.host,\n          focusVisibleClassNames,\n          isActive && styles.active,\n          isHovered && styles.hover,\n          className,\n        )}\n      >\n        <input\n          {...inputProps}\n          type=\"range\"\n          className={styles.nativeInput}\n          aria-orientation=\"horizontal\"\n          onBlur={onBlur}\n          onFocus={onFocus}\n        />\n      </span>\n      {shouldShowTooltip && (\n        <TooltipBase\n          appearance=\"neutral\"\n          getRootRef={refs.setFloating}\n          style={convertFloatingDataToReactCSSProperties({\n            strategy: floatingPositionStrategy,\n            x: floatingDataX,\n            y: floatingDataY,\n          })}\n          arrowProps={{\n            coords: arrowCoords,\n            placement: resolvedPlacement,\n            getRootRef: setArrowRef,\n          }}\n          description={inputValue}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}