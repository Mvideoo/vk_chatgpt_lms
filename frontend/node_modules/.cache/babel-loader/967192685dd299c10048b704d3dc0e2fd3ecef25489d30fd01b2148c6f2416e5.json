{"ast":null,"code":"import { addDays, addWeeks, eachDayOfInterval, endOfMonth, endOfWeek, isAfter, isBefore, isFirstDayOfMonth, isLastDayOfMonth, isSameDay, startOfMonth, startOfWeek, subDays, subWeeks } from \"date-fns\";\nimport { clamp as clampNumber } from \"../helpers/math.js\";\nexport const DEFAULT_MAX_YEAR = 9999;\n// 100 - из-за ограничений dayjs https://github.com/iamkun/dayjs/issues/2591\nexport const DEFAULT_MIN_YEAR = 100;\nexport const getYears = (currentYear, range) => {\n  const years = [];\n  const minYear = clampNumber(currentYear - range, DEFAULT_MIN_YEAR, DEFAULT_MAX_YEAR);\n  const maxYear = clampNumber(currentYear + range, DEFAULT_MIN_YEAR, DEFAULT_MAX_YEAR);\n  for (let i = minYear; i <= maxYear; i++) {\n    years.push({\n      label: String(i).padStart(4, '0'),\n      value: i\n    });\n  }\n  return years;\n};\nexport const getMonths = locale => {\n  const months = [];\n  const formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long'\n  });\n  for (let i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date('1970-01-01').setMonth(i)),\n      value: i\n    });\n  }\n  return months;\n};\nexport const getDaysNames = (now, weekStartsOn, locale) => {\n  const formatter = new Intl.DateTimeFormat(locale, {\n    weekday: 'short'\n  });\n  return eachDayOfInterval({\n    start: startOfWeek(now, {\n      weekStartsOn\n    }),\n    end: endOfWeek(now, {\n      weekStartsOn\n    })\n  }).map(day => formatter.format(day));\n};\nexport const navigateDate = (date, key) => {\n  let newDate = date !== null && date !== void 0 ? date : new Date();\n  switch (key) {\n    case 'ArrowRight':\n      newDate = addDays(newDate, 1);\n      break;\n    case 'ArrowLeft':\n      newDate = subDays(newDate, 1);\n      break;\n    case 'ArrowUp':\n      newDate = subWeeks(newDate, 1);\n      break;\n    case 'ArrowDown':\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n  return newDate;\n};\nexport const getWeeks = (viewDate, weekStartsOn) => {\n  const start = startOfWeek(startOfMonth(viewDate), {\n    weekStartsOn\n  });\n  const end = endOfWeek(endOfMonth(viewDate), {\n    weekStartsOn\n  });\n  let count = 0;\n  let current = start;\n  const nestedWeeks = [];\n  let lastDay = null;\n  while (isBefore(current, end)) {\n    const weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    const day = current.getDay();\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n    current = addDays(current, 1);\n  }\n  return nestedWeeks;\n};\nexport const setTimeEqual = (to, from) => {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n  return to;\n};\nexport const isFirstDay = (day, dayOfWeek) => dayOfWeek === 0 || isFirstDayOfMonth(day);\nexport const isLastDay = (day, dayOfWeek) => dayOfWeek === 6 || isLastDayOfMonth(day);\n/**\n * Возвращает дату, ограниченную `min` и/или `max` значениями\n */\nexport function clamp(day) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    min,\n    max\n  } = options;\n  if (min && isBefore(day, min)) {\n    return min;\n  }\n  if (max && isAfter(day, max)) {\n    return max;\n  }\n  return day;\n}\n/**\n * Позволяет определить удовлетворяет ли исходная дата заданным ограничения `min` и/или `max`\n */\nexport function isDayMinMaxRestricted(day) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    min,\n    max,\n    withTime = false\n  } = options;\n  if (!withTime && (min && isSameDay(day, min) || max && isSameDay(day, max))) {\n    return false;\n  }\n  return Boolean(min && isBefore(day, min) || max && isAfter(day, max));\n}","map":{"version":3,"names":["addDays","addWeeks","eachDayOfInterval","endOfMonth","endOfWeek","isAfter","isBefore","isFirstDayOfMonth","isLastDayOfMonth","isSameDay","startOfMonth","startOfWeek","subDays","subWeeks","clamp","clampNumber","DEFAULT_MAX_YEAR","DEFAULT_MIN_YEAR","getYears","currentYear","range","years","minYear","maxYear","i","push","label","String","padStart","value","getMonths","locale","months","formatter","Intl","DateTimeFormat","month","format","Date","setMonth","getDaysNames","now","weekStartsOn","weekday","start","end","map","day","navigateDate","date","key","newDate","getWeeks","viewDate","count","current","nestedWeeks","lastDay","weekNumber","Math","floor","getDay","setTimeEqual","to","from","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","isFirstDay","dayOfWeek","isLastDay","options","arguments","length","undefined","min","max","isDayMinMaxRestricted","withTime","Boolean"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/lib/calendar.ts"],"sourcesContent":["import {\n  addDays,\n  addWeeks,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  isAfter,\n  isBefore,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n  isSameDay,\n  startOfMonth,\n  startOfWeek,\n  subDays,\n  subWeeks,\n} from 'date-fns';\nimport { clamp as clampNumber } from '../helpers/math';\n\nexport const DEFAULT_MAX_YEAR = 9999;\n// 100 - из-за ограничений dayjs https://github.com/iamkun/dayjs/issues/2591\nexport const DEFAULT_MIN_YEAR = 100;\n\nexport const getYears = (\n  currentYear: number,\n  range: number,\n): Array<{\n  value: number;\n  label: string;\n}> => {\n  const years: Array<{\n    value: number;\n    label: string;\n  }> = [];\n\n  const minYear = clampNumber(currentYear - range, DEFAULT_MIN_YEAR, DEFAULT_MAX_YEAR);\n  const maxYear = clampNumber(currentYear + range, DEFAULT_MIN_YEAR, DEFAULT_MAX_YEAR);\n\n  for (let i = minYear; i <= maxYear; i++) {\n    years.push({ label: String(i).padStart(4, '0'), value: i });\n  }\n\n  return years;\n};\n\nexport const getMonths = (\n  locale?: string,\n): Array<{\n  value: number;\n  label: string;\n}> => {\n  const months: Array<{\n    value: number;\n    label: string;\n  }> = [];\n  const formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n  });\n\n  for (let i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date('1970-01-01').setMonth(i)),\n      value: i,\n    });\n  }\n\n  return months;\n};\n\nexport const getDaysNames = (\n  now: Date,\n  weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6,\n  locale?: string,\n): string[] => {\n  const formatter = new Intl.DateTimeFormat(locale, {\n    weekday: 'short',\n  });\n  return eachDayOfInterval({\n    start: startOfWeek(now, { weekStartsOn }),\n    end: endOfWeek(now, { weekStartsOn }),\n  }).map((day) => formatter.format(day));\n};\n\nexport const navigateDate = (date?: Date | null, key?: string): Date => {\n  let newDate = date ?? new Date();\n\n  switch (key) {\n    case 'ArrowRight':\n      newDate = addDays(newDate, 1);\n      break;\n    case 'ArrowLeft':\n      newDate = subDays(newDate, 1);\n      break;\n    case 'ArrowUp':\n      newDate = subWeeks(newDate, 1);\n      break;\n    case 'ArrowDown':\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n\n  return newDate;\n};\n\nexport const getWeeks = (viewDate: Date, weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6): Date[][] => {\n  const start = startOfWeek(startOfMonth(viewDate), { weekStartsOn });\n  const end = endOfWeek(endOfMonth(viewDate), { weekStartsOn });\n\n  let count = 0;\n  let current = start;\n  const nestedWeeks: Date[][] = [];\n  let lastDay = null;\n  while (isBefore(current, end)) {\n    const weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    const day = current.getDay();\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n    current = addDays(current, 1);\n  }\n  return nestedWeeks;\n};\n\nexport const setTimeEqual = (to: Date, from?: Date | null): Date => {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n\n  return to;\n};\n\nexport const isFirstDay = (day: Date, dayOfWeek: number): boolean =>\n  dayOfWeek === 0 || isFirstDayOfMonth(day);\n\nexport const isLastDay = (day: Date, dayOfWeek: number): boolean =>\n  dayOfWeek === 6 || isLastDayOfMonth(day);\n\n/**\n * Возвращает дату, ограниченную `min` и/или `max` значениями\n */\nexport function clamp(day: Date, options: { min?: Date; max?: Date } = {}): Date {\n  const { min, max } = options;\n  if (min && isBefore(day, min)) {\n    return min;\n  }\n  if (max && isAfter(day, max)) {\n    return max;\n  }\n  return day;\n}\n\n/**\n * Позволяет определить удовлетворяет ли исходная дата заданным ограничения `min` и/или `max`\n */\nexport function isDayMinMaxRestricted(\n  day: Date,\n  options: { min?: Date; max?: Date; withTime?: boolean } = {},\n): boolean {\n  const { min, max, withTime = false } = options;\n  if (!withTime && ((min && isSameDay(day, min)) || (max && isSameDay(day, max)))) {\n    return false;\n  }\n  return Boolean((min && isBefore(day, min)) || (max && isAfter(day, max)));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}