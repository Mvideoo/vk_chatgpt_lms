{"ast":null,"code":"import * as React from \"react\";\nimport { hasMouse as hasPointerLib } from \"@vkontakte/vkjs\";\nimport { AdaptivityContext } from \"../components/AdaptivityProvider/AdaptivityContext.js\";\nimport { useIsClient } from \"./useIsClient.js\";\nexport function useAdaptivityHasPointer() {\n  let deferDetect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const {\n    hasPointer: hasPointerContext\n  } = React.useContext(AdaptivityContext);\n  const needTwoPassRendering = deferDetect || hasPointerContext === undefined;\n  const isClient = useIsClient(!needTwoPassRendering);\n  if (!isClient || hasPointerContext !== undefined) {\n    return hasPointerContext;\n  }\n  return hasPointerLib;\n}","map":{"version":3,"names":["React","hasMouse","hasPointerLib","AdaptivityContext","useIsClient","useAdaptivityHasPointer","deferDetect","arguments","length","undefined","hasPointer","hasPointerContext","useContext","needTwoPassRendering","isClient"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/hooks/useAdaptivityHasPointer.ts"],"sourcesContent":["import * as React from 'react';\nimport { hasMouse as hasPointerLib } from '@vkontakte/vkjs';\nimport { AdaptivityContext } from '../components/AdaptivityProvider/AdaptivityContext';\nimport { useIsClient } from './useIsClient';\n\n/**\n * Определение происходит с помощью `window.matchMedia`. Для того, чтобы не было ошибок при гидратации, по умолчанию\n * откладываем определение на второй рендер.\n *\n * [No SSR] Если передать `false`, то определение будет сразу.\n */\nexport function useAdaptivityHasPointer(deferDetect?: true): undefined | boolean; // prettier-ignore\nexport function useAdaptivityHasPointer(deferDetect?: false): boolean;\nexport function useAdaptivityHasPointer(deferDetect = true): undefined | boolean {\n  const { hasPointer: hasPointerContext } = React.useContext(AdaptivityContext);\n\n  const needTwoPassRendering = deferDetect || hasPointerContext === undefined;\n\n  const isClient = useIsClient(!needTwoPassRendering);\n  if (!isClient || hasPointerContext !== undefined) {\n    return hasPointerContext;\n  }\n\n  return hasPointerLib;\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,QAAA,IAAYC,aAAa,QAAQ;AAC1C,SAASC,iBAAiB,QAAQ;AAClC,SAASC,WAAW,QAAQ;AAU5B,OAAO,SAASC,wBAAA,EAA0C;EAAA,IAAlBC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAc,IAAI;EACxD,MAAM;IAAEG,UAAA,EAAYC;EAAiB,CAAE,GAAGX,KAAA,CAAMY,UAAU,CAACT,iBAAA;EAE3D,MAAMU,oBAAA,GAAuBP,WAAA,IAAeK,iBAAA,KAAsBF,SAAA;EAElE,MAAMK,QAAA,GAAWV,WAAA,CAAY,CAACS,oBAAA;EAC9B,IAAI,CAACC,QAAA,IAAYH,iBAAA,KAAsBF,SAAA,EAAW;IAChD,OAAOE,iBAAA;EACT;EAEA,OAAOT,aAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}