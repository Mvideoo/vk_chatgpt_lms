{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames, debounce } from \"@vkontakte/vkjs\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity.js\";\nimport { useExternRef } from \"../../hooks/useExternRef.js\";\nimport { useFocusWithin } from \"../../hooks/useFocusWithin.js\";\nimport { useStateWithPrev } from \"../../hooks/useStateWithPrev.js\";\nimport { callMultiple } from \"../../lib/callMultiple.js\";\nimport { useDOM } from \"../../lib/dom.js\";\nimport { defaultFilterFn } from \"../../lib/select.js\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect.js\";\nimport { warnOnce } from \"../../lib/warnOnce.js\";\nimport { CustomSelectDropdown } from \"../CustomSelectDropdown/CustomSelectDropdown.js\";\nimport { CustomSelectOption } from \"../CustomSelectOption/CustomSelectOption.js\";\nimport { DropdownIcon } from \"../DropdownIcon/DropdownIcon.js\";\nimport { NOT_SELECTED, remapFromNativeValueToSelectValue, remapFromSelectValueToNativeValue } from \"../NativeSelect/NativeSelect.js\";\nimport { Footnote } from \"../Typography/Footnote/Footnote.js\";\nimport { VisuallyHidden } from \"../VisuallyHidden/VisuallyHidden.js\";\nimport { CustomSelectClearButton } from \"./CustomSelectClearButton.js\";\nimport { CustomSelectInput } from \"./CustomSelectInput/CustomSelectInput.js\";\nconst sizeYClassNames = {\n  none: \"vkuiCustomSelect__sizeYNone\",\n  compact: \"vkuiCustomSelect__sizeYCompact\"\n};\nconst findIndexAfter = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n  if (startIndex >= options.length - 1) {\n    return -1;\n  }\n  return options.findIndex((option, i) => i > startIndex && !option.disabled);\n};\nconst findIndexBefore = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let endIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.length;\n  let result = -1;\n  if (endIndex <= 0) {\n    return result;\n  }\n  for (let i = endIndex - 1; i >= 0; i--) {\n    let option = options[i];\n    if (!option.disabled) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\nconst warn = warnOnce('CustomSelect');\nconst checkOptionsValueType = options => {\n  if (new Set(options.map(item => typeof item.value)).size > 1) {\n    warn('Некоторые значения ваших опций имеют разные типы. onChange всегда возвращает строковый тип.', 'error');\n  }\n};\nconst checkMixControlledAndUncontrolledState = (oldIsControlled, newIsControlled) => {\n  if (!oldIsControlled && newIsControlled) {\n    warn(`Похоже, что компонент был переведен из состояния Uncontrolled в Controlled. Пожалуйста, не делайте так. Если вам нужно отобразить невыбранное состояние компонента, используйте value=null вместо undefined`, 'error');\n  }\n  if (oldIsControlled && !newIsControlled) {\n    warn(`Похоже, что компонент был переведен из состояния Controlled в Uncontrolled. Пожалуйста, не делайте так. Если вам нужно отобразить невыбранное состояние компонента, используйте value=null вместо undefined`, 'error');\n  }\n};\nfunction defaultRenderOptionFn(_param) {\n  var {\n      option\n    } = _param,\n    props = _object_without_properties(_param, [\"option\"]);\n  return /*#__PURE__*/_jsx(CustomSelectOption, _object_spread({}, props));\n}\nconst handleOptionDown = e => {\n  e.preventDefault();\n};\nfunction findSelectedIndex() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let value = arguments.length > 1 ? arguments[1] : undefined;\n  if (value === NOT_SELECTED.CUSTOM) {\n    return -1;\n  }\n  var _options_findIndex;\n  return (_options_findIndex = options.findIndex(item => {\n    value = typeof item.value === 'number' ? Number(value) : value;\n    return item.value === value;\n  })) !== null && _options_findIndex !== void 0 ? _options_findIndex : -1;\n}\nconst filter = (options, inputValue, filterFn) => {\n  return typeof filterFn === 'function' ? options.filter(option => filterFn(inputValue, option)) : options;\n};\nfunction isMousePositionChanged(event, prevPosition) {\n  return Math.abs(prevPosition.x - event.clientX) >= 1 || Math.abs(prevPosition.y - event.clientY) >= 1;\n}\n/**\n * @see https://vkcom.github.io/VKUI/#/CustomSelect\n */\nexport function CustomSelect(props) {\n  const [opened, setOpened] = React.useState(false);\n  const {\n      before,\n      name,\n      className,\n      getRef,\n      getRootRef,\n      popupDirection = 'bottom',\n      style,\n      onChange,\n      children,\n      'onInputChange': onInputChangeProp,\n      renderDropdown,\n      onOpen,\n      onClose,\n      fetching,\n      forceDropdownPortal,\n      selectType = 'default',\n      searchable = false,\n      'renderOption': renderOptionProp = defaultRenderOptionFn,\n      'options': optionsProp,\n      emptyText = 'Ничего не найдено',\n      filterFn = defaultFilterFn,\n      'icon': iconProp,\n      ClearButton = CustomSelectClearButton,\n      allowClearButton = false,\n      dropdownOffsetDistance = 0,\n      dropdownAutoWidth = false,\n      noMaxHeight = false,\n      'aria-labelledby': ariaLabelledBy,\n      clearButtonTestId,\n      nativeSelectTestId,\n      defaultValue,\n      required,\n      getSelectInputRef,\n      overscrollBehavior,\n      onInputKeyDown\n    } = props,\n    restProps = _object_without_properties(props, [\"before\", \"name\", \"className\", \"getRef\", \"getRootRef\", \"popupDirection\", \"style\", \"onChange\", \"children\", 'onInputChange', \"renderDropdown\", \"onOpen\", \"onClose\", \"fetching\", \"forceDropdownPortal\", \"selectType\", \"searchable\", 'renderOption', 'options', \"emptyText\", \"filterFn\", 'icon', \"ClearButton\", \"allowClearButton\", \"dropdownOffsetDistance\", \"dropdownAutoWidth\", \"noMaxHeight\", 'aria-labelledby', \"clearButtonTestId\", \"nativeSelectTestId\", \"defaultValue\", \"required\", \"getSelectInputRef\", \"overscrollBehavior\", \"onInputKeyDown\"]);\n  if (process.env.NODE_ENV === 'development') {\n    checkOptionsValueType(optionsProp);\n  }\n  const {\n    sizeY = 'none'\n  } = useAdaptivity();\n  const containerRef = React.useRef(null);\n  const handleRootRef = useExternRef(containerRef, getRootRef);\n  const scrollBoxRef = React.useRef(null);\n  const selectElRef = useExternRef(getRef);\n  const optionsWrapperRef = React.useRef(null);\n  const scrollPerformedRef = React.useRef(false);\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState(-1);\n  const [isControlledOutside, setIsControlledOutside] = React.useState(props.value !== undefined);\n  const [inputValue, setInputValue] = React.useState('');\n  const [[nativeSelectValue, prevNativeSelectValue], setNativeSelectValue] = useStateWithPrev(() => {\n    if (props.value !== undefined) {\n      return remapFromSelectValueToNativeValue(props.value);\n    }\n    if (defaultValue !== undefined) {\n      return remapFromSelectValueToNativeValue(defaultValue);\n    }\n    return NOT_SELECTED.NATIVE;\n  });\n  const [popperPlacement, setPopperPlacement] = React.useState(popupDirection);\n  const options = React.useMemo(() => {\n    return filter(optionsProp, inputValue, filterFn);\n  }, [filterFn, inputValue, optionsProp]);\n  var _props_value, _ref;\n  const [selectedOptionIndex, setSelectedOptionIndex] = React.useState(findSelectedIndex(options, (_ref = (_props_value = props.value) !== null && _props_value !== void 0 ? _props_value : defaultValue) !== null && _ref !== void 0 ? _ref : null));\n  React.useEffect(function updateOptionsIndexes() {\n    const value = props.value !== undefined ? props.value : remapFromNativeValueToSelectValue(nativeSelectValue);\n    const selectedIndex = findSelectedIndex(options, value);\n    setSelectedOptionIndex(selectedIndex);\n    setFocusedOptionIndex(selectedIndex);\n  }, [props.value, nativeSelectValue, options, filterFn]);\n  React.useEffect(function syncIsControlledState() {\n    setIsControlledOutside(oldIsControlled => {\n      const newIsControlled = props.value !== undefined;\n      checkMixControlledAndUncontrolledState(oldIsControlled, newIsControlled);\n      return newIsControlled;\n    });\n  }, [props.value]);\n  React.useEffect(function syncNativeSelectValueWithPropValue() {\n    if (props.value !== undefined) {\n      setNativeSelectValue(remapFromSelectValueToNativeValue(props.value));\n    }\n  }, [props.value, setNativeSelectValue]);\n  useIsomorphicLayoutEffect(() => {\n    if (options.some(_ref2 => {\n      let {\n        value\n      } = _ref2;\n      return nativeSelectValue === value;\n    }) || allowClearButton && nativeSelectValue === NOT_SELECTED.NATIVE) {\n      var _selectElRef_current;\n      const event = new Event('change', {\n        bubbles: true\n      });\n      (_selectElRef_current = selectElRef.current) === null || _selectElRef_current === void 0 ? void 0 : _selectElRef_current.dispatchEvent(event);\n    }\n  }, [nativeSelectValue]);\n  const selected = React.useMemo(() => {\n    if (!options.length) {\n      return null;\n    }\n    return selectedOptionIndex !== undefined ? options[selectedOptionIndex] : undefined;\n  }, [options, selectedOptionIndex]);\n  const openedClassNames = React.useMemo(() => opened && dropdownOffsetDistance === 0 && (popperPlacement.includes('top') ? \"vkuiCustomSelect__popUp\" : \"vkuiCustomSelect__popDown\") || undefined, [dropdownOffsetDistance, opened, popperPlacement]);\n  const scrollToElement = React.useCallback(function (index) {\n    let center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const dropdown = scrollBoxRef.current;\n    const optionsWrapper = optionsWrapperRef.current;\n    const item = dropdown && optionsWrapper ? optionsWrapper.children[index] : null;\n    if (!item || !dropdown) {\n      return;\n    }\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  }, []);\n  const focusOptionByIndex = React.useCallback(function (index) {\n    let scrollTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var _options_length;\n    if (index === undefined || index < 0 || index > ((_options_length = options.length) !== null && _options_length !== void 0 ? _options_length : 0) - 1) {\n      return;\n    }\n    const option = options[index];\n    if (option === null || option === void 0 ? void 0 : option.disabled) {\n      return;\n    }\n    if (scrollTo) {\n      scrollToElement(index);\n    }\n    setFocusedOptionIndex(index);\n  }, [options, scrollToElement]);\n  const isValidIndex = React.useCallback(index => {\n    var _options_length;\n    return index >= 0 && index < ((_options_length = options.length) !== null && _options_length !== void 0 ? _options_length : 0);\n  }, [options.length]);\n  useIsomorphicLayoutEffect(() => {\n    if (!opened) {\n      scrollPerformedRef.current = false;\n      return;\n    }\n    if (scrollPerformedRef.current) {\n      return;\n    }\n    const isIndexValid = selectedOptionIndex !== undefined && isValidIndex(selectedOptionIndex);\n    if (scrollBoxRef.current && isIndexValid) {\n      scrollPerformedRef.current = true;\n      scrollToElement(selectedOptionIndex, true);\n    }\n  }, [opened, selectedOptionIndex, scrollToElement, isValidIndex]);\n  const [keyboardInput, setKeyboardInput] = React.useState('');\n  const resetKeyboardInput = React.useCallback(() => {\n    setKeyboardInput('');\n  }, []);\n  const resetFocusedOption = React.useCallback(() => {\n    setFocusedOptionIndex(-1);\n  }, []);\n  const onKeyboardInput = React.useCallback(key => {\n    if (!opened) {\n      setOpened(true);\n    }\n    resetFocusedOption();\n    const fullInput = keyboardInput + key;\n    setKeyboardInput(fullInput);\n  }, [keyboardInput, opened, resetFocusedOption]);\n  const close = React.useCallback(() => {\n    resetKeyboardInput();\n    setInputValue('');\n    setOpened(false);\n    resetFocusedOption();\n    onClose === null || onClose === void 0 ? void 0 : onClose();\n  }, [onClose, resetKeyboardInput, resetFocusedOption]);\n  const selectOption = React.useCallback(index => {\n    const item = options[index];\n    var _item_value;\n    setNativeSelectValue((_item_value = item === null || item === void 0 ? void 0 : item.value) !== null && _item_value !== void 0 ? _item_value : NOT_SELECTED.NATIVE);\n    close();\n    const shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync = isControlledOutside && props.value !== nativeSelectValue && nativeSelectValue === (item === null || item === void 0 ? void 0 : item.value);\n    if (shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync) {\n      var _selectElRef_current;\n      const event = new Event('change', {\n        bubbles: true\n      });\n      (_selectElRef_current = selectElRef.current) === null || _selectElRef_current === void 0 ? void 0 : _selectElRef_current.dispatchEvent(event);\n    }\n  }, [close, options, selectElRef, isControlledOutside, props.value, nativeSelectValue, setNativeSelectValue]);\n  const selectFocused = React.useCallback(() => {\n    if (focusedOptionIndex === undefined || !isValidIndex(focusedOptionIndex)) {\n      return;\n    }\n    selectOption(focusedOptionIndex);\n  }, [focusedOptionIndex, isValidIndex, selectOption]);\n  const open = React.useCallback(() => {\n    setOpened(true);\n    setFocusedOptionIndex(selectedOptionIndex);\n    if (typeof onOpen === 'function') {\n      onOpen();\n    }\n  }, [onOpen, selectedOptionIndex]);\n  const onBlur = React.useCallback(() => {\n    var _selectElRef_current;\n    close();\n    const event = new Event('focusout', {\n      bubbles: true\n    });\n    (_selectElRef_current = selectElRef.current) === null || _selectElRef_current === void 0 ? void 0 : _selectElRef_current.dispatchEvent(event);\n  }, [close, selectElRef]);\n  const onFocus = React.useCallback(() => {\n    var _selectElRef_current;\n    const event = new Event('focusin', {\n      bubbles: true\n    });\n    (_selectElRef_current = selectElRef.current) === null || _selectElRef_current === void 0 ? void 0 : _selectElRef_current.dispatchEvent(event);\n  }, [selectElRef]);\n  const onClick = React.useCallback(() => {\n    if (opened) {\n      close();\n    } else {\n      open();\n    }\n  }, [close, open, opened]);\n  const handleKeyUp = React.useMemo(() => debounce(resetKeyboardInput, 1000), [resetKeyboardInput]);\n  const focusOption = React.useCallback(type => {\n    let index = focusedOptionIndex;\n    if (type === 'next') {\n      const nextIndex = findIndexAfter(options, index);\n      index = nextIndex === -1 ? findIndexAfter(options) : nextIndex; // Следующий за index или первый валидный до index\n    } else if (type === 'prev') {\n      const beforeIndex = findIndexBefore(options, index);\n      index = beforeIndex === -1 ? findIndexBefore(options) : beforeIndex; // Предшествующий index или последний валидный после index\n    }\n    focusOptionByIndex(index);\n  }, [focusOptionByIndex, focusedOptionIndex, options]);\n  const onNativeSelectChange = e => {\n    // для ситуаций, когда в опциях value это string а value/defaultValue это number\n    // и наоборот, приводим значение nativeSelectValue из стейта к строке.\n    // ведь nativeSelect всегда возвращает string в onChange, а пользователь\n    // может использовать number для опций\n    //\n    // native select всегда возвращает string в качестве value в onChange\n    // Когда селект контролируемый, то пользователь, в onChange может сохранить в свой стейт строку (например '3'), хотя\n    // в качестве value опции может использовать число (3),\n    // тогда строчное значение value ('3') из стейта пользователя\n    // будет передано в CustomSelect, и после синхронизации nativeSelectValue (3) и props.value ('3') и после клика на уже выбранную опцию (3),\n    // когда nativeSelectValue обновится на значение опции (число 3),\n    // сравнение nativeSelectValue (3) и prevNativeSelectValue ('3') может не сработать лишь из-за того, что они в разных типах.\n    const convertedNativeSelectValue = typeof nativeSelectValue === 'number' && (typeof props.value === 'string' || typeof prevNativeSelectValue === 'string') ? String(nativeSelectValue) : nativeSelectValue;\n    const isCalledWithSameControlledOptionValue = isControlledOutside && props.value === remapFromNativeValueToSelectValue(convertedNativeSelectValue);\n    const isNativeValueChanged = convertedNativeSelectValue !== prevNativeSelectValue && prevNativeSelectValue !== undefined;\n    const isTriggeredByClearButton = allowClearButton && nativeSelectValue === NOT_SELECTED.NATIVE;\n    const shouldCallOnChange = !isCalledWithSameControlledOptionValue && (isNativeValueChanged || isTriggeredByClearButton);\n    if (!shouldCallOnChange) {\n      return;\n    }\n    const remappedNativeValue = remapFromNativeValueToSelectValue(e.currentTarget.value);\n    if (e.target.value === NOT_SELECTED.NATIVE) {\n      e.target.value = '';\n    }\n    if (e.currentTarget.value === NOT_SELECTED.NATIVE) {\n      e.currentTarget.value = '';\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(e, remappedNativeValue);\n  };\n  const onInputChange = React.useCallback(e => {\n    onInputChangeProp && onInputChangeProp(e);\n    setInputValue(e.target.value);\n  }, [onInputChangeProp]);\n  const areOptionsShown = React.useCallback(() => {\n    return scrollBoxRef.current !== null;\n  }, []);\n  const handleKeyDownSelect = React.useCallback(event => {\n    if (event.key.length === 1 && event.key !== ' ') {\n      onKeyboardInput(event.key);\n      return;\n    }\n    ['ArrowUp', 'ArrowDown', 'Escape', 'Enter'].includes(event.key) && areOptionsShown() && event.preventDefault();\n    switch (event.key) {\n      case 'ArrowUp':\n        if (opened) {\n          areOptionsShown() && focusOption('prev');\n        } else {\n          open();\n        }\n        break;\n      case 'ArrowDown':\n        if (opened) {\n          areOptionsShown() && focusOption('next');\n        } else {\n          open();\n        }\n        break;\n      case 'Escape':\n        close();\n        break;\n      case 'Backspace':\n      case 'Delete':\n        {\n          if (!opened) {\n            setOpened(true);\n          }\n          resetFocusedOption();\n          break;\n        }\n      case 'Enter':\n      case 'Spacebar':\n      case ' ':\n        if (opened) {\n          areOptionsShown() && selectFocused();\n        } else {\n          open();\n        }\n        break;\n    }\n  }, [areOptionsShown, close, focusOption, onKeyboardInput, open, opened, selectFocused, resetFocusedOption]);\n  const handleOptionClick = React.useCallback(e => {\n    var _e_currentTarget_parentNode;\n    const index = Array.prototype.indexOf.call((_e_currentTarget_parentNode = e.currentTarget.parentNode) === null || _e_currentTarget_parentNode === void 0 ? void 0 : _e_currentTarget_parentNode.children, e.currentTarget);\n    const option = options[index];\n    if (option && !option.disabled) {\n      selectOption(index);\n    }\n  }, [options, selectOption]);\n  const lastMousePositionRef = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const focusOptionOnMouseMove = React.useCallback((e, index) => {\n    if (isMousePositionChanged(e, lastMousePositionRef.current)) {\n      focusOptionByIndex(index, false);\n    }\n  }, [focusOptionByIndex]);\n  const popupAriaId = React.useId();\n  const renderOption = React.useCallback((option, index) => {\n    const hovered = index === focusedOptionIndex;\n    const selected = index === selectedOptionIndex;\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: renderOptionProp({\n        option,\n        hovered,\n        children: option.label,\n        selected,\n        disabled: option.disabled,\n        onClick: handleOptionClick,\n        onMouseDown: handleOptionDown,\n        // Используем `onMouseMove` вместо `onMouseEnter/onMouseOver`.\n        // Потому что если при навигации с клавиатуры курсор наведён на\n        // список, то при первом автоматическом скролле списка вызывается событие MouseOver/MouseEnter\n        // обработчик которого фокусирует опцию под курсором, хотя при навигация с клавиатуры пользователь мог уйти дальше по списку, это путает.\n        // Причём координаты события меняются на пару пикселей по сравнению с прошлым вызовом,\n        // а значит нельзя на них опираться, чтобы запретить обработку такого события.\n        // C mousemove такой проблемы нет, что позволяет реализовать поведение при наведении с клавиатуры и при наведении мышью идентично `<select>`.\n        onMouseMove: e => focusOptionOnMouseMove(e, index),\n        id: `${popupAriaId}-${option.value}`\n      })\n    }, `${typeof option.value}-${option.value}`);\n  }, [focusedOptionIndex, handleOptionClick, focusOptionOnMouseMove, renderOptionProp, selectedOptionIndex, popupAriaId]);\n  const resolvedContent = React.useMemo(() => {\n    const defaultDropdownContent = options.length > 0 ? /*#__PURE__*/_jsx(\"div\", {\n      ref: optionsWrapperRef,\n      children: options.map(renderOption)\n    }) : /*#__PURE__*/_jsx(Footnote, {\n      className: \"vkuiCustomSelect__empty\",\n      children: emptyText\n    });\n    if (typeof renderDropdown === 'function') {\n      return renderDropdown({\n        defaultDropdownContent\n      });\n    } else {\n      return defaultDropdownContent;\n    }\n  }, [emptyText, options, renderDropdown, renderOption]);\n  const selectInputRef = useExternRef(getSelectInputRef);\n  const controlledValueSet = isControlledOutside && props.value !== NOT_SELECTED.CUSTOM;\n  const uncontrolledValueSet = !isControlledOutside && nativeSelectValue !== NOT_SELECTED.NATIVE;\n  const clearButtonShown = allowClearButton && !opened && (controlledValueSet || uncontrolledValueSet);\n  const clearButton = React.useMemo(() => {\n    if (!clearButtonShown) {\n      return null;\n    }\n    return /*#__PURE__*/_jsx(ClearButton, {\n      className: iconProp === undefined ? \"vkuiCustomSelect__clearIcon\" : undefined,\n      onClick: function clearSelectState() {\n        setNativeSelectValue(NOT_SELECTED.NATIVE);\n        setInputValue('');\n        selectInputRef.current && selectInputRef.current.focus();\n      },\n      disabled: restProps.disabled,\n      \"data-testid\": clearButtonTestId\n    });\n  }, [clearButtonShown, ClearButton, iconProp, restProps.disabled, clearButtonTestId, setNativeSelectValue, selectInputRef]);\n  const icon = React.useMemo(() => {\n    if (iconProp !== undefined) {\n      return iconProp;\n    }\n    return /*#__PURE__*/_jsx(DropdownIcon, {\n      className: clearButtonShown ? \"vkuiCustomSelect__dropdownIcon\" : undefined,\n      opened: opened\n    });\n  }, [clearButtonShown, iconProp, opened]);\n  const afterIcons = (icon || clearButtonShown) && /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [clearButton, icon]\n  });\n  const {\n    document\n  } = useDOM();\n  const passClickAndFocusToInputOnClick = React.useCallback(e => {\n    // Раньше внешней оберткой CustomSelect был <label>, что позволяло по клику в любую область CustomSelect,\n    // даже где нету интерактивного элемента, фокусировать <input> и передавать на него событие клика.\n    // Так как мы больше не оборачиваем CustomSelect в <label>, то для обертки CustomSelect мы симулируем работу <label>.\n    // передаем фокус и клик по <input>, если пользователь кликнул в зоне обертки.\n    // В <label> мы не больше не оборачиваем, потому что это заставляет скринридер\n    // дважды произносить текст выбранной опции при фокусе, если CustomSelect связан с внешним <label>.\n    // Воспроизводится в некоторых версиях Chrome, при навигации по странице с помощью стрелок.\n    // Договорились со специалистом по доступности убрать <label>-обёртки из Select и CustomSelect\n    if (!selectInputRef.current || !document) {\n      return;\n    }\n    const clickTargetIsNotAnInput = e.target !== selectInputRef.current;\n    if (clickTargetIsNotAnInput) {\n      selectInputRef.current.click();\n      const inputIsNotFocused = document.activeElement !== selectInputRef.current;\n      if (inputIsNotFocused) {\n        selectInputRef.current.focus();\n      }\n    }\n  }, [document, selectInputRef]);\n  const preventInputBlurWhenClickInsideFocusedSelectArea = e => {\n    // Так как инпут больше не оборачивается пустым лэйблом, то клик внутри обертки,\n    // но вне инпута (например по иконке дропдауна), будет убирать фокус с инпута.\n    // Чтобы в такой ситуации отключить blur инпута мы превентим mousedown событие обёртки\n    const isInputFocused = document && document.activeElement === selectInputRef.current;\n    if (isInputFocused) {\n      e.preventDefault();\n    }\n  };\n  const ariaActiveDescendantOptionIndex = focusedOptionIndex !== -1 ? focusedOptionIndex : undefined;\n  const ariaActiveDescendantId = ariaActiveDescendantOptionIndex !== undefined ? options[ariaActiveDescendantOptionIndex] && options[ariaActiveDescendantOptionIndex].value : null;\n  const selectInputAriaProps = {\n    'role': 'combobox',\n    'aria-controls': popupAriaId,\n    'aria-owns': popupAriaId,\n    'aria-expanded': opened,\n    'aria-activedescendant': ariaActiveDescendantId && opened ? `${popupAriaId}-${ariaActiveDescendantId}` : undefined,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-haspopup': 'listbox',\n    'aria-autocomplete': 'none'\n  };\n  const focusWithin = useFocusWithin(handleRootRef);\n  const resetOptionFocusOnMouseLeave = React.useCallback(event => {\n    // В Хроме eсли мышка пользователя находится над инпутом селекта,\n    // и он с клавиатуры открывает опции, причём одна из опций\n    // уже выбрана, то видно, как выбранная опция получает фокус,\n    // но потом сразу же его теряет.\n    // Связано это с тем, что в этот момент вызывается onMouseLeave, на который у нас\n    // завязан сброс состония фокуса у опции. По хорошему фокус должен оставаться.\n    // Нам не интересен вызов onMouseLeave если мышка при этом не двигалась.\n    if (isMousePositionChanged(event, lastMousePositionRef.current)) {\n      resetFocusedOption();\n    }\n  }, [resetFocusedOption]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classNames(\"vkuiCustomSelect__host\", sizeY !== 'regular' && sizeYClassNames[sizeY], className),\n    style: style,\n    ref: handleRootRef,\n    onClick: passClickAndFocusToInputOnClick,\n    onMouseDown: preventInputBlurWhenClickInsideFocusedSelectArea,\n    onMouseMove: function updateLastMousePosition(e) {\n      lastMousePositionRef.current = {\n        x: e.clientX,\n        y: e.clientY\n      };\n    },\n    children: [focusWithin && selected && !opened && /*#__PURE__*/_jsx(VisuallyHidden, {\n      \"aria-live\": \"polite\",\n      children: selected.label\n    }), /*#__PURE__*/_jsx(CustomSelectInput, _object_spread_props(_object_spread({\n      autoComplete: \"off\",\n      autoCapitalize: \"none\",\n      autoCorrect: \"off\",\n      spellCheck: \"false\"\n    }, restProps, selectInputAriaProps), {\n      getRef: selectInputRef,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      className: openedClassNames,\n      readOnly: !searchable,\n      fetching: fetching,\n      value: inputValue,\n      onKeyUp: handleKeyUp,\n      onKeyDown: callMultiple(handleKeyDownSelect, onInputKeyDown),\n      onChange: onInputChange,\n      onClick: onClick,\n      before: before,\n      after: afterIcons,\n      selectType: selectType,\n      children: selected === null || selected === void 0 ? void 0 : selected.label\n    })), /*#__PURE__*/_jsxs(\"select\", {\n      ref: selectElRef,\n      name: name,\n      onChange: onNativeSelectChange,\n      onBlur: props.onBlur,\n      onFocus: props.onFocus,\n      onClick: props.onClick,\n      value: nativeSelectValue,\n      \"aria-hidden\": true,\n      className: \"vkuiCustomSelect__control\",\n      \"data-testid\": nativeSelectTestId,\n      required: required,\n      children: [(allowClearButton || nativeSelectValue === NOT_SELECTED.NATIVE) && /*#__PURE__*/_jsx(\"option\", {\n        value: NOT_SELECTED.NATIVE\n      }, NOT_SELECTED.NATIVE), optionsProp.map(item => /*#__PURE__*/_jsx(\"option\", {\n        value: item.value\n      }, `${item.value}`))]\n    }), opened && /*#__PURE__*/_jsx(CustomSelectDropdown, {\n      targetRef: containerRef,\n      placement: popperPlacement,\n      scrollBoxRef: scrollBoxRef,\n      onPlacementChange: setPopperPlacement,\n      onMouseLeave: resetOptionFocusOnMouseLeave,\n      fetching: fetching,\n      overscrollBehavior: overscrollBehavior,\n      offsetDistance: dropdownOffsetDistance,\n      autoWidth: dropdownAutoWidth,\n      forcePortal: forceDropdownPortal,\n      noMaxHeight: noMaxHeight,\n      role: \"listbox\",\n      id: popupAriaId,\n      \"aria-labelledby\": ariaLabelledBy,\n      tabIndex: -1,\n      children: resolvedContent\n    })]\n  });\n}","map":{"version":3,"names":["React","classNames","debounce","useAdaptivity","useExternRef","useFocusWithin","useStateWithPrev","callMultiple","useDOM","defaultFilterFn","useIsomorphicLayoutEffect","warnOnce","CustomSelectDropdown","CustomSelectOption","DropdownIcon","NOT_SELECTED","remapFromNativeValueToSelectValue","remapFromSelectValueToNativeValue","Footnote","VisuallyHidden","CustomSelectClearButton","CustomSelectInput","sizeYClassNames","none","compact","findIndexAfter","options","arguments","length","undefined","startIndex","findIndex","option","i","disabled","findIndexBefore","endIndex","result","warn","checkOptionsValueType","Set","map","item","value","size","checkMixControlledAndUncontrolledState","oldIsControlled","newIsControlled","defaultRenderOptionFn","_param","props","_object_without_properties","_jsx","_object_spread","handleOptionDown","e","preventDefault","findSelectedIndex","CUSTOM","_options_findIndex","Number","filter","inputValue","filterFn","isMousePositionChanged","event","prevPosition","Math","abs","x","clientX","y","clientY","CustomSelect","opened","setOpened","useState","before","name","className","getRef","getRootRef","popupDirection","style","onChange","children","onInputChangeProp","renderDropdown","onOpen","onClose","fetching","forceDropdownPortal","selectType","searchable","renderOptionProp","optionsProp","emptyText","iconProp","ClearButton","allowClearButton","dropdownOffsetDistance","dropdownAutoWidth","noMaxHeight","ariaLabelledBy","clearButtonTestId","nativeSelectTestId","defaultValue","required","getSelectInputRef","overscrollBehavior","onInputKeyDown","restProps","process","env","NODE_ENV","sizeY","containerRef","useRef","handleRootRef","scrollBoxRef","selectElRef","optionsWrapperRef","scrollPerformedRef","focusedOptionIndex","setFocusedOptionIndex","isControlledOutside","setIsControlledOutside","setInputValue","nativeSelectValue","prevNativeSelectValue","setNativeSelectValue","NATIVE","popperPlacement","setPopperPlacement","useMemo","_props_value","_ref","selectedOptionIndex","setSelectedOptionIndex","useEffect","updateOptionsIndexes","selectedIndex","syncIsControlledState","syncNativeSelectValueWithPropValue","some","_ref2","_selectElRef_current","Event","bubbles","current","dispatchEvent","selected","openedClassNames","includes","scrollToElement","useCallback","index","center","dropdown","optionsWrapper","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","scrollTo","_options_length","isValidIndex","isIndexValid","keyboardInput","setKeyboardInput","resetKeyboardInput","resetFocusedOption","onKeyboardInput","key","fullInput","close","selectOption","_item_value","shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync","selectFocused","open","onBlur","onFocus","onClick","handleKeyUp","focusOption","type","nextIndex","beforeIndex","onNativeSelectChange","convertedNativeSelectValue","String","isCalledWithSameControlledOptionValue","isNativeValueChanged","isTriggeredByClearButton","shouldCallOnChange","remappedNativeValue","currentTarget","target","onInputChange","areOptionsShown","handleKeyDownSelect","handleOptionClick","_e_currentTarget_parentNode","Array","prototype","indexOf","call","parentNode","lastMousePositionRef","focusOptionOnMouseMove","popupAriaId","useId","renderOption","hovered","Fragment","label","onMouseDown","onMouseMove","id","resolvedContent","defaultDropdownContent","ref","selectInputRef","controlledValueSet","uncontrolledValueSet","clearButtonShown","clearButton","clearSelectState","focus","icon","afterIcons","_jsxs","document","passClickAndFocusToInputOnClick","clickTargetIsNotAnInput","click","inputIsNotFocused","activeElement","preventInputBlurWhenClickInsideFocusedSelectArea","isInputFocused","ariaActiveDescendantOptionIndex","ariaActiveDescendantId","selectInputAriaProps","focusWithin","resetOptionFocusOnMouseLeave","updateLastMousePosition","_object_spread_props","autoComplete","autoCapitalize","autoCorrect","spellCheck","readOnly","onKeyUp","onKeyDown","after","targetRef","placement","onPlacementChange","onMouseLeave","offsetDistance","autoWidth","forcePortal","role","tabIndex"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/CustomSelect/CustomSelect.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames, debounce } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useFocusWithin } from '../../hooks/useFocusWithin';\nimport { useStateWithPrev } from '../../hooks/useStateWithPrev';\nimport { callMultiple } from '../../lib/callMultiple';\nimport { useDOM } from '../../lib/dom';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn, type FilterFn } from '../../lib/select';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { warnOnce } from '../../lib/warnOnce';\nimport {\n  CustomSelectDropdown,\n  type CustomSelectDropdownProps,\n} from '../CustomSelectDropdown/CustomSelectDropdown';\nimport {\n  CustomSelectOption,\n  type CustomSelectOptionProps,\n} from '../CustomSelectOption/CustomSelectOption';\nimport { DropdownIcon } from '../DropdownIcon/DropdownIcon';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport {\n  NOT_SELECTED,\n  remapFromNativeValueToSelectValue,\n  remapFromSelectValueToNativeValue,\n} from '../NativeSelect/NativeSelect';\nimport type {\n  NativeSelectProps,\n  NativeSelectValue,\n  SelectValue,\n} from '../NativeSelect/NativeSelect';\nimport type { SelectType } from '../Select/Select';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden';\nimport {\n  CustomSelectClearButton,\n  type CustomSelectClearButtonProps,\n} from './CustomSelectClearButton';\nimport {\n  CustomSelectInput,\n  type CustomSelectInputProps,\n} from './CustomSelectInput/CustomSelectInput';\nimport styles from './CustomSelect.module.css';\n\nconst sizeYClassNames = {\n  none: styles.sizeYNone,\n  compact: styles.sizeYCompact,\n};\n\nconst findIndexAfter = (options: CustomSelectOptionInterface[] = [], startIndex = -1) => {\n  if (startIndex >= options.length - 1) {\n    return -1;\n  }\n  return options.findIndex((option, i) => i > startIndex && !option.disabled);\n};\n\nconst findIndexBefore = (\n  options: CustomSelectOptionInterface[] = [],\n  endIndex: number = options.length,\n) => {\n  let result = -1;\n  if (endIndex <= 0) {\n    return result;\n  }\n  for (let i = endIndex - 1; i >= 0; i--) {\n    let option = options[i];\n\n    if (!option.disabled) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nconst warn = warnOnce('CustomSelect');\n\nconst checkOptionsValueType = <T extends CustomSelectOptionInterface>(options: T[]) => {\n  if (new Set(options.map((item) => typeof item.value)).size > 1) {\n    warn(\n      'Некоторые значения ваших опций имеют разные типы. onChange всегда возвращает строковый тип.',\n      'error',\n    );\n  }\n};\n\nconst checkMixControlledAndUncontrolledState = (\n  oldIsControlled: boolean,\n  newIsControlled: boolean,\n) => {\n  if (!oldIsControlled && newIsControlled) {\n    warn(\n      `Похоже, что компонент был переведен из состояния Uncontrolled в Controlled. Пожалуйста, не делайте так. Если вам нужно отобразить невыбранное состояние компонента, используйте value=null вместо undefined`,\n      'error',\n    );\n  }\n  if (oldIsControlled && !newIsControlled) {\n    warn(\n      `Похоже, что компонент был переведен из состояния Controlled в Uncontrolled. Пожалуйста, не делайте так. Если вам нужно отобразить невыбранное состояние компонента, используйте value=null вместо undefined`,\n      'error',\n    );\n  }\n};\n\nfunction defaultRenderOptionFn<T extends CustomSelectOptionInterface>({\n  option,\n  ...props\n}: CustomSelectRenderOption<T>): React.ReactNode {\n  return <CustomSelectOption {...props} />;\n}\n\nconst handleOptionDown: MouseEventHandler = (e: React.MouseEvent<HTMLElement>) => {\n  e.preventDefault();\n};\n\nfunction findSelectedIndex<T extends CustomSelectOptionInterface>(\n  options: T[] = [],\n  value: SelectValue,\n) {\n  if (value === NOT_SELECTED.CUSTOM) {\n    return -1;\n  }\n  return (\n    options.findIndex((item) => {\n      value = typeof item.value === 'number' ? Number(value) : value;\n      return item.value === value;\n    }) ?? -1\n  );\n}\n\nconst filter = <T extends CustomSelectOptionInterface>(\n  options: SelectProps<T>['options'],\n  inputValue: string,\n  filterFn: SelectProps<T>['filterFn'],\n) => {\n  return typeof filterFn === 'function'\n    ? options.filter((option) => filterFn(inputValue, option))\n    : options;\n};\n\ntype MousePosition = {\n  x: React.MouseEvent['clientX'];\n  y: React.MouseEvent['clientY'];\n};\nfunction isMousePositionChanged(event: React.MouseEvent, prevPosition: MousePosition) {\n  return (\n    Math.abs(prevPosition.x - event.clientX) >= 1 || Math.abs(prevPosition.y - event.clientY) >= 1\n  );\n}\n\nexport interface CustomSelectOptionInterface {\n  value: Exclude<SelectValue, null>;\n  label: React.ReactElement | string;\n  disabled?: boolean;\n  [index: string]: any;\n}\n\nexport interface CustomSelectRenderOption<T extends CustomSelectOptionInterface>\n  extends CustomSelectOptionProps {\n  option: T;\n}\n\nexport type { CustomSelectClearButtonProps };\n\nexport interface SelectProps<\n  OptionInterfaceT extends CustomSelectOptionInterface = CustomSelectOptionInterface,\n> extends NativeSelectProps,\n    Omit<FormFieldProps, 'maxHeight'>,\n    Pick<CustomSelectDropdownProps, 'overscrollBehavior'>,\n    Pick<CustomSelectInputProps, 'minLength' | 'maxLength' | 'pattern' | 'readOnly'> {\n  /**\n   * ref на внутрений компонент input\n   */\n  getSelectInputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Если `true`, то при клике на `CustomSelect` в нём появится текстовое поле для поиска по `options`. По умолчанию поиск\n   * производится по `option.label`.\n   */\n  searchable?: boolean;\n  /**\n   * Текст, который будет отображен, если приходит пустой `options`.\n   */\n  emptyText?: string;\n  /**\n   * Событие изменения текстового поля\n   */\n  onInputChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  options: OptionInterfaceT[];\n  /**\n   * Функция для кастомной фильтрации. По умолчанию поиск производится по `option.label`.\n   */\n  filterFn?: false | FilterFn<OptionInterfaceT>;\n  popupDirection?: 'top' | 'bottom';\n  /**\n   * Рендер-проп для кастомного рендера опции.\n   * В объекте аргумента приходят [свойства опции](https://vkcom.github.io/VKUI/#/CustomSelectOption?id=props)\n   *\n   * > ⚠️  Важно: cвойство опции `disabled` должно выставляться только через проп `options`.\n   * > Запрещается выставлять `disabled` проп опциям в обход `options`, иначе `CustomSelect` не будет знать об актуальном состоянии\n   * опции.\n   */\n  renderOption?: (props: CustomSelectRenderOption<OptionInterfaceT>) => React.ReactNode;\n  /**\n   * Рендер-проп для кастомного рендера содержимого дропдауна.\n   * В `defaultDropdownContent` содержится список опций в виде скроллящегося блока.\n   */\n  renderDropdown?: ({\n    defaultDropdownContent,\n  }: {\n    defaultDropdownContent: React.ReactNode;\n  }) => React.ReactNode;\n  /**\n   * Если `true`, то в дропдауне вместо списка опций рисуется спиннер. При переданных `renderDropdown` и `fetching: true`\n   * \"победит\" `renderDropdown`.\n   */\n  fetching?: boolean;\n  onClose?: VoidFunction;\n  onOpen?: VoidFunction;\n  /**\n   * Иконка раскрывающегося списка\n   */\n  icon?: React.ReactNode;\n  /**\n   * Кастомная кнопка для очистки значения.\n   * Должна принимать обязательное свойство `onClick`\n   */\n  ClearButton?: React.ComponentType<CustomSelectClearButtonProps>;\n  /**\n   * Если `true`, то справа будет отображаться кнопка для очистки значения\n   */\n  allowClearButton?: boolean;\n  /**\n   * Передает атрибут `data-testid` для кнопки очистки\n   */\n  clearButtonTestId?: string;\n  /**\n   * Отступ от выпадающего списка\n   */\n  dropdownOffsetDistance?: number;\n  /**\n   * Ширина раскрывающегося списка зависит от контента\n   */\n  dropdownAutoWidth?: boolean;\n  forceDropdownPortal?: boolean;\n  selectType?: SelectType;\n  /**\n   * Отключает максимальную высоту по умолчанию\n   */\n  noMaxHeight?: boolean;\n  /**\n   * Передает атрибут `data-testid` для элемента, внутри которого отображается текст выбранной опции `CustomSelect` или плейсхолдер.\n   */\n  labelTextTestId?: string;\n  /**\n   * Передает атрибут `data-testid` для нативного элемента `select`.\n   */\n  nativeSelectTestId?: string;\n  onInputKeyDown?: (e: React.KeyboardEvent) => void;\n}\n\ntype MouseEventHandler = (event: React.MouseEvent<HTMLElement>) => void;\n\n/**\n * @see https://vkcom.github.io/VKUI/#/CustomSelect\n */\nexport function CustomSelect<OptionInterfaceT extends CustomSelectOptionInterface>(\n  props: SelectProps<OptionInterfaceT>,\n): React.ReactNode {\n  const [opened, setOpened] = React.useState(false);\n  const {\n    before,\n    name,\n    className,\n    getRef,\n    getRootRef,\n    popupDirection = 'bottom',\n    style,\n    onChange,\n    children,\n    'onInputChange': onInputChangeProp,\n    renderDropdown,\n    onOpen,\n    onClose,\n    fetching,\n    forceDropdownPortal,\n    selectType = 'default',\n    searchable = false,\n    'renderOption': renderOptionProp = defaultRenderOptionFn,\n    'options': optionsProp,\n    emptyText = 'Ничего не найдено',\n    filterFn = defaultFilterFn,\n    'icon': iconProp,\n    ClearButton = CustomSelectClearButton,\n    allowClearButton = false,\n    dropdownOffsetDistance = 0,\n    dropdownAutoWidth = false,\n    noMaxHeight = false,\n    'aria-labelledby': ariaLabelledBy,\n    clearButtonTestId,\n    nativeSelectTestId,\n    defaultValue,\n    required,\n    getSelectInputRef,\n    overscrollBehavior,\n    onInputKeyDown,\n    ...restProps\n  } = props;\n\n  if (process.env.NODE_ENV === 'development') {\n    checkOptionsValueType(optionsProp);\n  }\n\n  const { sizeY = 'none' } = useAdaptivity();\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const handleRootRef = useExternRef(containerRef, getRootRef);\n  const scrollBoxRef = React.useRef<HTMLDivElement | null>(null);\n  const selectElRef = useExternRef(getRef);\n  const optionsWrapperRef = React.useRef<HTMLDivElement>(null);\n  const scrollPerformedRef = React.useRef(false);\n\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | undefined>(-1);\n  const [isControlledOutside, setIsControlledOutside] = React.useState(props.value !== undefined);\n  const [inputValue, setInputValue] = React.useState('');\n  const [[nativeSelectValue, prevNativeSelectValue], setNativeSelectValue] =\n    useStateWithPrev<NativeSelectValue>(() => {\n      if (props.value !== undefined) {\n        return remapFromSelectValueToNativeValue(props.value);\n      }\n      if (defaultValue !== undefined) {\n        return remapFromSelectValueToNativeValue(defaultValue);\n      }\n      return NOT_SELECTED.NATIVE;\n    });\n\n  const [popperPlacement, setPopperPlacement] = React.useState<Placement>(popupDirection);\n\n  const options = React.useMemo(() => {\n    return filter(optionsProp, inputValue, filterFn);\n  }, [filterFn, inputValue, optionsProp]);\n\n  const [selectedOptionIndex, setSelectedOptionIndex] = React.useState<number | undefined>(\n    findSelectedIndex(options, props.value ?? defaultValue ?? null),\n  );\n\n  React.useEffect(\n    function updateOptionsIndexes() {\n      const value =\n        props.value !== undefined\n          ? props.value\n          : remapFromNativeValueToSelectValue(nativeSelectValue);\n\n      const selectedIndex = findSelectedIndex(options, value);\n      setSelectedOptionIndex(selectedIndex);\n      setFocusedOptionIndex(selectedIndex);\n    },\n    [props.value, nativeSelectValue, options, filterFn],\n  );\n\n  React.useEffect(\n    function syncIsControlledState() {\n      setIsControlledOutside((oldIsControlled) => {\n        const newIsControlled = props.value !== undefined;\n        checkMixControlledAndUncontrolledState(oldIsControlled, newIsControlled);\n        return newIsControlled;\n      });\n    },\n    [props.value],\n  );\n\n  React.useEffect(\n    function syncNativeSelectValueWithPropValue() {\n      if (props.value !== undefined) {\n        setNativeSelectValue(remapFromSelectValueToNativeValue(props.value));\n      }\n    },\n    [props.value, setNativeSelectValue],\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (\n      options.some(({ value }) => nativeSelectValue === value) ||\n      (allowClearButton && nativeSelectValue === NOT_SELECTED.NATIVE)\n    ) {\n      const event = new Event('change', { bubbles: true });\n\n      selectElRef.current?.dispatchEvent(event);\n    }\n  }, [nativeSelectValue]);\n\n  const selected = React.useMemo(() => {\n    if (!options.length) {\n      return null;\n    }\n\n    return selectedOptionIndex !== undefined ? options[selectedOptionIndex] : undefined;\n  }, [options, selectedOptionIndex]);\n\n  const openedClassNames = React.useMemo(\n    () =>\n      (opened &&\n        dropdownOffsetDistance === 0 &&\n        (popperPlacement.includes('top') ? styles.popUp : styles.popDown)) ||\n      undefined,\n    [dropdownOffsetDistance, opened, popperPlacement],\n  );\n\n  const scrollToElement = React.useCallback((index: number, center = false) => {\n    const dropdown = scrollBoxRef.current;\n    const optionsWrapper = optionsWrapperRef.current;\n    const item =\n      dropdown && optionsWrapper ? (optionsWrapper.children[index] as HTMLElement) : null;\n\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  }, []);\n\n  const focusOptionByIndex = React.useCallback(\n    (index: number | undefined, scrollTo = true) => {\n      if (index === undefined || index < 0 || index > (options.length ?? 0) - 1) {\n        return;\n      }\n\n      const option = options[index];\n\n      if (option?.disabled) {\n        return;\n      }\n\n      if (scrollTo) {\n        scrollToElement(index);\n      }\n\n      setFocusedOptionIndex(index);\n    },\n    [options, scrollToElement],\n  );\n\n  const isValidIndex = React.useCallback(\n    (index: number) => {\n      return index >= 0 && index < (options.length ?? 0);\n    },\n    [options.length],\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (!opened) {\n      scrollPerformedRef.current = false;\n      return;\n    }\n\n    if (scrollPerformedRef.current) {\n      return;\n    }\n\n    const isIndexValid = selectedOptionIndex !== undefined && isValidIndex(selectedOptionIndex);\n\n    if (scrollBoxRef.current && isIndexValid) {\n      scrollPerformedRef.current = true;\n      scrollToElement(selectedOptionIndex, true);\n    }\n  }, [opened, selectedOptionIndex, scrollToElement, isValidIndex]);\n\n  const [keyboardInput, setKeyboardInput] = React.useState('');\n  const resetKeyboardInput = React.useCallback(() => {\n    setKeyboardInput('');\n  }, []);\n\n  const resetFocusedOption = React.useCallback(() => {\n    setFocusedOptionIndex(-1);\n  }, []);\n\n  const onKeyboardInput = React.useCallback(\n    (key: string) => {\n      if (!opened) {\n        setOpened(true);\n      }\n      resetFocusedOption();\n      const fullInput = keyboardInput + key;\n\n      setKeyboardInput(fullInput);\n    },\n    [keyboardInput, opened, resetFocusedOption],\n  );\n\n  const close = React.useCallback(() => {\n    resetKeyboardInput();\n\n    setInputValue('');\n    setOpened(false);\n    resetFocusedOption();\n    onClose?.();\n  }, [onClose, resetKeyboardInput, resetFocusedOption]);\n\n  const selectOption = React.useCallback(\n    (index: number) => {\n      const item = options[index];\n      setNativeSelectValue(item?.value ?? NOT_SELECTED.NATIVE);\n      close();\n\n      const shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync =\n        isControlledOutside &&\n        props.value !== nativeSelectValue &&\n        nativeSelectValue === item?.value;\n\n      if (shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync) {\n        const event = new Event('change', { bubbles: true });\n        selectElRef.current?.dispatchEvent(event);\n      }\n    },\n    [\n      close,\n      options,\n      selectElRef,\n      isControlledOutside,\n      props.value,\n      nativeSelectValue,\n      setNativeSelectValue,\n    ],\n  );\n\n  const selectFocused = React.useCallback(() => {\n    if (focusedOptionIndex === undefined || !isValidIndex(focusedOptionIndex)) {\n      return;\n    }\n\n    selectOption(focusedOptionIndex);\n  }, [focusedOptionIndex, isValidIndex, selectOption]);\n\n  const open = React.useCallback(() => {\n    setOpened(true);\n    setFocusedOptionIndex(selectedOptionIndex);\n\n    if (typeof onOpen === 'function') {\n      onOpen();\n    }\n  }, [onOpen, selectedOptionIndex]);\n\n  const onBlur = React.useCallback(() => {\n    close();\n    const event = new Event('focusout', { bubbles: true });\n    selectElRef.current?.dispatchEvent(event);\n  }, [close, selectElRef]);\n\n  const onFocus = React.useCallback(() => {\n    const event = new Event('focusin', { bubbles: true });\n    selectElRef.current?.dispatchEvent(event);\n  }, [selectElRef]);\n\n  const onClick = React.useCallback(() => {\n    if (opened) {\n      close();\n    } else {\n      open();\n    }\n  }, [close, open, opened]);\n\n  const handleKeyUp = React.useMemo(() => debounce(resetKeyboardInput, 1000), [resetKeyboardInput]);\n\n  const focusOption = React.useCallback(\n    (type: 'next' | 'prev') => {\n      let index = focusedOptionIndex;\n\n      if (type === 'next') {\n        const nextIndex = findIndexAfter(options, index);\n        index = nextIndex === -1 ? findIndexAfter(options) : nextIndex; // Следующий за index или первый валидный до index\n      } else if (type === 'prev') {\n        const beforeIndex = findIndexBefore(options, index);\n        index = beforeIndex === -1 ? findIndexBefore(options) : beforeIndex; // Предшествующий index или последний валидный после index\n      }\n\n      focusOptionByIndex(index);\n    },\n    [focusOptionByIndex, focusedOptionIndex, options],\n  );\n\n  const onNativeSelectChange: React.ChangeEventHandler<HTMLSelectElement> = (e) => {\n    // для ситуаций, когда в опциях value это string а value/defaultValue это number\n    // и наоборот, приводим значение nativeSelectValue из стейта к строке.\n    // ведь nativeSelect всегда возвращает string в onChange, а пользователь\n    // может использовать number для опций\n    //\n    // native select всегда возвращает string в качестве value в onChange\n    // Когда селект контролируемый, то пользователь, в onChange может сохранить в свой стейт строку (например '3'), хотя\n    // в качестве value опции может использовать число (3),\n    // тогда строчное значение value ('3') из стейта пользователя\n    // будет передано в CustomSelect, и после синхронизации nativeSelectValue (3) и props.value ('3') и после клика на уже выбранную опцию (3),\n    // когда nativeSelectValue обновится на значение опции (число 3),\n    // сравнение nativeSelectValue (3) и prevNativeSelectValue ('3') может не сработать лишь из-за того, что они в разных типах.\n    const convertedNativeSelectValue =\n      typeof nativeSelectValue === 'number' &&\n      (typeof props.value === 'string' || typeof prevNativeSelectValue === 'string')\n        ? String(nativeSelectValue)\n        : nativeSelectValue;\n\n    const isCalledWithSameControlledOptionValue =\n      isControlledOutside &&\n      props.value === remapFromNativeValueToSelectValue(convertedNativeSelectValue);\n\n    const isNativeValueChanged =\n      convertedNativeSelectValue !== prevNativeSelectValue && prevNativeSelectValue !== undefined;\n\n    const isTriggeredByClearButton = allowClearButton && nativeSelectValue === NOT_SELECTED.NATIVE;\n\n    const shouldCallOnChange =\n      !isCalledWithSameControlledOptionValue && (isNativeValueChanged || isTriggeredByClearButton);\n\n    if (!shouldCallOnChange) {\n      return;\n    }\n\n    const remappedNativeValue = remapFromNativeValueToSelectValue(e.currentTarget.value);\n\n    if (e.target.value === NOT_SELECTED.NATIVE) {\n      e.target.value = '';\n    }\n    if (e.currentTarget.value === NOT_SELECTED.NATIVE) {\n      e.currentTarget.value = '';\n    }\n\n    onChange?.(e, remappedNativeValue);\n  };\n\n  const onInputChange: React.ChangeEventHandler<HTMLInputElement> = React.useCallback(\n    (e) => {\n      onInputChangeProp && onInputChangeProp(e);\n      setInputValue(e.target.value);\n    },\n    [onInputChangeProp],\n  );\n\n  const areOptionsShown = React.useCallback(() => {\n    return scrollBoxRef.current !== null;\n  }, []);\n\n  const handleKeyDownSelect = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key.length === 1 && event.key !== ' ') {\n        onKeyboardInput(event.key);\n        return;\n      }\n\n      ['ArrowUp', 'ArrowDown', 'Escape', 'Enter'].includes(event.key) &&\n        areOptionsShown() &&\n        event.preventDefault();\n\n      switch (event.key) {\n        case 'ArrowUp':\n          if (opened) {\n            areOptionsShown() && focusOption('prev');\n          } else {\n            open();\n          }\n          break;\n        case 'ArrowDown':\n          if (opened) {\n            areOptionsShown() && focusOption('next');\n          } else {\n            open();\n          }\n          break;\n        case 'Escape':\n          close();\n          break;\n        case 'Backspace':\n        case 'Delete': {\n          if (!opened) {\n            setOpened(true);\n          }\n          resetFocusedOption();\n\n          break;\n        }\n        case 'Enter':\n        case 'Spacebar':\n        case ' ':\n          if (opened) {\n            areOptionsShown() && selectFocused();\n          } else {\n            open();\n          }\n          break;\n      }\n    },\n    [\n      areOptionsShown,\n      close,\n      focusOption,\n      onKeyboardInput,\n      open,\n      opened,\n      selectFocused,\n      resetFocusedOption,\n    ],\n  );\n\n  const handleOptionClick = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      const index = Array.prototype.indexOf.call(\n        e.currentTarget.parentNode?.children,\n        e.currentTarget,\n      );\n      const option = options[index];\n\n      if (option && !option.disabled) {\n        selectOption(index);\n      }\n    },\n    [options, selectOption],\n  );\n\n  const lastMousePositionRef = React.useRef<MousePosition>({ x: 0, y: 0 });\n  const focusOptionOnMouseMove = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>, index: number) => {\n      if (isMousePositionChanged(e, lastMousePositionRef.current)) {\n        focusOptionByIndex(index, false);\n      }\n    },\n    [focusOptionByIndex],\n  );\n\n  const popupAriaId = React.useId();\n  const renderOption = React.useCallback(\n    (option: OptionInterfaceT, index: number) => {\n      const hovered = index === focusedOptionIndex;\n      const selected = index === selectedOptionIndex;\n\n      return (\n        <React.Fragment key={`${typeof option.value}-${option.value}`}>\n          {renderOptionProp({\n            option,\n            hovered,\n            children: option.label,\n            selected,\n            disabled: option.disabled,\n            onClick: handleOptionClick,\n            onMouseDown: handleOptionDown,\n            // Используем `onMouseMove` вместо `onMouseEnter/onMouseOver`.\n            // Потому что если при навигации с клавиатуры курсор наведён на\n            // список, то при первом автоматическом скролле списка вызывается событие MouseOver/MouseEnter\n            // обработчик которого фокусирует опцию под курсором, хотя при навигация с клавиатуры пользователь мог уйти дальше по списку, это путает.\n            // Причём координаты события меняются на пару пикселей по сравнению с прошлым вызовом,\n            // а значит нельзя на них опираться, чтобы запретить обработку такого события.\n            // C mousemove такой проблемы нет, что позволяет реализовать поведение при наведении с клавиатуры и при наведении мышью идентично `<select>`.\n            onMouseMove: (e) => focusOptionOnMouseMove(e, index),\n            id: `${popupAriaId}-${option.value}`,\n          })}\n        </React.Fragment>\n      );\n    },\n    [\n      focusedOptionIndex,\n      handleOptionClick,\n      focusOptionOnMouseMove,\n      renderOptionProp,\n      selectedOptionIndex,\n      popupAriaId,\n    ],\n  );\n\n  const resolvedContent = React.useMemo(() => {\n    const defaultDropdownContent =\n      options.length > 0 ? (\n        <div ref={optionsWrapperRef}>{options.map(renderOption)}</div>\n      ) : (\n        <Footnote className={styles.empty}>{emptyText}</Footnote>\n      );\n\n    if (typeof renderDropdown === 'function') {\n      return renderDropdown({ defaultDropdownContent });\n    } else {\n      return defaultDropdownContent;\n    }\n  }, [emptyText, options, renderDropdown, renderOption]);\n\n  const selectInputRef = useExternRef(getSelectInputRef);\n\n  const controlledValueSet = isControlledOutside && props.value !== NOT_SELECTED.CUSTOM;\n  const uncontrolledValueSet = !isControlledOutside && nativeSelectValue !== NOT_SELECTED.NATIVE;\n  const clearButtonShown =\n    allowClearButton && !opened && (controlledValueSet || uncontrolledValueSet);\n\n  const clearButton = React.useMemo(() => {\n    if (!clearButtonShown) {\n      return null;\n    }\n\n    return (\n      <ClearButton\n        className={iconProp === undefined ? styles.clearIcon : undefined}\n        onClick={function clearSelectState() {\n          setNativeSelectValue(NOT_SELECTED.NATIVE);\n          setInputValue('');\n          selectInputRef.current && selectInputRef.current.focus();\n        }}\n        disabled={restProps.disabled}\n        data-testid={clearButtonTestId}\n      />\n    );\n  }, [\n    clearButtonShown,\n    ClearButton,\n    iconProp,\n    restProps.disabled,\n    clearButtonTestId,\n    setNativeSelectValue,\n    selectInputRef,\n  ]);\n\n  const icon = React.useMemo(() => {\n    if (iconProp !== undefined) {\n      return iconProp;\n    }\n\n    return (\n      <DropdownIcon\n        className={clearButtonShown ? styles.dropdownIcon : undefined}\n        opened={opened}\n      />\n    );\n  }, [clearButtonShown, iconProp, opened]);\n\n  const afterIcons = (icon || clearButtonShown) && (\n    <React.Fragment>\n      {clearButton}\n      {icon}\n    </React.Fragment>\n  );\n\n  const { document } = useDOM();\n  const passClickAndFocusToInputOnClick = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      // Раньше внешней оберткой CustomSelect был <label>, что позволяло по клику в любую область CustomSelect,\n      // даже где нету интерактивного элемента, фокусировать <input> и передавать на него событие клика.\n      // Так как мы больше не оборачиваем CustomSelect в <label>, то для обертки CustomSelect мы симулируем работу <label>.\n      // передаем фокус и клик по <input>, если пользователь кликнул в зоне обертки.\n      // В <label> мы не больше не оборачиваем, потому что это заставляет скринридер\n      // дважды произносить текст выбранной опции при фокусе, если CustomSelect связан с внешним <label>.\n      // Воспроизводится в некоторых версиях Chrome, при навигации по странице с помощью стрелок.\n      // Договорились со специалистом по доступности убрать <label>-обёртки из Select и CustomSelect\n\n      if (!selectInputRef.current || !document) {\n        return;\n      }\n\n      const clickTargetIsNotAnInput = e.target !== selectInputRef.current;\n      if (clickTargetIsNotAnInput) {\n        selectInputRef.current.click();\n\n        const inputIsNotFocused = document.activeElement !== selectInputRef.current;\n        if (inputIsNotFocused) {\n          selectInputRef.current.focus();\n        }\n      }\n    },\n    [document, selectInputRef],\n  );\n\n  const preventInputBlurWhenClickInsideFocusedSelectArea = (\n    e: React.MouseEvent<HTMLDivElement>,\n  ) => {\n    // Так как инпут больше не оборачивается пустым лэйблом, то клик внутри обертки,\n    // но вне инпута (например по иконке дропдауна), будет убирать фокус с инпута.\n    // Чтобы в такой ситуации отключить blur инпута мы превентим mousedown событие обёртки\n    const isInputFocused = document && document.activeElement === selectInputRef.current;\n    if (isInputFocused) {\n      e.preventDefault();\n    }\n  };\n\n  const ariaActiveDescendantOptionIndex: undefined | number =\n    focusedOptionIndex !== -1 ? focusedOptionIndex : undefined;\n  const ariaActiveDescendantId =\n    ariaActiveDescendantOptionIndex !== undefined\n      ? options[ariaActiveDescendantOptionIndex] && options[ariaActiveDescendantOptionIndex].value\n      : null;\n\n  const selectInputAriaProps: React.HTMLAttributes<HTMLElement> = {\n    'role': 'combobox',\n    'aria-controls': popupAriaId,\n    'aria-owns': popupAriaId,\n    'aria-expanded': opened,\n    'aria-activedescendant':\n      ariaActiveDescendantId && opened ? `${popupAriaId}-${ariaActiveDescendantId}` : undefined,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-haspopup': 'listbox',\n    'aria-autocomplete': 'none',\n  };\n\n  const focusWithin = useFocusWithin(handleRootRef);\n\n  const resetOptionFocusOnMouseLeave = React.useCallback(\n    (event: React.MouseEvent) => {\n      // В Хроме eсли мышка пользователя находится над инпутом селекта,\n      // и он с клавиатуры открывает опции, причём одна из опций\n      // уже выбрана, то видно, как выбранная опция получает фокус,\n      // но потом сразу же его теряет.\n      // Связано это с тем, что в этот момент вызывается onMouseLeave, на который у нас\n      // завязан сброс состония фокуса у опции. По хорошему фокус должен оставаться.\n      // Нам не интересен вызов onMouseLeave если мышка при этом не двигалась.\n      if (isMousePositionChanged(event, lastMousePositionRef.current)) {\n        resetFocusedOption();\n      }\n    },\n    [resetFocusedOption],\n  );\n\n  return (\n    <div\n      className={classNames(styles.host, sizeY !== 'regular' && sizeYClassNames[sizeY], className)}\n      style={style}\n      ref={handleRootRef}\n      onClick={passClickAndFocusToInputOnClick}\n      onMouseDown={preventInputBlurWhenClickInsideFocusedSelectArea}\n      onMouseMove={function updateLastMousePosition(e) {\n        lastMousePositionRef.current = { x: e.clientX, y: e.clientY };\n      }}\n    >\n      {focusWithin && selected && !opened && (\n        <VisuallyHidden aria-live=\"polite\">{selected.label}</VisuallyHidden>\n      )}\n      <CustomSelectInput\n        autoComplete=\"off\"\n        autoCapitalize=\"none\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        {...restProps}\n        {...selectInputAriaProps}\n        getRef={selectInputRef}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        className={openedClassNames}\n        readOnly={!searchable}\n        fetching={fetching}\n        value={inputValue}\n        onKeyUp={handleKeyUp}\n        onKeyDown={callMultiple(handleKeyDownSelect, onInputKeyDown)}\n        onChange={onInputChange}\n        onClick={onClick}\n        before={before}\n        after={afterIcons}\n        selectType={selectType}\n      >\n        {selected?.label}\n      </CustomSelectInput>\n      <select\n        ref={selectElRef}\n        name={name}\n        onChange={onNativeSelectChange}\n        onBlur={props.onBlur}\n        onFocus={props.onFocus}\n        onClick={props.onClick}\n        value={nativeSelectValue}\n        aria-hidden\n        className={styles.control}\n        data-testid={nativeSelectTestId}\n        required={required}\n      >\n        {(allowClearButton || nativeSelectValue === NOT_SELECTED.NATIVE) && (\n          <option key={NOT_SELECTED.NATIVE} value={NOT_SELECTED.NATIVE} />\n        )}\n        {optionsProp.map((item) => (\n          <option key={`${item.value}`} value={item.value} />\n        ))}\n      </select>\n      {opened && (\n        <CustomSelectDropdown\n          targetRef={containerRef}\n          placement={popperPlacement}\n          scrollBoxRef={scrollBoxRef}\n          onPlacementChange={setPopperPlacement}\n          onMouseLeave={resetOptionFocusOnMouseLeave}\n          fetching={fetching}\n          overscrollBehavior={overscrollBehavior}\n          offsetDistance={dropdownOffsetDistance}\n          autoWidth={dropdownAutoWidth}\n          forcePortal={forceDropdownPortal}\n          noMaxHeight={noMaxHeight}\n          role=\"listbox\"\n          id={popupAriaId}\n          aria-labelledby={ariaLabelledBy}\n          tabIndex={-1}\n        >\n          {resolvedContent}\n        </CustomSelectDropdown>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}