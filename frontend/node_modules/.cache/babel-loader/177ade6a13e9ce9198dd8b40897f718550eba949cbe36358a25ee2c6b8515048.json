{"ast":null,"code":"import * as React from \"react\";\nimport { isFunction, noop } from \"@vkontakte/vkjs\";\n/**\n * Возвращает значение с состоянием и функции на обновление состояния\n * без и с задержкой.\n *\n * # Пример\n *\n * ```ts\n * const [count, setCount] = useStateWithDelay(initialState);\n *\n * const click = () => {\n *   setCount(count + 1, 500)\n * }\n * ```\n *\n * Есть возможность передать функцию-коллбэк, которая будет\n * вызвана сразу после вызова setState с новым значением стейта\n * в качестве аргумента.\n *\n * ```ts\n * const onCountChange = React.useCallback((count) => {\n *   // обработчик нового значения count\n *   // будет вызван через 500мс\n * }, []);\n *\n *\n * const [count, setCount] = useStateWithDelay(initialState, 0, onCountChange);\n *\n * const click = () => {\n *   setCount(count + 1, 500)\n * }\n * ```\n */\nexport function useStateWithDelay(initialState) {\n  let defaultDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let onStateChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n  const [value, setValue] = React.useState(initialState);\n  const timeout = React.useRef(undefined);\n  const handleSetValue = React.useCallback(nextValue => {\n    if (isFunction(nextValue)) {\n      setValue(prevValue => {\n        const value = nextValue(prevValue);\n        onStateChange(value);\n        return value;\n      });\n    } else {\n      setValue(nextValue);\n      onStateChange(nextValue);\n    }\n  }, [onStateChange]);\n  const setValueWithDelay = React.useCallback(function (newValue) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDelay;\n    clearTimeout(timeout.current);\n    if (delay === 0) {\n      handleSetValue(newValue);\n      return;\n    }\n    timeout.current = setTimeout(() => handleSetValue(newValue), delay);\n  }, [defaultDelay, handleSetValue]);\n  return [value, setValueWithDelay];\n}","map":{"version":3,"names":["React","isFunction","noop","useStateWithDelay","initialState","defaultDelay","arguments","length","undefined","onStateChange","value","setValue","useState","timeout","useRef","handleSetValue","useCallback","nextValue","prevValue","setValueWithDelay","newValue","delay","clearTimeout","current","setTimeout"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/Clickable/useStateWithDelay.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isFunction, noop } from '@vkontakte/vkjs';\n\ntype DispatchWithDelay<S> = (value: S, delay?: number) => void;\n\n/**\n * Возвращает значение с состоянием и функции на обновление состояния\n * без и с задержкой.\n *\n * # Пример\n *\n * ```ts\n * const [count, setCount] = useStateWithDelay(initialState);\n *\n * const click = () => {\n *   setCount(count + 1, 500)\n * }\n * ```\n *\n * Есть возможность передать функцию-коллбэк, которая будет\n * вызвана сразу после вызова setState с новым значением стейта\n * в качестве аргумента.\n *\n * ```ts\n * const onCountChange = React.useCallback((count) => {\n *   // обработчик нового значения count\n *   // будет вызван через 500мс\n * }, []);\n *\n *\n * const [count, setCount] = useStateWithDelay(initialState, 0, onCountChange);\n *\n * const click = () => {\n *   setCount(count + 1, 500)\n * }\n * ```\n */\nexport function useStateWithDelay<S>(\n  initialState: S | (() => S),\n  defaultDelay = 0,\n  onStateChange: (v: S) => void = noop,\n): [S, DispatchWithDelay<React.SetStateAction<S>>] {\n  const [value, setValue] = React.useState(initialState);\n  const timeout = React.useRef<ReturnType<typeof setTimeout>>(undefined);\n\n  const handleSetValue = React.useCallback(\n    (nextValue: React.SetStateAction<S>) => {\n      if (isFunction(nextValue)) {\n        setValue((prevValue) => {\n          const value = nextValue(prevValue);\n          onStateChange(value);\n\n          return value;\n        });\n      } else {\n        setValue(nextValue);\n        onStateChange(nextValue);\n      }\n    },\n    [onStateChange],\n  );\n\n  const setValueWithDelay = React.useCallback(\n    (newValue: React.SetStateAction<S>, delay: number = defaultDelay) => {\n      clearTimeout(timeout.current);\n      if (delay === 0) {\n        handleSetValue(newValue);\n        return;\n      }\n\n      timeout.current = setTimeout(() => handleSetValue(newValue), delay);\n    },\n    [defaultDelay, handleSetValue],\n  );\n\n  return [value, setValueWithDelay];\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,EAAEC,IAAI,QAAQ;AAIjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAO,SAASC,kBACdC,YAA2B,EAES;EAAA,IADpCC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAe,CAAC;EAAA,IAChBG,aAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgCJ,IAAI;EAEpC,MAAM,CAACQ,KAAA,EAAOC,QAAA,CAAS,GAAGX,KAAA,CAAMY,QAAQ,CAACR,YAAA;EACzC,MAAMS,OAAA,GAAUb,KAAA,CAAMc,MAAM,CAAgCN,SAAA;EAE5D,MAAMO,cAAA,GAAiBf,KAAA,CAAMgB,WAAW,CACrCC,SAAA;IACC,IAAIhB,UAAA,CAAWgB,SAAA,GAAY;MACzBN,QAAA,CAAUO,SAAA;QACR,MAAMR,KAAA,GAAQO,SAAA,CAAUC,SAAA;QACxBT,aAAA,CAAcC,KAAA;QAEd,OAAOA,KAAA;MACT;IACF,OAAO;MACLC,QAAA,CAASM,SAAA;MACTR,aAAA,CAAcQ,SAAA;IAChB;EACF,GACA,CAACR,aAAA,CAAc;EAGjB,MAAMU,iBAAA,GAAoBnB,KAAA,CAAMgB,WAAW,CACzC,UAACI,QAAA,EAA+D;IAAA,IAA5BC,KAAA,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgBD,YAAY;IAC9DiB,YAAA,CAAaT,OAAA,CAAQU,OAAO;IAC5B,IAAIF,KAAA,KAAU,GAAG;MACfN,cAAA,CAAeK,QAAA;MACf;IACF;IAEAP,OAAA,CAAQU,OAAO,GAAGC,UAAA,CAAW,MAAMT,cAAA,CAAeK,QAAA,GAAWC,KAAA;EAC/D,GACA,CAAChB,YAAA,EAAcU,cAAA,CAAe;EAGhC,OAAO,CAACL,KAAA,EAAOS,iBAAA,CAAkB;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}