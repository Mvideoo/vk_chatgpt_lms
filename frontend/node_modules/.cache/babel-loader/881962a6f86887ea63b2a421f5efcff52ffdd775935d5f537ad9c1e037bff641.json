{"ast":null,"code":"import { getTextFromChildren } from \"./children.js\";\nfunction getOptionLabelDefault(option) {\n  return option.label;\n}\nexport function defaultFilterFn() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const [rawSearchQuery = '', option, getOptionLabel] = args;\n  const foundRawLabel = getOptionLabel ? getOptionLabel(option) : getOptionLabelDefault(option);\n  if (foundRawLabel === undefined) {\n    return false;\n  }\n  const searchQuery = rawSearchQuery.toLocaleLowerCase();\n  const label = getTextFromChildren(foundRawLabel).toLocaleLowerCase();\n  if (label.startsWith(searchQuery)) {\n    return true;\n  }\n  const findAllIncludes = function () {\n    let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let search = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    const includes = [];\n    let i = target.indexOf(search);\n    while (i !== -1) {\n      includes.push(i);\n      i = target.indexOf(search, i + 1);\n    }\n    return includes;\n  };\n  const includes = findAllIncludes(label, searchQuery);\n  if (includes.length) {\n    // Ищем вхождение перед началом которого не буква\n    const letterRegexp = new RegExp('\\\\p{L}', 'u');\n    for (const index of includes) {\n      if (!letterRegexp.test(label[index - 1])) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nexport const getFormFieldModeFromSelectType = function () {\n  let selectType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  return selectType === 'default' ? 'default' : 'plain';\n};","map":{"version":3,"names":["getTextFromChildren","getOptionLabelDefault","option","label","defaultFilterFn","_len","arguments","length","args","Array","_key","rawSearchQuery","getOptionLabel","foundRawLabel","undefined","searchQuery","toLocaleLowerCase","startsWith","findAllIncludes","target","search","includes","i","indexOf","push","letterRegexp","RegExp","index","test","getFormFieldModeFromSelectType","selectType"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/lib/select.ts"],"sourcesContent":["import type * as React from 'react';\nimport type { SelectType } from '../components/Select/Select';\nimport { getTextFromChildren } from './children';\n\nexport type Option = {\n  value?: unknown;\n  label?: React.ReactNode;\n  [index: string]: any;\n};\n\nexport type GetOptionLabel<O extends Option> = (option: O) => O['label'];\n\nexport type FilterFn<O extends Option> = (\n  inputValue: string,\n  option: O,\n  getOptionsLabel?: GetOptionLabel<O>,\n) => boolean;\n\nexport type SortFn<O extends Option> = (optionA: O, optionB: O, inputValue: string) => number;\n\nfunction getOptionLabelDefault<O extends Option>(option: O): O['label'] {\n  return option.label;\n}\n\nexport function defaultFilterFn<O extends Option>(\n  ...args: Parameters<FilterFn<O>>\n): ReturnType<FilterFn<O>> {\n  const [rawSearchQuery = '', option, getOptionLabel] = args;\n  const foundRawLabel = getOptionLabel ? getOptionLabel(option) : getOptionLabelDefault(option);\n\n  if (foundRawLabel === undefined) {\n    return false;\n  }\n\n  const searchQuery = rawSearchQuery.toLocaleLowerCase();\n  const label = getTextFromChildren(foundRawLabel).toLocaleLowerCase();\n\n  if (label.startsWith(searchQuery)) {\n    return true;\n  }\n\n  const findAllIncludes = (target = '', search = '') => {\n    const includes = [];\n    let i = target.indexOf(search);\n    while (i !== -1) {\n      includes.push(i);\n      i = target.indexOf(search, i + 1);\n    }\n    return includes;\n  };\n\n  const includes = findAllIncludes(label, searchQuery);\n\n  if (includes.length) {\n    // Ищем вхождение перед началом которого не буква\n    const letterRegexp = new RegExp('\\\\p{L}', 'u');\n\n    for (const index of includes) {\n      if (!letterRegexp.test(label[index - 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport const getFormFieldModeFromSelectType = (\n  selectType: SelectType = 'default',\n): 'default' | 'plain' => {\n  return selectType === 'default' ? 'default' : 'plain';\n};\n"],"mappings":"AAEA,SAASA,mBAAmB,QAAQ;AAkBpC,SAASC,sBAAwCC,MAAS;EACxD,OAAOA,MAAA,CAAOC,KAAK;AACrB;AAEA,OAAO,SAASC,gBAAA,EACkB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA7BC,IAA6B,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAA7BF,IAA6B,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAEhC,MAAM,CAACC,cAAA,GAAiB,EAAE,EAAET,MAAA,EAAQU,cAAA,CAAe,GAAGJ,IAAA;EACtD,MAAMK,aAAA,GAAgBD,cAAA,GAAiBA,cAAA,CAAeV,MAAA,IAAUD,qBAAA,CAAsBC,MAAA;EAEtF,IAAIW,aAAA,KAAkBC,SAAA,EAAW;IAC/B,OAAO;EACT;EAEA,MAAMC,WAAA,GAAcJ,cAAA,CAAeK,iBAAiB;EACpD,MAAMb,KAAA,GAAQH,mBAAA,CAAoBa,aAAA,EAAeG,iBAAiB;EAElE,IAAIb,KAAA,CAAMc,UAAU,CAACF,WAAA,GAAc;IACjC,OAAO;EACT;EAEA,MAAMG,eAAA,GAAkB,SAAAA,CAAA,EAAyB;IAAA,IAAxBC,MAAA,GAAAb,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAQ,SAAA,GAAAR,SAAA,MAAS,EAAE;IAAA,IAAEc,MAAA,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAQ,SAAA,GAAAR,SAAA,MAAS,EAAE;IAC/C,MAAMe,QAAA,GAAW,EAAE;IACnB,IAAIC,CAAA,GAAIH,MAAA,CAAOI,OAAO,CAACH,MAAA;IACvB,OAAOE,CAAA,KAAM,CAAC,GAAG;MACfD,QAAA,CAASG,IAAI,CAACF,CAAA;MACdA,CAAA,GAAIH,MAAA,CAAOI,OAAO,CAACH,MAAA,EAAQE,CAAA,GAAI;IACjC;IACA,OAAOD,QAAA;EACT;EAEA,MAAMA,QAAA,GAAWH,eAAA,CAAgBf,KAAA,EAAOY,WAAA;EAExC,IAAIM,QAAA,CAASd,MAAM,EAAE;IACnB;IACA,MAAMkB,YAAA,GAAe,IAAIC,MAAA,CAAO,UAAU;IAE1C,KAAK,MAAMC,KAAA,IAASN,QAAA,EAAU;MAC5B,IAAI,CAACI,YAAA,CAAaG,IAAI,CAACzB,KAAK,CAACwB,KAAA,GAAQ,EAAE,GAAG;QACxC,OAAO;MACT;IACF;EACF;EAEA,OAAO;AACT;AAEA,OAAO,MAAME,8BAAA,GAAiC,SAAAA,CAAA,EACV;EAAA,IAAlCC,UAAA,GAAAxB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAQ,SAAA,GAAAR,SAAA,MAAyB,SAAS;EAElC,OAAOwB,UAAA,KAAe,YAAY,YAAY;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}