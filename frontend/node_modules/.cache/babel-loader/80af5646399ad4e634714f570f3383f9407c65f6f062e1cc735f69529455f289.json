{"ast":null,"code":"'use client';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { useColorScheme } from \"../../hooks/useColorScheme.js\";\nimport { createPortal } from \"../../lib/createPortal.js\";\nimport { useDOM } from \"../../lib/dom.js\";\nimport { isRefObject } from \"../../lib/isRefObject.js\";\nimport { ColorSchemeProvider } from \"../ColorSchemeProvider/ColorSchemeProvider.js\";\nimport { AppRootContext } from \"./AppRootContext.js\";\nimport { AppRootStyleContainer } from \"./AppRootStyleContainer/AppRootStyleContainer.js\";\nexport const AppRootPortal = _ref => {\n  let {\n    children,\n    usePortal,\n    className\n  } = _ref;\n  const {\n    mode,\n    disablePortal: disableCreatePortalInGlobalPortalRoot\n  } = React.useContext(AppRootContext);\n  const colorScheme = useColorScheme();\n  const canUsePortal = shouldUsePortal(usePortal, mode, Boolean(disableCreatePortalInGlobalPortalRoot));\n  const portalContainer = usePortalContainer(usePortal);\n  if (canUsePortal && portalContainer) {\n    return createPortal(/*#__PURE__*/_jsx(ColorSchemeProvider, {\n      value: colorScheme,\n      children: /*#__PURE__*/_jsx(AppRootStyleContainer, {\n        className: className,\n        children: children\n      })\n    }), portalContainer);\n  }\n  return children;\n};\nfunction shouldUsePortal(usePortal, mode, disableCreatePortalInGlobalPortalRoot) {\n  if (usePortal === undefined) {\n    return disableCreatePortalInGlobalPortalRoot === false && mode !== 'full';\n  }\n  if (typeof usePortal !== 'boolean') {\n    return true;\n  }\n  return disableCreatePortalInGlobalPortalRoot === false && usePortal === true;\n}\nfunction usePortalContainer(usePortal) {\n  const {\n    portalRoot: portalRootFromContext\n  } = React.useContext(AppRootContext);\n  const {\n    document\n  } = useDOM();\n  if (usePortal && typeof usePortal !== 'boolean') {\n    return isRefObject(usePortal) ? usePortal.current : usePortal;\n  }\n  const resolvedPortalFromContext = isRefObject(portalRootFromContext) ? portalRootFromContext.current : portalRootFromContext;\n  // если portalRoot не передали через AppRoot, то мы используем body\n  // мы можем использовать body как портал,\n  // так как все стили передаются вместе с AppRootStyleContainer\n  const portalRoot = resolvedPortalFromContext || (document === null || document === void 0 ? void 0 : document.body) || null;\n  return portalRoot;\n}","map":{"version":3,"names":["React","useColorScheme","createPortal","useDOM","isRefObject","ColorSchemeProvider","AppRootContext","AppRootStyleContainer","AppRootPortal","_ref","children","usePortal","className","mode","disablePortal","disableCreatePortalInGlobalPortalRoot","useContext","colorScheme","canUsePortal","shouldUsePortal","Boolean","portalContainer","usePortalContainer","_jsx","value","undefined","portalRoot","portalRootFromContext","document","current","resolvedPortalFromContext","body"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/AppRoot/AppRootPortal.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { createPortal } from '../../lib/createPortal';\nimport { useDOM } from '../../lib/dom';\nimport { isRefObject } from '../../lib/isRefObject';\nimport type { HasChildren } from '../../types';\nimport { ColorSchemeProvider } from '../ColorSchemeProvider/ColorSchemeProvider';\nimport { AppRootContext, type AppRootContextInterface } from './AppRootContext';\nimport { AppRootStyleContainer } from './AppRootStyleContainer/AppRootStyleContainer';\n\nexport interface AppRootPortalProps extends HasChildren {\n  /**\n   * - При передаче `true` в качестве портала будет использован `portalRoot`\n   * из контекста `AppRoot` если он передан в `AppRoot`, иначе `document.body`.\n   * - При передаче элемента будут игнорироваться `portalRoot` и `disablePortal` из контекста `AppRoot`.\n   *\n   * По умолчанию в качестве портала будет использован `document.body`\n   */\n  usePortal?: boolean | HTMLElement | React.RefObject<HTMLElement | null> | null;\n  className?: string;\n}\n\nexport const AppRootPortal = ({\n  children,\n  usePortal,\n  className,\n}: AppRootPortalProps): React.ReactNode => {\n  const { mode, disablePortal: disableCreatePortalInGlobalPortalRoot } =\n    React.useContext(AppRootContext);\n  const colorScheme = useColorScheme();\n\n  const canUsePortal = shouldUsePortal(\n    usePortal,\n    mode,\n    Boolean(disableCreatePortalInGlobalPortalRoot),\n  );\n\n  const portalContainer = usePortalContainer(usePortal);\n\n  if (canUsePortal && portalContainer) {\n    return createPortal(\n      <ColorSchemeProvider value={colorScheme}>\n        <AppRootStyleContainer className={className}>{children}</AppRootStyleContainer>\n      </ColorSchemeProvider>,\n      portalContainer,\n    );\n  }\n\n  return children;\n};\n\nfunction shouldUsePortal(\n  usePortal: AppRootPortalProps['usePortal'],\n  mode: AppRootContextInterface['mode'],\n  disableCreatePortalInGlobalPortalRoot: boolean,\n) {\n  if (usePortal === undefined) {\n    return disableCreatePortalInGlobalPortalRoot === false && mode !== 'full';\n  }\n\n  if (typeof usePortal !== 'boolean') {\n    return true;\n  }\n\n  return disableCreatePortalInGlobalPortalRoot === false && usePortal === true;\n}\n\nfunction usePortalContainer(usePortal: AppRootPortalProps['usePortal']): HTMLElement | null {\n  const { portalRoot: portalRootFromContext } = React.useContext(AppRootContext);\n\n  const { document } = useDOM();\n\n  if (usePortal && typeof usePortal !== 'boolean') {\n    return isRefObject(usePortal) ? usePortal.current : usePortal;\n  }\n\n  const resolvedPortalFromContext = isRefObject(portalRootFromContext)\n    ? portalRootFromContext.current\n    : portalRootFromContext;\n  // если portalRoot не передали через AppRoot, то мы используем body\n  // мы можем использовать body как портал,\n  // так как все стили передаются вместе с AppRootStyleContainer\n  const portalRoot = resolvedPortalFromContext || document?.body || null;\n  return portalRoot;\n}\n"],"mappings":"AAAA;;;AAEA,YAAYA,KAAA,MAAW;AACvB,SAASC,cAAc,QAAQ;AAC/B,SAASC,YAAY,QAAQ;AAC7B,SAASC,MAAM,QAAQ;AACvB,SAASC,WAAW,QAAQ;AAE5B,SAASC,mBAAmB,QAAQ;AACpC,SAASC,cAAc,QAAsC;AAC7D,SAASC,qBAAqB,QAAQ;AActC,OAAO,MAAMC,aAAA,GAAgBC,IAAA,IAIR;EAAA,IAJS;IAC5BC,QAAQ;IACRC,SAAS;IACTC;EAAS,CACU,GAAAH,IAAA;EACnB,MAAM;IAAEI,IAAI;IAAEC,aAAA,EAAeC;EAAqC,CAAE,GAClEf,KAAA,CAAMgB,UAAU,CAACV,cAAA;EACnB,MAAMW,WAAA,GAAchB,cAAA;EAEpB,MAAMiB,YAAA,GAAeC,eAAA,CACnBR,SAAA,EACAE,IAAA,EACAO,OAAA,CAAQL,qCAAA;EAGV,MAAMM,eAAA,GAAkBC,kBAAA,CAAmBX,SAAA;EAE3C,IAAIO,YAAA,IAAgBG,eAAA,EAAiB;IACnC,OAAOnB,YAAA,cACLqB,IAAA,CAAClB,mBAAA;MAAoBmB,KAAA,EAAOP,WAAA;gBAC1B,aAAAM,IAAA,CAAChB,qBAAA;QAAsBK,SAAA,EAAWA,SAAA;kBAAYF;;QAEhDW,eAAA;EAEJ;EAEA,OAAOX,QAAA;AACT;AAEA,SAASS,gBACPR,SAA0C,EAC1CE,IAAqC,EACrCE,qCAA8C;EAE9C,IAAIJ,SAAA,KAAcc,SAAA,EAAW;IAC3B,OAAOV,qCAAA,KAA0C,SAASF,IAAA,KAAS;EACrE;EAEA,IAAI,OAAOF,SAAA,KAAc,WAAW;IAClC,OAAO;EACT;EAEA,OAAOI,qCAAA,KAA0C,SAASJ,SAAA,KAAc;AAC1E;AAEA,SAASW,mBAAmBX,SAA0C;EACpE,MAAM;IAAEe,UAAA,EAAYC;EAAqB,CAAE,GAAG3B,KAAA,CAAMgB,UAAU,CAACV,cAAA;EAE/D,MAAM;IAAEsB;EAAQ,CAAE,GAAGzB,MAAA;EAErB,IAAIQ,SAAA,IAAa,OAAOA,SAAA,KAAc,WAAW;IAC/C,OAAOP,WAAA,CAAYO,SAAA,IAAaA,SAAA,CAAUkB,OAAO,GAAGlB,SAAA;EACtD;EAEA,MAAMmB,yBAAA,GAA4B1B,WAAA,CAAYuB,qBAAA,IAC1CA,qBAAA,CAAsBE,OAAO,GAC7BF,qBAAA;EACJ;EACA;EACA;EACA,MAAMD,UAAA,GAAaI,yBAAA,KAA6BF,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUG,IAAI,KAAI;EAClE,OAAOL,UAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}