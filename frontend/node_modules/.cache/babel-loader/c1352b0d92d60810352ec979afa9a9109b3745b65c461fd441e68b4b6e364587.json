{"ast":null,"code":"import * as React from \"react\";\nimport { isKeyboardFocusingStarted } from \"../lib/accessibility.js\";\nimport { useDOM } from \"../lib/dom.js\";\nimport { useIsomorphicLayoutEffect } from \"../lib/useIsomorphicLayoutEffect.js\";\nexport const ENABLE_KEYBOARD_INPUT_EVENT_NAME = 'enableKeyboardInput';\nexport const DISABLE_KEYBOARD_INPUT_EVENT_NAME = 'disableKeyboardInput';\nconst EVENT_OPTIONS = {\n  passive: true,\n  capture: true\n};\n/**\n * Чтобы оптимизировать рендер, сохраняем в ref.\n *\n * В контекст можно передать через getter, подробнее в примере ниже.\n *\n * ```tsx\n * const keyboardInputTrackerRef = useKeyboardInputTracker();\n * <SomeContext.Provider value={{\n *  get keyboardInput() {\n *    return keyboardInputTrackerRef.current;\n *  }\n * }}>\n *  {children}\n * </SomeContext.Provider>\n * ```\n *\n * @private\n */\nexport function useKeyboardInputTracker() {\n  const {\n    document\n  } = useDOM();\n  const keyboardFocusingStartedRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    /* istanbul ignore if: невозможный кейс, т.к. в SSR эффекты не вызываются. Проверка на будущее, если вдруг эффект будет вызываться. */if (!document) {\n      return;\n    }\n    const handleKeydown = event => {\n      if (isKeyboardFocusingStarted(event)) {\n        keyboardFocusingStartedRef.current = true;\n      }\n    };\n    const handleCustomEnableKeyboardEvent = () => {\n      keyboardFocusingStartedRef.current = true;\n    };\n    const handleCustomDisableKeyboardEvent = () => {\n      keyboardFocusingStartedRef.current = false;\n    };\n    document.addEventListener('keydown', handleKeydown, EVENT_OPTIONS);\n    document.addEventListener(ENABLE_KEYBOARD_INPUT_EVENT_NAME, handleCustomEnableKeyboardEvent, EVENT_OPTIONS); // prettier-ignore\n    document.addEventListener(DISABLE_KEYBOARD_INPUT_EVENT_NAME, handleCustomDisableKeyboardEvent, EVENT_OPTIONS); // prettier-ignore\n    document.addEventListener('mousedown', handleCustomDisableKeyboardEvent, EVENT_OPTIONS);\n    document.addEventListener('touchstart', handleCustomDisableKeyboardEvent, EVENT_OPTIONS);\n    return () => {\n      document.removeEventListener('keydown', handleKeydown, EVENT_OPTIONS);\n      document.removeEventListener(ENABLE_KEYBOARD_INPUT_EVENT_NAME, handleCustomEnableKeyboardEvent, EVENT_OPTIONS); // prettier-ignore\n      document.removeEventListener(DISABLE_KEYBOARD_INPUT_EVENT_NAME, handleCustomDisableKeyboardEvent, EVENT_OPTIONS); // prettier-ignore\n      document.removeEventListener('mousedown', handleCustomDisableKeyboardEvent, EVENT_OPTIONS);\n      document.removeEventListener('touchstart', handleCustomDisableKeyboardEvent, EVENT_OPTIONS);\n    };\n  }, [document]);\n  return keyboardFocusingStartedRef;\n}","map":{"version":3,"names":["React","isKeyboardFocusingStarted","useDOM","useIsomorphicLayoutEffect","ENABLE_KEYBOARD_INPUT_EVENT_NAME","DISABLE_KEYBOARD_INPUT_EVENT_NAME","EVENT_OPTIONS","passive","capture","useKeyboardInputTracker","document","keyboardFocusingStartedRef","useRef","handleKeydown","event","current","handleCustomEnableKeyboardEvent","handleCustomDisableKeyboardEvent","addEventListener","removeEventListener"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/hooks/useKeyboardInputTracker.ts"],"sourcesContent":["import * as React from 'react';\nimport { isKeyboardFocusingStarted } from '../lib/accessibility';\nimport { useDOM } from '../lib/dom';\nimport { useIsomorphicLayoutEffect } from '../lib/useIsomorphicLayoutEffect';\n\nexport const ENABLE_KEYBOARD_INPUT_EVENT_NAME = 'enableKeyboardInput';\nexport const DISABLE_KEYBOARD_INPUT_EVENT_NAME = 'disableKeyboardInput';\n\nconst EVENT_OPTIONS = {\n  passive: true,\n  capture: true,\n};\n\n/**\n * Чтобы оптимизировать рендер, сохраняем в ref.\n *\n * В контекст можно передать через getter, подробнее в примере ниже.\n *\n * ```tsx\n * const keyboardInputTrackerRef = useKeyboardInputTracker();\n * <SomeContext.Provider value={{\n *  get keyboardInput() {\n *    return keyboardInputTrackerRef.current;\n *  }\n * }}>\n *  {children}\n * </SomeContext.Provider>\n * ```\n *\n * @private\n */\nexport function useKeyboardInputTracker(): React.RefObject<boolean> {\n  const { document } = useDOM();\n  const keyboardFocusingStartedRef = React.useRef(false);\n\n  useIsomorphicLayoutEffect(() => {\n    /* istanbul ignore if: невозможный кейс, т.к. в SSR эффекты не вызываются. Проверка на будущее, если вдруг эффект будет вызываться. */\n    if (!document) {\n      return;\n    }\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      if (isKeyboardFocusingStarted(event)) {\n        keyboardFocusingStartedRef.current = true;\n      }\n    };\n\n    const handleCustomEnableKeyboardEvent = () => {\n      keyboardFocusingStartedRef.current = true;\n    };\n\n    const handleCustomDisableKeyboardEvent = () => {\n      keyboardFocusingStartedRef.current = false;\n    };\n\n    document.addEventListener('keydown', handleKeydown, EVENT_OPTIONS);\n    document.addEventListener(ENABLE_KEYBOARD_INPUT_EVENT_NAME, handleCustomEnableKeyboardEvent, EVENT_OPTIONS); // prettier-ignore\n    document.addEventListener(DISABLE_KEYBOARD_INPUT_EVENT_NAME, handleCustomDisableKeyboardEvent, EVENT_OPTIONS); // prettier-ignore\n    document.addEventListener('mousedown', handleCustomDisableKeyboardEvent, EVENT_OPTIONS);\n    document.addEventListener('touchstart', handleCustomDisableKeyboardEvent, EVENT_OPTIONS);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeydown, EVENT_OPTIONS);\n      document.removeEventListener(ENABLE_KEYBOARD_INPUT_EVENT_NAME, handleCustomEnableKeyboardEvent, EVENT_OPTIONS); // prettier-ignore\n      document.removeEventListener(DISABLE_KEYBOARD_INPUT_EVENT_NAME, handleCustomDisableKeyboardEvent, EVENT_OPTIONS); // prettier-ignore\n      document.removeEventListener('mousedown', handleCustomDisableKeyboardEvent, EVENT_OPTIONS);\n      document.removeEventListener('touchstart', handleCustomDisableKeyboardEvent, EVENT_OPTIONS);\n    };\n  }, [document]);\n\n  return keyboardFocusingStartedRef;\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,yBAAyB,QAAQ;AAC1C,SAASC,MAAM,QAAQ;AACvB,SAASC,yBAAyB,QAAQ;AAE1C,OAAO,MAAMC,gCAAA,GAAmC;AAChD,OAAO,MAAMC,iCAAA,GAAoC;AAEjD,MAAMC,aAAA,GAAgB;EACpBC,OAAA,EAAS;EACTC,OAAA,EAAS;AACX;AAEA;;;;;;;;;;;;;;;;;;AAkBA,OAAO,SAASC,wBAAA;EACd,MAAM;IAAEC;EAAQ,CAAE,GAAGR,MAAA;EACrB,MAAMS,0BAAA,GAA6BX,KAAA,CAAMY,MAAM,CAAC;EAEhDT,yBAAA,CAA0B;IACxB,sIACA,IAAI,CAACO,QAAA,EAAU;MACb;IACF;IAEA,MAAMG,aAAA,GAAiBC,KAAA;MACrB,IAAIb,yBAAA,CAA0Ba,KAAA,GAAQ;QACpCH,0BAAA,CAA2BI,OAAO,GAAG;MACvC;IACF;IAEA,MAAMC,+BAAA,GAAkCA,CAAA;MACtCL,0BAAA,CAA2BI,OAAO,GAAG;IACvC;IAEA,MAAME,gCAAA,GAAmCA,CAAA;MACvCN,0BAAA,CAA2BI,OAAO,GAAG;IACvC;IAEAL,QAAA,CAASQ,gBAAgB,CAAC,WAAWL,aAAA,EAAeP,aAAA;IACpDI,QAAA,CAASQ,gBAAgB,CAACd,gCAAA,EAAkCY,+BAAA,EAAiCV,aAAA,GAAgB;IAC7GI,QAAA,CAASQ,gBAAgB,CAACb,iCAAA,EAAmCY,gCAAA,EAAkCX,aAAA,GAAgB;IAC/GI,QAAA,CAASQ,gBAAgB,CAAC,aAAaD,gCAAA,EAAkCX,aAAA;IACzEI,QAAA,CAASQ,gBAAgB,CAAC,cAAcD,gCAAA,EAAkCX,aAAA;IAE1E,OAAO;MACLI,QAAA,CAASS,mBAAmB,CAAC,WAAWN,aAAA,EAAeP,aAAA;MACvDI,QAAA,CAASS,mBAAmB,CAACf,gCAAA,EAAkCY,+BAAA,EAAiCV,aAAA,GAAgB;MAChHI,QAAA,CAASS,mBAAmB,CAACd,iCAAA,EAAmCY,gCAAA,EAAkCX,aAAA,GAAgB;MAClHI,QAAA,CAASS,mBAAmB,CAAC,aAAaF,gCAAA,EAAkCX,aAAA;MAC5EI,QAAA,CAASS,mBAAmB,CAAC,cAAcF,gCAAA,EAAkCX,aAAA;IAC/E;EACF,GAAG,CAACI,QAAA,CAAS;EAEb,OAAOC,0BAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}