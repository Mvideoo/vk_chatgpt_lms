{"ast":null,"code":"import * as React from \"react\";\nimport { differenceInMilliseconds, isSameDay, startOfTomorrow } from \"date-fns\";\nimport { useDOM } from \"../lib/dom.js\";\n/**\n * Опционально обновляемая дата сегодняшнего дня\n *\n * Дата - сегодня (в соответствии с системным временем)\n *\n * Часы, минуты, секунды, миллисекунды - произвольные\n *\n * @param listenDayChangesForUpdate - флаг по которому определяется, будет ли создаваться подписка на смену календарного дня\n */\nexport function useTodayDate() {\n  let listenDayChangesForUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const {\n    document,\n    window\n  } = useDOM();\n  const [todayDate, setTodayDate] = React.useState(() => new Date());\n  React.useEffect(function setupTodaysDateRecalculationListener() {\n    if (!listenDayChangesForUpdate || !document || !window) {\n      return;\n    }\n    let timeout = undefined;\n    const recalcTimeout = () => {\n      if (document.visibilityState === 'visible') {\n        const now = new Date();\n        const timeToDayChange = differenceInMilliseconds(startOfTomorrow(), now);\n        // Удаляем старый таймаут\n        window.clearTimeout(timeout);\n        // Создаем новый таймаут\n        timeout = window.setTimeout(() => {\n          setTodayDate(new Date());\n        }, timeToDayChange);\n        // Если todayDate не обновился в таймаут - обновить при заходе на вкладку\n        if (!isSameDay(todayDate, now)) {\n          setTodayDate(now);\n        }\n      }\n    };\n    recalcTimeout();\n    // Создаем слушатель visibilitychange, чтобы предотвратить пропуск обновления стейта после заморозки вкладки\n    // Если человек ее долго не трогал или закрывал крышку ноута и тп\n    // https://developer.chrome.com/blog/page-lifecycle-api/\n    document.addEventListener('visibilitychange', recalcTimeout);\n    return () => {\n      window.clearTimeout(timeout);\n      document.removeEventListener('visibilitychange', recalcTimeout);\n    };\n  }, [document, listenDayChangesForUpdate, todayDate, window]);\n  return todayDate;\n}","map":{"version":3,"names":["React","differenceInMilliseconds","isSameDay","startOfTomorrow","useDOM","useTodayDate","listenDayChangesForUpdate","arguments","length","undefined","document","window","todayDate","setTodayDate","useState","Date","useEffect","setupTodaysDateRecalculationListener","timeout","recalcTimeout","visibilityState","now","timeToDayChange","clearTimeout","setTimeout","addEventListener","removeEventListener"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/hooks/useTodayDate.ts"],"sourcesContent":["import * as React from 'react';\nimport { differenceInMilliseconds, isSameDay, startOfTomorrow } from 'date-fns';\nimport { useDOM } from '../lib/dom';\n\n/**\n * Опционально обновляемая дата сегодняшнего дня\n *\n * Дата - сегодня (в соответствии с системным временем)\n *\n * Часы, минуты, секунды, миллисекунды - произвольные\n *\n * @param listenDayChangesForUpdate - флаг по которому определяется, будет ли создаваться подписка на смену календарного дня\n */\nexport function useTodayDate(listenDayChangesForUpdate = false): Date {\n  const { document, window } = useDOM();\n  const [todayDate, setTodayDate] = React.useState(() => new Date());\n\n  React.useEffect(\n    function setupTodaysDateRecalculationListener() {\n      if (!listenDayChangesForUpdate || !document || !window) {\n        return;\n      }\n\n      let timeout: number | undefined = undefined;\n\n      const recalcTimeout = () => {\n        if (document.visibilityState === 'visible') {\n          const now = new Date();\n\n          const timeToDayChange = differenceInMilliseconds(startOfTomorrow(), now);\n\n          // Удаляем старый таймаут\n          window.clearTimeout(timeout);\n\n          // Создаем новый таймаут\n          timeout = window.setTimeout(() => {\n            setTodayDate(new Date());\n          }, timeToDayChange);\n\n          // Если todayDate не обновился в таймаут - обновить при заходе на вкладку\n          if (!isSameDay(todayDate, now)) {\n            setTodayDate(now);\n          }\n        }\n      };\n\n      recalcTimeout();\n\n      // Создаем слушатель visibilitychange, чтобы предотвратить пропуск обновления стейта после заморозки вкладки\n      // Если человек ее долго не трогал или закрывал крышку ноута и тп\n      // https://developer.chrome.com/blog/page-lifecycle-api/\n      document.addEventListener('visibilitychange', recalcTimeout);\n\n      return () => {\n        window.clearTimeout(timeout);\n        document.removeEventListener('visibilitychange', recalcTimeout);\n      };\n    },\n    [document, listenDayChangesForUpdate, todayDate, window],\n  );\n\n  return todayDate;\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,wBAAwB,EAAEC,SAAS,EAAEC,eAAe,QAAQ;AACrE,SAASC,MAAM,QAAQ;AAEvB;;;;;;;;;AASA,OAAO,SAASC,aAAA,EAA8C;EAAA,IAAjCC,yBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,KAAK;EAC5D,MAAM;IAAEG,QAAQ;IAAEC;EAAM,CAAE,GAAGP,MAAA;EAC7B,MAAM,CAACQ,SAAA,EAAWC,YAAA,CAAa,GAAGb,KAAA,CAAMc,QAAQ,CAAC,MAAM,IAAIC,IAAA;EAE3Df,KAAA,CAAMgB,SAAS,CACb,SAASC,qCAAA;IACP,IAAI,CAACX,yBAAA,IAA6B,CAACI,QAAA,IAAY,CAACC,MAAA,EAAQ;MACtD;IACF;IAEA,IAAIO,OAAA,GAA8BT,SAAA;IAElC,MAAMU,aAAA,GAAgBA,CAAA;MACpB,IAAIT,QAAA,CAASU,eAAe,KAAK,WAAW;QAC1C,MAAMC,GAAA,GAAM,IAAIN,IAAA;QAEhB,MAAMO,eAAA,GAAkBrB,wBAAA,CAAyBE,eAAA,IAAmBkB,GAAA;QAEpE;QACAV,MAAA,CAAOY,YAAY,CAACL,OAAA;QAEpB;QACAA,OAAA,GAAUP,MAAA,CAAOa,UAAU,CAAC;UAC1BX,YAAA,CAAa,IAAIE,IAAA;QACnB,GAAGO,eAAA;QAEH;QACA,IAAI,CAACpB,SAAA,CAAUU,SAAA,EAAWS,GAAA,GAAM;UAC9BR,YAAA,CAAaQ,GAAA;QACf;MACF;IACF;IAEAF,aAAA;IAEA;IACA;IACA;IACAT,QAAA,CAASe,gBAAgB,CAAC,oBAAoBN,aAAA;IAE9C,OAAO;MACLR,MAAA,CAAOY,YAAY,CAACL,OAAA;MACpBR,QAAA,CAASgB,mBAAmB,CAAC,oBAAoBP,aAAA;IACnD;EACF,GACA,CAACT,QAAA,EAAUJ,yBAAA,EAA2BM,SAAA,EAAWD,MAAA,CAAO;EAG1D,OAAOC,SAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}