{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useExternRef } from \"../../hooks/useExternRef.js\";\nimport { useGlobalOnClickOutside } from \"../../hooks/useGlobalOnClickOutside.js\";\nimport { Keys } from \"../../lib/accessibility.js\";\nimport { defaultFilterFn } from \"../../lib/select.js\";\nimport { ChipsInputBase } from \"../ChipsInputBase/ChipsInputBase.js\";\nimport { getNewOptionDataDefault, getOptionLabelDefault, getOptionValueDefault, renderChipDefault } from \"../ChipsInputBase/constants.js\";\nimport { CustomSelectDropdown } from \"../CustomSelectDropdown/CustomSelectDropdown.js\";\nimport { CustomSelectOption } from \"../CustomSelectOption/CustomSelectOption.js\";\nimport { DropdownIcon } from \"../DropdownIcon/DropdownIcon.js\";\nimport { Footnote } from \"../Typography/Footnote/Footnote.js\";\nimport { DEFAULT_EMPTY_TEXT, DEFAULT_SELECTED_BEHAVIOR, FOCUS_ACTION_NEXT, FOCUS_ACTION_PREV, isCreateNewOptionPreset, isEmptyOptionPreset, isNotServicePreset, renderOptionDefault } from \"./constants.js\";\nimport { useChipsSelect } from \"./useChipsSelect.js\";\nconst findIndexAfter = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n  if (startIndex >= options.length - 1) {\n    return -1;\n  }\n  return options.findIndex((option, i) => i > startIndex && (!isNotServicePreset(option) || !option.disabled));\n};\nconst findIndexBefore = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let endIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.length;\n  let result = -1;\n  if (endIndex <= 0) {\n    return result;\n  }\n  for (let i = endIndex - 1; i >= 0; i--) {\n    let option = options[i];\n    if (!isNotServicePreset(option) || !option.disabled) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n/**\n * @see https://vkcom.github.io/VKUI/#/ChipsSelect\n */\nexport const ChipsSelect = _param => {\n  var {\n      // FormFieldProps\n      id: labelledbyId,\n      getRootRef,\n      className,\n      status = 'default',\n      icon: dropdownIconProp,\n      onChangeStart,\n      // CustomSelectDropdownProps\n      options: optionsProp,\n      placement: placementProp = 'bottom',\n      closeAfterSelect = true,\n      selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n      emptyText = DEFAULT_EMPTY_TEXT,\n      creatable = false,\n      fetching = false,\n      dropdownAutoWidth,\n      forceDropdownPortal,\n      noMaxHeight = false,\n      filterFn = defaultFilterFn,\n      sortFn = false,\n      dropdownTestId,\n      onClose,\n      onOpen,\n      overscrollBehavior,\n      renderDropdown,\n      // ChipsInputProps\n      getRef,\n      value: valueProp,\n      defaultValue,\n      inputValue: inputValueProp,\n      defaultInputValue,\n      disabled,\n      readOnly,\n      getOptionValue = getOptionValueDefault,\n      getOptionLabel = getOptionLabelDefault,\n      getNewOptionData = getNewOptionDataDefault,\n      renderChip = renderChipDefault,\n      renderOption = renderOptionDefault,\n      onChange,\n      onFocus: onFocusProp,\n      onInputChange: onInputChangeProp,\n      onBlur: onBlurProp,\n      onKeyDown: onKeyDownProp,\n      dropdownOffsetDistance = 0,\n      allowClearButton,\n      clearButtonTestId\n    } = _param,\n    restProps = _object_without_properties(_param, [\"id\", \"getRootRef\", \"className\", \"status\", \"icon\", \"onChangeStart\", \"options\", \"placement\", \"closeAfterSelect\", \"selectedBehavior\", \"emptyText\", \"creatable\", \"fetching\", \"dropdownAutoWidth\", \"forceDropdownPortal\", \"noMaxHeight\", \"filterFn\", \"sortFn\", \"dropdownTestId\", \"onClose\", \"onOpen\", \"overscrollBehavior\", \"renderDropdown\", \"getRef\", \"value\", \"defaultValue\", \"inputValue\", \"defaultInputValue\", \"disabled\", \"readOnly\", \"getOptionValue\", \"getOptionLabel\", \"getNewOptionData\", \"renderChip\", \"renderOption\", \"onChange\", \"onFocus\", \"onInputChange\", \"onBlur\", \"onKeyDown\", \"dropdownOffsetDistance\", \"allowClearButton\", \"clearButtonTestId\"]);\n  const {\n    // Связано с ChipsInputProps\n    // option\n    value,\n    addOptionFromInput,\n    addOption,\n    removeOption,\n    clearOptions,\n    // input\n    inputRef: inputRefHook,\n    inputValue,\n    clearInput,\n    onInputChange,\n    // Связано с CustomSelectDropdownProps\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex\n  } = useChipsSelect({\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue,\n    onInputChange: onInputChangeProp,\n    // dropdown\n    options: optionsProp,\n    emptyText,\n    creatable,\n    filterFn,\n    sortFn,\n    selectedBehavior,\n    onClose,\n    onOpen,\n    // other\n    disabled\n  });\n  // Связано с ChipsInputProps\n  const rootRef = useExternRef(getRootRef);\n  const inputRef = useExternRef(getRef, inputRefHook);\n  // Связано с CustomSelectDropdownProps\n  const [dropdownVerticalPlacement, setDropdownVerticalPlacement] = React.useState(placementProp);\n  const onDropdownPlacementChange = React.useCallback(placement => {\n    if (placement.startsWith('top')) {\n      setDropdownVerticalPlacement('top');\n    } else if (placement.startsWith('bottom')) {\n      setDropdownVerticalPlacement('bottom');\n    }\n  }, []);\n  const dropdownId = React.useId();\n  const dropdownCurrentItemId = focusedOptionIndex !== null ? `${dropdownId}-${focusedOptionIndex}` : undefined;\n  const dropdownScrollBoxRef = React.useRef(null);\n  const handleFocus = event => {\n    if (onFocusProp) {\n      onFocusProp(event);\n    }\n    if (!readOnly) {\n      setOpened(true);\n      setFocusedOptionIndex(null);\n    }\n  };\n  const handleBlur = event => {\n    if (onBlurProp) {\n      onBlurProp(event);\n    }\n    // Не добавляем значение, если его нужно выбрать строго из списка\n    if (!readOnly && !event.defaultPrevented && !creatable) {\n      event.preventDefault();\n    }\n  };\n  const chipsSelectOptions = React.useRef([]).current;\n  const scrollToElement = function (index) {\n    let center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const dropdown = dropdownScrollBoxRef.current;\n    const item = chipsSelectOptions[index];\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (!item || !dropdown) {\n      return;\n    }\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n    /* istanbul ignore next: нет представления как воспроизвести */\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n  const focusOptionByIndex = (index, oldIndex) => {\n    if (index === oldIndex) {\n      /* istanbul ignore next: нет представления как воспроизвести */return;\n    }\n    const option = options[index];\n    if (isNotServicePreset(option) && option.disabled) {\n      return;\n    }\n    scrollToElement(index);\n    setFocusedOptionIndex(index);\n  };\n  const focusOption = (nextIndex, type) => {\n    let index = nextIndex === null ? -1 : nextIndex;\n    if (type === FOCUS_ACTION_NEXT) {\n      const nextIndex = findIndexAfter(options, index);\n      index = nextIndex === -1 ? findIndexAfter(options) : nextIndex; // Следующий за index или первый валидный до index\n    } else if (type === FOCUS_ACTION_PREV) {\n      const beforeIndex = findIndexBefore(options, index);\n      index = beforeIndex === -1 ? findIndexBefore(options) : beforeIndex; // Предшествующий index или последний валидный после index\n    }\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n  const handleKeyDown = event => {\n    if (onKeyDownProp) {\n      onKeyDownProp(event);\n    }\n    if (event.defaultPrevented || readOnly) {\n      return;\n    }\n    switch (event.key) {\n      case Keys.ARROW_UP:\n      case Keys.ARROW_DOWN:\n        event.preventDefault();\n        if (!opened) {\n          setOpened(true);\n          focusOption(null, FOCUS_ACTION_NEXT);\n        } else {\n          focusOption(focusedOptionIndex, event.key === Keys.ARROW_UP ? FOCUS_ACTION_PREV : FOCUS_ACTION_NEXT);\n        }\n        break;\n      case Keys.ENTER:\n        {\n          if (!opened) {\n            break;\n          }\n          if (focusedOptionIndex != null) {\n            const foundOption = options[focusedOptionIndex];\n            if (foundOption && isNotServicePreset(foundOption)) {\n              event.preventDefault();\n              if (onChangeStart) {\n                onChangeStart(event, foundOption);\n              }\n              addOption(foundOption);\n              setFocusedOptionIndex(null);\n              clearInput();\n              if (closeAfterSelect) {\n                setOpened(false);\n              }\n              break;\n            }\n          }\n          if (!creatable) {\n            event.preventDefault();\n          }\n          break;\n        }\n      case Keys.ESCAPE:\n      case Keys.TAB:\n        if (opened) {\n          setOpened(false);\n        }\n    }\n  };\n  React.useEffect(() => {\n    if (focusedOptionIndex === null) {\n      setFocusedOption(null);\n    } else {\n      const foundFocusedOptionIndex = options[focusedOptionIndex];\n      if (foundFocusedOptionIndex && isNotServicePreset(foundFocusedOptionIndex)) {\n        setFocusedOption(foundFocusedOptionIndex);\n      }\n    }\n  }, [options, focusedOptionIndex, setFocusedOption]);\n  const onDropdownMouseLeave = React.useCallback(() => {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n  const handleClickOutside = React.useCallback(() => {\n    setOpened(false);\n  }, [setOpened]);\n  useGlobalOnClickOutside(handleClickOutside, opened ? rootRef : null, opened ? dropdownScrollBoxRef : null);\n  const onDropdownIconClick = React.useCallback(e => {\n    if (opened) {\n      e.preventDefault();\n      setOpened(false);\n    }\n  }, [opened, setOpened]);\n  const dropdownContent = React.useMemo(() => {\n    const defaultDropdownContent = options.map((option, index) => {\n      const dropdownItemId = `${dropdownId}-${index}`;\n      if (isEmptyOptionPreset(option)) {\n        return /*#__PURE__*/_jsx(Footnote, {\n          className: \"vkuiChipsSelect__empty\",\n          children: option.placeholder\n        }, \"empty-text\");\n      }\n      if (isCreateNewOptionPreset(option)) {\n        return /*#__PURE__*/_jsx(CustomSelectOption, {\n          id: dropdownItemId,\n          hovered: focusedOptionIndex === index,\n          onMouseDown: () => addOptionFromInput(inputValue),\n          onMouseEnter: () => setFocusedOptionIndex(index),\n          children: option.actionText\n        }, \"create-new-option\");\n      }\n      return /*#__PURE__*/_jsx(React.Fragment, {\n        children: renderOption({\n          id: dropdownItemId,\n          disabled: option.disabled,\n          hovered: focusedOption ? getOptionValue(option) === getOptionValue(focusedOption) : false,\n          children: option.label,\n          selected: !!value.find(selectedOption => getOptionValue(selectedOption) === getOptionValue(option)),\n          getRootRef(node) {\n            if (node) {\n              chipsSelectOptions[index] = node;\n            }\n          },\n          onMouseDown(event) {\n            if (option.disabled) {\n              return;\n            }\n            if (onChangeStart) {\n              onChangeStart(event, option);\n            }\n            if (!event.defaultPrevented) {\n              closeAfterSelect && setOpened(false);\n              addOption(option);\n              clearInput();\n            }\n          },\n          onMouseEnter() {\n            setFocusedOptionIndex(index);\n          }\n        }, option)\n      }, `${typeof option.value}-${option.value}`);\n    });\n    if (renderDropdown) {\n      return renderDropdown({\n        defaultDropdownContent\n      });\n    }\n    return defaultDropdownContent;\n  }, [addOption, addOptionFromInput, chipsSelectOptions, clearInput, closeAfterSelect, dropdownId, focusedOption, focusedOptionIndex, getOptionValue, inputValue, onChangeStart, options, renderDropdown, renderOption, setFocusedOptionIndex, setOpened, value]);\n  const openedClassNames = React.useMemo(() => opened && dropdownOffsetDistance === 0 && (dropdownVerticalPlacement.includes('top') ? \"vkuiChipsSelect__popUp\" : \"vkuiChipsSelect__popDown\") || undefined, [dropdownOffsetDistance, opened, dropdownVerticalPlacement]);\n  const clearButtonShown = allowClearButton && (!!value.length || !!inputValue.length);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ChipsInputBase, _object_spread_props(_object_spread({}, restProps), {\n      disabled: disabled,\n      readOnly: readOnly,\n      clearButtonShown: clearButtonShown,\n      clearButtonTestId: clearButtonTestId,\n      // FormFieldProps\n      id: labelledbyId,\n      getRootRef: rootRef,\n      className: classNames(\"vkuiChipsSelect__host\", openedClassNames, className),\n      status: status,\n      after: dropdownIconProp || /*#__PURE__*/_jsx(DropdownIcon, {\n        opened: opened,\n        onClick: onDropdownIconClick,\n        className: classNames(\"vkuiChipsSelect__dropdownIcon\", clearButtonShown && \"vkuiChipsSelect__dropdownIconWithOffset\")\n      }),\n      // option\n      value: value,\n      onAddChipOption: addOptionFromInput,\n      onRemoveChipOption: removeOption,\n      renderChip: renderChip,\n      onClear: clearOptions,\n      // input\n      getRef: inputRef,\n      inputValue: inputValue,\n      onInputChange: onInputChange,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onKeyDown: handleKeyDown,\n      // a11y\n      role: \"combobox\",\n      \"aria-expanded\": opened,\n      \"aria-autocomplete\": \"list\",\n      \"aria-controls\": opened ? dropdownId : undefined,\n      \"aria-activedescendant\": opened ? dropdownCurrentItemId : undefined,\n      \"aria-haspopup\": \"listbox\"\n    })), opened && /*#__PURE__*/_jsx(CustomSelectDropdown, {\n      \"data-testid\": dropdownTestId,\n      targetRef: rootRef,\n      placement: dropdownVerticalPlacement,\n      scrollBoxRef: dropdownScrollBoxRef,\n      onPlacementChange: onDropdownPlacementChange,\n      onMouseLeave: onDropdownMouseLeave,\n      fetching: fetching,\n      autoWidth: dropdownAutoWidth,\n      forcePortal: forceDropdownPortal,\n      noMaxHeight: noMaxHeight,\n      offsetDistance: dropdownOffsetDistance,\n      overscrollBehavior: overscrollBehavior,\n      // a11y\n      id: dropdownId,\n      role: \"listbox\",\n      \"aria-labelledby\": labelledbyId,\n      children: dropdownContent\n    })]\n  });\n};","map":{"version":3,"names":["React","classNames","useExternRef","useGlobalOnClickOutside","Keys","defaultFilterFn","ChipsInputBase","getNewOptionDataDefault","getOptionLabelDefault","getOptionValueDefault","renderChipDefault","CustomSelectDropdown","CustomSelectOption","DropdownIcon","Footnote","DEFAULT_EMPTY_TEXT","DEFAULT_SELECTED_BEHAVIOR","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","isCreateNewOptionPreset","isEmptyOptionPreset","isNotServicePreset","renderOptionDefault","useChipsSelect","findIndexAfter","options","arguments","length","undefined","startIndex","findIndex","option","i","disabled","findIndexBefore","endIndex","result","ChipsSelect","_param","id","labelledbyId","getRootRef","className","status","icon","dropdownIconProp","onChangeStart","optionsProp","placement","placementProp","closeAfterSelect","selectedBehavior","emptyText","creatable","fetching","dropdownAutoWidth","forceDropdownPortal","noMaxHeight","filterFn","sortFn","dropdownTestId","onClose","onOpen","overscrollBehavior","renderDropdown","getRef","value","valueProp","defaultValue","inputValue","inputValueProp","defaultInputValue","readOnly","getOptionValue","getOptionLabel","getNewOptionData","renderChip","renderOption","onChange","onFocus","onFocusProp","onInputChange","onInputChangeProp","onBlur","onBlurProp","onKeyDown","onKeyDownProp","dropdownOffsetDistance","allowClearButton","clearButtonTestId","restProps","_object_without_properties","addOptionFromInput","addOption","removeOption","clearOptions","inputRef","inputRefHook","clearInput","opened","setOpened","focusedOption","focusedOptionIndex","setFocusedOption","setFocusedOptionIndex","rootRef","dropdownVerticalPlacement","setDropdownVerticalPlacement","useState","onDropdownPlacementChange","useCallback","startsWith","dropdownId","useId","dropdownCurrentItemId","dropdownScrollBoxRef","useRef","handleFocus","event","handleBlur","defaultPrevented","preventDefault","chipsSelectOptions","current","scrollToElement","index","center","dropdown","item","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","oldIndex","focusOption","nextIndex","type","beforeIndex","handleKeyDown","key","ARROW_UP","ARROW_DOWN","ENTER","foundOption","ESCAPE","TAB","useEffect","foundFocusedOptionIndex","onDropdownMouseLeave","handleClickOutside","onDropdownIconClick","e","dropdownContent","useMemo","defaultDropdownContent","map","dropdownItemId","_jsx","placeholder","hovered","onMouseDown","onMouseEnter","actionText","Fragment","children","label","selected","find","selectedOption","node","openedClassNames","includes","clearButtonShown","_jsxs","_Fragment","_object_spread_props","_object_spread","after","onClick","onAddChipOption","onRemoveChipOption","onClear","role","targetRef","scrollBoxRef","onPlacementChange","onMouseLeave","autoWidth","forcePortal","offsetDistance"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/ChipsSelect/ChipsSelect.tsx"],"sourcesContent":["'use client';\n\nimport { type MouseEventHandler } from 'react';\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useGlobalOnClickOutside } from '../../hooks/useGlobalOnClickOutside';\nimport { Keys } from '../../lib/accessibility';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn } from '../../lib/select';\nimport { ChipsInputBase } from '../ChipsInputBase/ChipsInputBase';\nimport {\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n  renderChipDefault,\n} from '../ChipsInputBase/constants';\nimport type { ChipOption, ChipsInputBaseProps } from '../ChipsInputBase/types';\nimport {\n  CustomSelectDropdown,\n  type CustomSelectDropdownProps,\n} from '../CustomSelectDropdown/CustomSelectDropdown';\nimport {\n  CustomSelectOption,\n  type CustomSelectOptionProps,\n} from '../CustomSelectOption/CustomSelectOption';\nimport { DropdownIcon } from '../DropdownIcon/DropdownIcon';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport {\n  DEFAULT_EMPTY_TEXT,\n  DEFAULT_SELECTED_BEHAVIOR,\n  FOCUS_ACTION_NEXT,\n  FOCUS_ACTION_PREV,\n  isCreateNewOptionPreset,\n  isEmptyOptionPreset,\n  isNotServicePreset,\n  renderOptionDefault,\n} from './constants';\nimport type { FocusActionType, OptionPreset } from './types';\nimport { useChipsSelect, type UseChipsSelectProps } from './useChipsSelect';\nimport styles from './ChipsSelect.module.css';\n\nconst findIndexAfter = <O extends ChipOption>(\n  options: Array<OptionPreset<O>> = [],\n  startIndex = -1,\n) => {\n  if (startIndex >= options.length - 1) {\n    return -1;\n  }\n  return options.findIndex(\n    (option, i) => i > startIndex && (!isNotServicePreset(option) || !option.disabled),\n  );\n};\n\nconst findIndexBefore = <O extends ChipOption>(\n  options: Array<OptionPreset<O>> = [],\n  endIndex: number = options.length,\n) => {\n  let result = -1;\n  if (endIndex <= 0) {\n    return result;\n  }\n  for (let i = endIndex - 1; i >= 0; i--) {\n    let option = options[i];\n\n    if (!isNotServicePreset(option) || !option.disabled) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nexport interface ChipsSelectProps<O extends ChipOption>\n  extends ChipsInputBaseProps<O>,\n    UseChipsSelectProps<O>,\n    Pick<FormFieldProps, 'status' | 'mode' | 'before'>,\n    Pick<CustomSelectDropdownProps, 'overscrollBehavior'> {\n  placement?: 'top' | 'bottom';\n  /**\n   * Отрисовка Spinner вместо списка опций в выпадающем списке\n   */\n  fetching?: boolean;\n  /**\n   * Закрытие выпадающего списка после выбора элемента\n   */\n  closeAfterSelect?: boolean;\n  /**\n   * Ширина раскрывающегося списка зависит от контента\n   */\n  dropdownAutoWidth?: boolean;\n  /**\n   * Принудительно использовать портал.\n   */\n  forceDropdownPortal?: boolean;\n  /**\n   * Передает атрибут `data-testid` для дропдауна.\n   */\n  dropdownTestId?: string;\n  /**\n   * Иконка раскрывающегося списка\n   */\n  icon?: React.ReactNode;\n  /**\n   * Добавляет значение в список на событие `onBlur` (использовать вместе с `creatable`)\n   */\n  addOnBlur?: boolean;\n  /**\n   * Отключает максимальную высоту по умолчанию\n   */\n  noMaxHeight?: boolean;\n\n  renderOption?: (props: CustomSelectOptionProps, option: O) => React.ReactNode;\n  /**\n   * Рендер-проп для кастомного рендера содержимого дропдауна.\n   * В `defaultDropdownContent` содержится список опций.\n   */\n  renderDropdown?: ({\n    defaultDropdownContent,\n  }: {\n    defaultDropdownContent: React.ReactNode;\n  }) => React.ReactNode;\n  /**\n   * Событие срабатывающее перед onChange\n   */\n  onChangeStart?: (event: React.MouseEvent | React.KeyboardEvent, option: O) => void;\n\n  /**\n   * Отступ от выпадающего списка\n   */\n  dropdownOffsetDistance?: number;\n\n  /**\n   * Если `true`, то справа будет отображаться кнопка для очистки значения\n   */\n  allowClearButton?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/ChipsSelect\n */\nexport const ChipsSelect = <Option extends ChipOption>({\n  // FormFieldProps\n  id: labelledbyId,\n  getRootRef,\n  className,\n  status = 'default',\n  icon: dropdownIconProp,\n  onChangeStart,\n\n  // CustomSelectDropdownProps\n  options: optionsProp,\n  placement: placementProp = 'bottom',\n  closeAfterSelect = true,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  creatable = false,\n  fetching = false,\n  dropdownAutoWidth,\n  forceDropdownPortal,\n  noMaxHeight = false,\n  filterFn = defaultFilterFn,\n  sortFn = false,\n  dropdownTestId,\n  onClose,\n  onOpen,\n  overscrollBehavior,\n  renderDropdown,\n\n  // ChipsInputProps\n  getRef,\n  value: valueProp,\n  defaultValue,\n  inputValue: inputValueProp,\n  defaultInputValue,\n  disabled,\n  readOnly,\n  getOptionValue = getOptionValueDefault,\n  getOptionLabel = getOptionLabelDefault,\n  getNewOptionData = getNewOptionDataDefault,\n  renderChip = renderChipDefault,\n  renderOption = renderOptionDefault,\n  onChange,\n  onFocus: onFocusProp,\n  onInputChange: onInputChangeProp,\n  onBlur: onBlurProp,\n  onKeyDown: onKeyDownProp,\n  dropdownOffsetDistance = 0,\n  allowClearButton,\n  clearButtonTestId,\n  ...restProps\n}: ChipsSelectProps<Option>): React.ReactNode => {\n  const {\n    // Связано с ChipsInputProps\n    // option\n    value,\n    addOptionFromInput,\n    addOption,\n    removeOption,\n    clearOptions,\n    // input\n    inputRef: inputRefHook,\n    inputValue,\n    clearInput,\n    onInputChange,\n\n    // Связано с CustomSelectDropdownProps\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  } = useChipsSelect({\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue,\n    onInputChange: onInputChangeProp,\n\n    // dropdown\n    options: optionsProp,\n    emptyText,\n    creatable,\n    filterFn,\n    sortFn,\n    selectedBehavior,\n    onClose,\n    onOpen,\n\n    // other\n    disabled,\n  });\n\n  // Связано с ChipsInputProps\n  const rootRef = useExternRef(getRootRef);\n  const inputRef = useExternRef(getRef, inputRefHook);\n\n  // Связано с CustomSelectDropdownProps\n  const [dropdownVerticalPlacement, setDropdownVerticalPlacement] = React.useState<\n    'top' | 'bottom'\n  >(placementProp);\n\n  const onDropdownPlacementChange = React.useCallback((placement: Placement) => {\n    if (placement.startsWith('top')) {\n      setDropdownVerticalPlacement('top');\n    } else if (placement.startsWith('bottom')) {\n      setDropdownVerticalPlacement('bottom');\n    }\n  }, []);\n\n  const dropdownId = React.useId();\n  const dropdownCurrentItemId =\n    focusedOptionIndex !== null ? `${dropdownId}-${focusedOptionIndex}` : undefined;\n  const dropdownScrollBoxRef = React.useRef<HTMLDivElement>(null);\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onFocusProp) {\n      onFocusProp(event);\n    }\n\n    if (!readOnly) {\n      setOpened(true);\n      setFocusedOptionIndex(null);\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlurProp) {\n      onBlurProp(event);\n    }\n\n    // Не добавляем значение, если его нужно выбрать строго из списка\n    if (!readOnly && !event.defaultPrevented && !creatable) {\n      event.preventDefault();\n    }\n  };\n\n  const chipsSelectOptions = React.useRef<HTMLElement[]>([]).current;\n\n  const scrollToElement = (index: number, center = false) => {\n    const dropdown = dropdownScrollBoxRef.current;\n    const item = chipsSelectOptions[index];\n\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    /* istanbul ignore next: нет представления как воспроизвести */\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n\n  const focusOptionByIndex = (index: number, oldIndex: number | null) => {\n    if (index === oldIndex) {\n      /* istanbul ignore next: нет представления как воспроизвести */\n      return;\n    }\n\n    const option = options[index];\n\n    if (isNotServicePreset(option) && option.disabled) {\n      return;\n    }\n\n    scrollToElement(index);\n    setFocusedOptionIndex(index);\n  };\n\n  const focusOption = (nextIndex: number | null, type: FocusActionType) => {\n    let index = nextIndex === null ? -1 : nextIndex;\n\n    if (type === FOCUS_ACTION_NEXT) {\n      const nextIndex = findIndexAfter(options, index);\n      index = nextIndex === -1 ? findIndexAfter(options) : nextIndex; // Следующий за index или первый валидный до index\n    } else if (type === FOCUS_ACTION_PREV) {\n      const beforeIndex = findIndexBefore(options, index);\n      index = beforeIndex === -1 ? findIndexBefore(options) : beforeIndex; // Предшествующий index или последний валидный после index\n    }\n\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (onKeyDownProp) {\n      onKeyDownProp(event);\n    }\n\n    if (event.defaultPrevented || readOnly) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ARROW_UP:\n      case Keys.ARROW_DOWN:\n        event.preventDefault();\n\n        if (!opened) {\n          setOpened(true);\n          focusOption(null, FOCUS_ACTION_NEXT);\n        } else {\n          focusOption(\n            focusedOptionIndex,\n            event.key === Keys.ARROW_UP ? FOCUS_ACTION_PREV : FOCUS_ACTION_NEXT,\n          );\n        }\n        break;\n      case Keys.ENTER: {\n        if (!opened) {\n          break;\n        }\n        if (focusedOptionIndex != null) {\n          const foundOption = options[focusedOptionIndex];\n          if (foundOption && isNotServicePreset(foundOption)) {\n            event.preventDefault();\n\n            if (onChangeStart) {\n              onChangeStart(event, foundOption);\n            }\n\n            addOption(foundOption);\n            setFocusedOptionIndex(null);\n            clearInput();\n            if (closeAfterSelect) {\n              setOpened(false);\n            }\n\n            break;\n          }\n        }\n\n        if (!creatable) {\n          event.preventDefault();\n        }\n        break;\n      }\n      case Keys.ESCAPE:\n      case Keys.TAB:\n        if (opened) {\n          setOpened(false);\n        }\n    }\n  };\n\n  React.useEffect(() => {\n    if (focusedOptionIndex === null) {\n      setFocusedOption(null);\n    } else {\n      const foundFocusedOptionIndex = options[focusedOptionIndex];\n\n      if (foundFocusedOptionIndex && isNotServicePreset(foundFocusedOptionIndex)) {\n        setFocusedOption(foundFocusedOptionIndex);\n      }\n    }\n  }, [options, focusedOptionIndex, setFocusedOption]);\n\n  const onDropdownMouseLeave = React.useCallback(() => {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n\n  const handleClickOutside = React.useCallback(() => {\n    setOpened(false);\n  }, [setOpened]);\n\n  useGlobalOnClickOutside(\n    handleClickOutside,\n    opened ? rootRef : null,\n    opened ? dropdownScrollBoxRef : null,\n  );\n\n  const onDropdownIconClick: MouseEventHandler<SVGSVGElement> = React.useCallback(\n    (e) => {\n      if (opened) {\n        e.preventDefault();\n        setOpened(false);\n      }\n    },\n    [opened, setOpened],\n  );\n\n  const dropdownContent = React.useMemo(() => {\n    const defaultDropdownContent = options.map((option, index) => {\n      const dropdownItemId = `${dropdownId}-${index}`;\n\n      if (isEmptyOptionPreset(option)) {\n        return (\n          <Footnote key=\"empty-text\" className={styles.empty}>\n            {option.placeholder}\n          </Footnote>\n        );\n      }\n      if (isCreateNewOptionPreset(option)) {\n        return (\n          <CustomSelectOption\n            key=\"create-new-option\"\n            id={dropdownItemId}\n            hovered={focusedOptionIndex === index}\n            onMouseDown={() => addOptionFromInput(inputValue)}\n            onMouseEnter={() => setFocusedOptionIndex(index)}\n          >\n            {option.actionText}\n          </CustomSelectOption>\n        );\n      }\n      return (\n        <React.Fragment key={`${typeof option.value}-${option.value}`}>\n          {renderOption(\n            {\n              id: dropdownItemId,\n              disabled: option.disabled,\n              hovered: focusedOption\n                ? getOptionValue(option) === getOptionValue(focusedOption)\n                : false,\n              children: option.label,\n              selected: !!value.find(\n                (selectedOption: Option) =>\n                  getOptionValue(selectedOption) === getOptionValue(option),\n              ),\n              getRootRef(node) {\n                if (node) {\n                  chipsSelectOptions[index] = node;\n                }\n              },\n              onMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n                if (option.disabled) {\n                  return;\n                }\n                if (onChangeStart) {\n                  onChangeStart(event, option);\n                }\n\n                if (!event.defaultPrevented) {\n                  closeAfterSelect && setOpened(false);\n                  addOption(option);\n                  clearInput();\n                }\n              },\n              onMouseEnter() {\n                setFocusedOptionIndex(index);\n              },\n            },\n            option,\n          )}\n        </React.Fragment>\n      );\n    });\n\n    if (renderDropdown) {\n      return renderDropdown({\n        defaultDropdownContent,\n      });\n    }\n    return defaultDropdownContent;\n  }, [\n    addOption,\n    addOptionFromInput,\n    chipsSelectOptions,\n    clearInput,\n    closeAfterSelect,\n    dropdownId,\n    focusedOption,\n    focusedOptionIndex,\n    getOptionValue,\n    inputValue,\n    onChangeStart,\n    options,\n    renderDropdown,\n    renderOption,\n    setFocusedOptionIndex,\n    setOpened,\n    value,\n  ]);\n\n  const openedClassNames = React.useMemo(\n    () =>\n      (opened &&\n        dropdownOffsetDistance === 0 &&\n        (dropdownVerticalPlacement.includes('top') ? styles.popUp : styles.popDown)) ||\n      undefined,\n    [dropdownOffsetDistance, opened, dropdownVerticalPlacement],\n  );\n\n  const clearButtonShown = allowClearButton && (!!value.length || !!inputValue.length);\n\n  return (\n    <>\n      <ChipsInputBase\n        {...restProps}\n        disabled={disabled}\n        readOnly={readOnly}\n        clearButtonShown={clearButtonShown}\n        clearButtonTestId={clearButtonTestId}\n        // FormFieldProps\n        id={labelledbyId}\n        getRootRef={rootRef}\n        className={classNames(styles.host, openedClassNames, className)}\n        status={status}\n        after={\n          dropdownIconProp || (\n            <DropdownIcon\n              opened={opened}\n              onClick={onDropdownIconClick}\n              className={classNames(\n                styles.dropdownIcon,\n                clearButtonShown && styles.dropdownIconWithOffset,\n              )}\n            />\n          )\n        }\n        // option\n        value={value}\n        onAddChipOption={addOptionFromInput}\n        onRemoveChipOption={removeOption}\n        renderChip={renderChip}\n        onClear={clearOptions}\n        // input\n        getRef={inputRef}\n        inputValue={inputValue}\n        onInputChange={onInputChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        // a11y\n        role=\"combobox\"\n        aria-expanded={opened}\n        aria-autocomplete=\"list\"\n        aria-controls={opened ? dropdownId : undefined}\n        aria-activedescendant={opened ? dropdownCurrentItemId : undefined}\n        aria-haspopup=\"listbox\"\n      />\n      {opened && (\n        <CustomSelectDropdown\n          data-testid={dropdownTestId}\n          targetRef={rootRef}\n          placement={dropdownVerticalPlacement}\n          scrollBoxRef={dropdownScrollBoxRef}\n          onPlacementChange={onDropdownPlacementChange}\n          onMouseLeave={onDropdownMouseLeave}\n          fetching={fetching}\n          autoWidth={dropdownAutoWidth}\n          forcePortal={forceDropdownPortal}\n          noMaxHeight={noMaxHeight}\n          offsetDistance={dropdownOffsetDistance}\n          overscrollBehavior={overscrollBehavior}\n          // a11y\n          id={dropdownId}\n          role=\"listbox\"\n          aria-labelledby={labelledbyId}\n        >\n          {dropdownContent}\n        </CustomSelectDropdown>\n      )}\n    </>\n  );\n};\n"],"mappings":"AAAA;;;;;;AAGA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAC7B,SAASC,uBAAuB,QAAQ;AACxC,SAASC,IAAI,QAAQ;AAErB,SAASC,eAAe,QAAQ;AAChC,SAASC,cAAc,QAAQ;AAC/B,SACEC,uBAAuB,EACvBC,qBAAqB,EACrBC,qBAAqB,EACrBC,iBAAiB,QACZ;AAEP,SACEC,oBAAoB,QAEf;AACP,SACEC,kBAAkB,QAEb;AACP,SAASC,YAAY,QAAQ;AAE7B,SAASC,QAAQ,QAAQ;AACzB,SACEC,kBAAkB,EAClBC,yBAAyB,EACzBC,iBAAiB,EACjBC,iBAAiB,EACjBC,uBAAuB,EACvBC,mBAAmB,EACnBC,kBAAkB,EAClBC,mBAAmB,QACd;AAEP,SAASC,cAAc,QAAkC;AAGzD,MAAMC,cAAA,GAAiB,SAAAA,CAAA,EAEN;EAAA,IADfC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkC,EAAE;EAAA,IACpCG,UAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAa,CAAC,CAAC;EAEf,IAAIG,UAAA,IAAcJ,OAAA,CAAQE,MAAM,GAAG,GAAG;IACpC,OAAO,CAAC;EACV;EACA,OAAOF,OAAA,CAAQK,SAAS,CACtB,CAACC,MAAA,EAAQC,CAAA,KAAMA,CAAA,GAAIH,UAAA,KAAe,CAACR,kBAAA,CAAmBU,MAAA,KAAW,CAACA,MAAA,CAAOE,QAAQ,CAAD;AAEpF;AAEA,MAAMC,eAAA,GAAkB,SAAAA,CAAA,EAEW;EAAA,IADjCT,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkC,EAAE;EAAA,IACpCS,QAAA,GAAAT,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmBD,OAAA,CAAQE,MAAM;EAEjC,IAAIS,MAAA,GAAS,CAAC;EACd,IAAID,QAAA,IAAY,GAAG;IACjB,OAAOC,MAAA;EACT;EACA,KAAK,IAAIJ,CAAA,GAAIG,QAAA,GAAW,GAAGH,CAAA,IAAK,GAAGA,CAAA,IAAK;IACtC,IAAID,MAAA,GAASN,OAAO,CAACO,CAAA,CAAE;IAEvB,IAAI,CAACX,kBAAA,CAAmBU,MAAA,KAAW,CAACA,MAAA,CAAOE,QAAQ,EAAE;MACnDG,MAAA,GAASJ,CAAA;MACT;IACF;EACF;EACA,OAAOI,MAAA;AACT;AAmEA;;;AAGA,OAAO,MAAMC,WAAA,GAAcC,MAAA;MAA4B;MACrD;MACAC,EAAA,EAAIC,YAAY;MAChBC,UAAU;MACVC,SAAS;MACTC,MAAA,GAAS,SAAS;MAClBC,IAAA,EAAMC,gBAAgB;MACtBC,aAAa;MAEb;MACArB,OAAA,EAASsB,WAAW;MACpBC,SAAA,EAAWC,aAAA,GAAgB,QAAQ;MACnCC,gBAAA,GAAmB,IAAI;MACvBC,gBAAA,GAAmBnC,yBAAyB;MAC5CoC,SAAA,GAAYrC,kBAAkB;MAC9BsC,SAAA,GAAY,KAAK;MACjBC,QAAA,GAAW,KAAK;MAChBC,iBAAiB;MACjBC,mBAAmB;MACnBC,WAAA,GAAc,KAAK;MACnBC,QAAA,GAAWrD,eAAe;MAC1BsD,MAAA,GAAS,KAAK;MACdC,cAAc;MACdC,OAAO;MACPC,MAAM;MACNC,kBAAkB;MAClBC,cAAc;MAEd;MACAC,MAAM;MACNC,KAAA,EAAOC,SAAS;MAChBC,YAAY;MACZC,UAAA,EAAYC,cAAc;MAC1BC,iBAAiB;MACjBtC,QAAQ;MACRuC,QAAQ;MACRC,cAAA,GAAiBhE,qBAAqB;MACtCiE,cAAA,GAAiBlE,qBAAqB;MACtCmE,gBAAA,GAAmBpE,uBAAuB;MAC1CqE,UAAA,GAAalE,iBAAiB;MAC9BmE,YAAA,GAAevD,mBAAmB;MAClCwD,QAAQ;MACRC,OAAA,EAASC,WAAW;MACpBC,aAAA,EAAeC,iBAAiB;MAChCC,MAAA,EAAQC,UAAU;MAClBC,SAAA,EAAWC,aAAa;MACxBC,sBAAA,GAAyB,CAAC;MAC1BC,gBAAgB;MAChBC;IAAiB,CAEQ,GAAAnD,MAAA;IADtBoD,SAAA,GAAAC,0BAAA,CAAArD,MAAA,GA/CH,MACA,cACA,aACA,UACA,QACA,iBAGA,WACA,aACA,oBACA,oBACA,aACA,aACA,YACA,qBACA,uBACA,eACA,YACA,UACA,kBACA,WACA,UACA,sBACA,kBAGA,UACA,SACA,gBACA,cACA,qBACA,YACA,YACA,kBACA,kBACA,oBACA,cACA,gBACA,YACA,WACA,iBACA,UACA,aACA,0BACA,oBACA,oB;EAGA,MAAM;IACJ;IACA;IACA4B,KAAK;IACL0B,kBAAkB;IAClBC,SAAS;IACTC,YAAY;IACZC,YAAY;IACZ;IACAC,QAAA,EAAUC,YAAY;IACtB5B,UAAU;IACV6B,UAAU;IACVjB,aAAa;IAEb;IACAxD,OAAO;IACP0E,MAAM;IACNC,SAAS;IACTC,aAAa;IACbC,kBAAkB;IAClBC,gBAAgB;IAChBC;EAAqB,CACtB,GAAGjF,cAAA,CAAe;IACjB;IACA2C,KAAA,EAAOC,SAAA;IACPC,YAAA;IACAU,QAAA;IACAL,cAAA;IACAC,cAAA;IACAC,gBAAA;IAEA;IACAN,UAAA,EAAYC,cAAA;IACZC,iBAAA;IACAU,aAAA,EAAeC,iBAAA;IAEf;IACAzD,OAAA,EAASsB,WAAA;IACTK,SAAA;IACAC,SAAA;IACAK,QAAA;IACAC,MAAA;IACAR,gBAAA;IACAU,OAAA;IACAC,MAAA;IAEA;IACA7B;EACF;EAEA;EACA,MAAMwE,OAAA,GAAUvG,YAAA,CAAauC,UAAA;EAC7B,MAAMuD,QAAA,GAAW9F,YAAA,CAAa+D,MAAA,EAAQgC,YAAA;EAEtC;EACA,MAAM,CAACS,yBAAA,EAA2BC,4BAAA,CAA6B,GAAG3G,KAAA,CAAM4G,QAAQ,CAE9E3D,aAAA;EAEF,MAAM4D,yBAAA,GAA4B7G,KAAA,CAAM8G,WAAW,CAAE9D,SAAA;IACnD,IAAIA,SAAA,CAAU+D,UAAU,CAAC,QAAQ;MAC/BJ,4BAAA,CAA6B;IAC/B,OAAO,IAAI3D,SAAA,CAAU+D,UAAU,CAAC,WAAW;MACzCJ,4BAAA,CAA6B;IAC/B;EACF,GAAG,EAAE;EAEL,MAAMK,UAAA,GAAahH,KAAA,CAAMiH,KAAK;EAC9B,MAAMC,qBAAA,GACJZ,kBAAA,KAAuB,OAAO,GAAGU,UAAA,IAAcV,kBAAA,EAAoB,GAAG1E,SAAA;EACxE,MAAMuF,oBAAA,GAAuBnH,KAAA,CAAMoH,MAAM,CAAiB;EAE1D,MAAMC,WAAA,GAAeC,KAAA;IACnB,IAAItC,WAAA,EAAa;MACfA,WAAA,CAAYsC,KAAA;IACd;IAEA,IAAI,CAAC9C,QAAA,EAAU;MACb4B,SAAA,CAAU;MACVI,qBAAA,CAAsB;IACxB;EACF;EAEA,MAAMe,UAAA,GAAcD,KAAA;IAClB,IAAIlC,UAAA,EAAY;MACdA,UAAA,CAAWkC,KAAA;IACb;IAEA;IACA,IAAI,CAAC9C,QAAA,IAAY,CAAC8C,KAAA,CAAME,gBAAgB,IAAI,CAACnE,SAAA,EAAW;MACtDiE,KAAA,CAAMG,cAAc;IACtB;EACF;EAEA,MAAMC,kBAAA,GAAqB1H,KAAA,CAAMoH,MAAM,CAAgB,EAAE,EAAEO,OAAO;EAElE,MAAMC,eAAA,GAAkB,SAAAA,CAACC,KAAA,EAA6B;IAAA,IAAdC,MAAA,GAAApG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAS,KAAK;IACpD,MAAMqG,QAAA,GAAWZ,oBAAA,CAAqBQ,OAAO;IAC7C,MAAMK,IAAA,GAAON,kBAAkB,CAACG,KAAA,CAAM;IAEtC;IACA,IAAI,CAACG,IAAA,IAAQ,CAACD,QAAA,EAAU;MACtB;IACF;IAEA,MAAME,cAAA,GAAiBF,QAAA,CAASG,YAAY;IAC5C,MAAMC,SAAA,GAAYJ,QAAA,CAASI,SAAS;IACpC,MAAMC,OAAA,GAAUJ,IAAA,CAAKK,SAAS;IAC9B,MAAMC,UAAA,GAAaN,IAAA,CAAKE,YAAY;IAEpC;IACA,IAAIJ,MAAA,EAAQ;MACVC,QAAA,CAASI,SAAS,GAAGC,OAAA,GAAUH,cAAA,GAAiB,IAAIK,UAAA,GAAa;IACnE,OAAO,IAAIF,OAAA,GAAUE,UAAA,GAAaL,cAAA,GAAiBE,SAAA,EAAW;MAC5DJ,QAAA,CAASI,SAAS,GAAGC,OAAA,GAAUH,cAAA,GAAiBK,UAAA;IAClD,OAAO,IAAIF,OAAA,GAAUD,SAAA,EAAW;MAC9BJ,QAAA,CAASI,SAAS,GAAGC,OAAA;IACvB;EACF;EAEA,MAAMG,kBAAA,GAAqBA,CAACV,KAAA,EAAeW,QAAA;IACzC,IAAIX,KAAA,KAAUW,QAAA,EAAU;MACtB,+DACA;IACF;IAEA,MAAMzG,MAAA,GAASN,OAAO,CAACoG,KAAA,CAAM;IAE7B,IAAIxG,kBAAA,CAAmBU,MAAA,KAAWA,MAAA,CAAOE,QAAQ,EAAE;MACjD;IACF;IAEA2F,eAAA,CAAgBC,KAAA;IAChBrB,qBAAA,CAAsBqB,KAAA;EACxB;EAEA,MAAMY,WAAA,GAAcA,CAACC,SAAA,EAA0BC,IAAA;IAC7C,IAAId,KAAA,GAAQa,SAAA,KAAc,OAAO,CAAC,IAAIA,SAAA;IAEtC,IAAIC,IAAA,KAAS1H,iBAAA,EAAmB;MAC9B,MAAMyH,SAAA,GAAYlH,cAAA,CAAeC,OAAA,EAASoG,KAAA;MAC1CA,KAAA,GAAQa,SAAA,KAAc,CAAC,IAAIlH,cAAA,CAAeC,OAAA,IAAWiH,SAAA,EAAW;IAClE,OAAO,IAAIC,IAAA,KAASzH,iBAAA,EAAmB;MACrC,MAAM0H,WAAA,GAAc1G,eAAA,CAAgBT,OAAA,EAASoG,KAAA;MAC7CA,KAAA,GAAQe,WAAA,KAAgB,CAAC,IAAI1G,eAAA,CAAgBT,OAAA,IAAWmH,WAAA,EAAa;IACvE;IAEAL,kBAAA,CAAmBV,KAAA,EAAOvB,kBAAA;EAC5B;EAEA,MAAMuC,aAAA,GAAiBvB,KAAA;IACrB,IAAIhC,aAAA,EAAe;MACjBA,aAAA,CAAcgC,KAAA;IAChB;IAEA,IAAIA,KAAA,CAAME,gBAAgB,IAAIhD,QAAA,EAAU;MACtC;IACF;IAEA,QAAQ8C,KAAA,CAAMwB,GAAG;MACf,KAAK1I,IAAA,CAAK2I,QAAQ;MAClB,KAAK3I,IAAA,CAAK4I,UAAU;QAClB1B,KAAA,CAAMG,cAAc;QAEpB,IAAI,CAACtB,MAAA,EAAQ;UACXC,SAAA,CAAU;UACVqC,WAAA,CAAY,MAAMxH,iBAAA;QACpB,OAAO;UACLwH,WAAA,CACEnC,kBAAA,EACAgB,KAAA,CAAMwB,GAAG,KAAK1I,IAAA,CAAK2I,QAAQ,GAAG7H,iBAAA,GAAoBD,iBAAA;QAEtD;QACA;MACF,KAAKb,IAAA,CAAK6I,KAAK;QAAE;UACf,IAAI,CAAC9C,MAAA,EAAQ;YACX;UACF;UACA,IAAIG,kBAAA,IAAsB,MAAM;YAC9B,MAAM4C,WAAA,GAAczH,OAAO,CAAC6E,kBAAA,CAAmB;YAC/C,IAAI4C,WAAA,IAAe7H,kBAAA,CAAmB6H,WAAA,GAAc;cAClD5B,KAAA,CAAMG,cAAc;cAEpB,IAAI3E,aAAA,EAAe;gBACjBA,aAAA,CAAcwE,KAAA,EAAO4B,WAAA;cACvB;cAEArD,SAAA,CAAUqD,WAAA;cACV1C,qBAAA,CAAsB;cACtBN,UAAA;cACA,IAAIhD,gBAAA,EAAkB;gBACpBkD,SAAA,CAAU;cACZ;cAEA;YACF;UACF;UAEA,IAAI,CAAC/C,SAAA,EAAW;YACdiE,KAAA,CAAMG,cAAc;UACtB;UACA;QACF;MACA,KAAKrH,IAAA,CAAK+I,MAAM;MAChB,KAAK/I,IAAA,CAAKgJ,GAAG;QACX,IAAIjD,MAAA,EAAQ;UACVC,SAAA,CAAU;QACZ;IACJ;EACF;EAEApG,KAAA,CAAMqJ,SAAS,CAAC;IACd,IAAI/C,kBAAA,KAAuB,MAAM;MAC/BC,gBAAA,CAAiB;IACnB,OAAO;MACL,MAAM+C,uBAAA,GAA0B7H,OAAO,CAAC6E,kBAAA,CAAmB;MAE3D,IAAIgD,uBAAA,IAA2BjI,kBAAA,CAAmBiI,uBAAA,GAA0B;QAC1E/C,gBAAA,CAAiB+C,uBAAA;MACnB;IACF;EACF,GAAG,CAAC7H,OAAA,EAAS6E,kBAAA,EAAoBC,gBAAA,CAAiB;EAElD,MAAMgD,oBAAA,GAAuBvJ,KAAA,CAAM8G,WAAW,CAAC;IAC7CN,qBAAA,CAAsB;EACxB,GAAG,CAACA,qBAAA,CAAsB;EAE1B,MAAMgD,kBAAA,GAAqBxJ,KAAA,CAAM8G,WAAW,CAAC;IAC3CV,SAAA,CAAU;EACZ,GAAG,CAACA,SAAA,CAAU;EAEdjG,uBAAA,CACEqJ,kBAAA,EACArD,MAAA,GAASM,OAAA,GAAU,MACnBN,MAAA,GAASgB,oBAAA,GAAuB;EAGlC,MAAMsC,mBAAA,GAAwDzJ,KAAA,CAAM8G,WAAW,CAC5E4C,CAAA;IACC,IAAIvD,MAAA,EAAQ;MACVuD,CAAA,CAAEjC,cAAc;MAChBrB,SAAA,CAAU;IACZ;EACF,GACA,CAACD,MAAA,EAAQC,SAAA,CAAU;EAGrB,MAAMuD,eAAA,GAAkB3J,KAAA,CAAM4J,OAAO,CAAC;IACpC,MAAMC,sBAAA,GAAyBpI,OAAA,CAAQqI,GAAG,CAAC,CAAC/H,MAAA,EAAQ8F,KAAA;MAClD,MAAMkC,cAAA,GAAiB,GAAG/C,UAAA,IAAca,KAAA,EAAO;MAE/C,IAAIzG,mBAAA,CAAoBW,MAAA,GAAS;QAC/B,oBACEiI,IAAA,CAAClJ,QAAA;UAA0B4B,SAAS;oBACjCX,MAAA,CAAOkI;WADI;MAIlB;MACA,IAAI9I,uBAAA,CAAwBY,MAAA,GAAS;QACnC,oBACEiI,IAAA,CAACpJ,kBAAA;UAEC2B,EAAA,EAAIwH,cAAA;UACJG,OAAA,EAAS5D,kBAAA,KAAuBuB,KAAA;UAChCsC,WAAA,EAAaA,CAAA,KAAMvE,kBAAA,CAAmBvB,UAAA;UACtC+F,YAAA,EAAcA,CAAA,KAAM5D,qBAAA,CAAsBqB,KAAA;oBAEzC9F,MAAA,CAAOsI;WANJ;MASV;MACA,oBACEL,IAAA,CAAChK,KAAA,CAAMsK,QAAQ;kBACZzF,YAAA,CACC;UACEtC,EAAA,EAAIwH,cAAA;UACJ9H,QAAA,EAAUF,MAAA,CAAOE,QAAQ;UACzBiI,OAAA,EAAS7D,aAAA,GACL5B,cAAA,CAAe1C,MAAA,MAAY0C,cAAA,CAAe4B,aAAA,IAC1C;UACJkE,QAAA,EAAUxI,MAAA,CAAOyI,KAAK;UACtBC,QAAA,EAAU,CAAC,CAACvG,KAAA,CAAMwG,IAAI,CACnBC,cAAA,IACClG,cAAA,CAAekG,cAAA,MAAoBlG,cAAA,CAAe1C,MAAA;UAEtDU,WAAWmI,IAAI;YACb,IAAIA,IAAA,EAAM;cACRlD,kBAAkB,CAACG,KAAA,CAAM,GAAG+C,IAAA;YAC9B;UACF;UACAT,YAAY7C,KAAuC;YACjD,IAAIvF,MAAA,CAAOE,QAAQ,EAAE;cACnB;YACF;YACA,IAAIa,aAAA,EAAe;cACjBA,aAAA,CAAcwE,KAAA,EAAOvF,MAAA;YACvB;YAEA,IAAI,CAACuF,KAAA,CAAME,gBAAgB,EAAE;cAC3BtE,gBAAA,IAAoBkD,SAAA,CAAU;cAC9BP,SAAA,CAAU9D,MAAA;cACVmE,UAAA;YACF;UACF;UACAkE,aAAA;YACE5D,qBAAA,CAAsBqB,KAAA;UACxB;QACF,GACA9F,MAAA;SApCiB,GAAG,OAAOA,MAAA,CAAOmC,KAAK,IAAInC,MAAA,CAAOmC,KAAK,EAAE;IAwCjE;IAEA,IAAIF,cAAA,EAAgB;MAClB,OAAOA,cAAA,CAAe;QACpB6F;MACF;IACF;IACA,OAAOA,sBAAA;EACT,GAAG,CACDhE,SAAA,EACAD,kBAAA,EACA8B,kBAAA,EACAxB,UAAA,EACAhD,gBAAA,EACA8D,UAAA,EACAX,aAAA,EACAC,kBAAA,EACA7B,cAAA,EACAJ,UAAA,EACAvB,aAAA,EACArB,OAAA,EACAuC,cAAA,EACAa,YAAA,EACA2B,qBAAA,EACAJ,SAAA,EACAlC,KAAA,CACD;EAED,MAAM2G,gBAAA,GAAmB7K,KAAA,CAAM4J,OAAO,CACpC,MACEzD,MAAC,IACCZ,sBAAA,KAA2B,MAC1BmB,yBAAA,CAA0BoE,QAAQ,CAAC,8DAAqC,KAC3ElJ,SAAA,EACF,CAAC2D,sBAAA,EAAwBY,MAAA,EAAQO,yBAAA,CAA0B;EAG7D,MAAMqE,gBAAA,GAAmBvF,gBAAA,KAAqB,CAAC,CAACtB,KAAA,CAAMvC,MAAM,IAAI,CAAC,CAAC0C,UAAA,CAAW1C,MAAM,CAAD;EAElF,oBACEqJ,KAAA,CAAAC,SAAA;4BACEjB,IAAA,CAAC1J,cAAA,EAAA4K,oBAAA,CAAAC,cAAA,KACKzF,SAAA;MACJzD,QAAA,EAAUA,QAAA;MACVuC,QAAA,EAAUA,QAAA;MACVuG,gBAAA,EAAkBA,gBAAA;MAClBtF,iBAAA,EAAmBA,iBAAA;MACnB;MACAlD,EAAA,EAAIC,YAAA;MACJC,UAAA,EAAYgE,OAAA;MACZ/D,SAAA,EAAWzC,UAAA,0BAAwB4K,gBAAA,EAAkBnI,SAAA;MACrDC,MAAA,EAAQA,MAAA;MACRyI,KAAA,EACEvI,gBAAA,iBACEmH,IAAA,CAACnJ,YAAA;QACCsF,MAAA,EAAQA,MAAA;QACRkF,OAAA,EAAS5B,mBAAA;QACT/G,SAAA,EAAWzC,UAAA,kCAET8K,gBAAA;;MAKR;MACA7G,KAAA,EAAOA,KAAA;MACPoH,eAAA,EAAiB1F,kBAAA;MACjB2F,kBAAA,EAAoBzF,YAAA;MACpBlB,UAAA,EAAYA,UAAA;MACZ4G,OAAA,EAASzF,YAAA;MACT;MACA9B,MAAA,EAAQ+B,QAAA;MACR3B,UAAA,EAAYA,UAAA;MACZY,aAAA,EAAeA,aAAA;MACfF,OAAA,EAASsC,WAAA;MACTlC,MAAA,EAAQoC,UAAA;MACRlC,SAAA,EAAWwD,aAAA;MACX;MACA4C,IAAA,EAAK;MACL,iBAAetF,MAAA;MACf,qBAAkB;MAClB,iBAAeA,MAAA,GAASa,UAAA,GAAapF,SAAA;MACrC,yBAAuBuE,MAAA,GAASe,qBAAA,GAAwBtF,SAAA;MACxD,iBAAc;SAEfuE,MAAA,iBACC6D,IAAA,CAACrJ,oBAAA;MACC,eAAaiD,cAAA;MACb8H,SAAA,EAAWjF,OAAA;MACXzD,SAAA,EAAW0D,yBAAA;MACXiF,YAAA,EAAcxE,oBAAA;MACdyE,iBAAA,EAAmB/E,yBAAA;MACnBgF,YAAA,EAActC,oBAAA;MACdjG,QAAA,EAAUA,QAAA;MACVwI,SAAA,EAAWvI,iBAAA;MACXwI,WAAA,EAAavI,mBAAA;MACbC,WAAA,EAAaA,WAAA;MACbuI,cAAA,EAAgBzG,sBAAA;MAChBxB,kBAAA,EAAoBA,kBAAA;MACpB;MACAxB,EAAA,EAAIyE,UAAA;MACJyE,IAAA,EAAK;MACL,mBAAiBjJ,YAAA;gBAEhBmH;;;AAKX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}