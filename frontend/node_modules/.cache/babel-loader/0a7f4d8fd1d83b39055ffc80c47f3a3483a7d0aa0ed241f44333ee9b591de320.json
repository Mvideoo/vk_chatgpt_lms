{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport * as React from \"react\";\nimport { useCustomEnsuredControl, useEnsuredControl } from \"../../hooks/useEnsuredControl.js\";\nimport { useNativeFormResetListener } from \"../../hooks/useNativeFormResetListener.js\";\nimport { simulateReactInput } from \"../../lib/react/index.js\";\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, getNewOptionDataDefault, getOptionLabelDefault, getOptionValueDefault } from \"../ChipsInputBase/constants.js\";\nimport { isValueLikeChipOptionObject } from \"../ChipsInputBase/helpers.js\";\nexport const transformValue = (value, getOptionValue, getOptionLabel) => value.map(option => _object_spread_props(_object_spread({}, option), {\n  label: getOptionLabel(option),\n  value: getOptionValue(option)\n}));\nexport const useChipsInput = _ref => {\n  let {\n    // option\n    value: valueProp,\n    defaultValue = DEFAULT_VALUE,\n    onChange,\n    getOptionLabel = getOptionLabelDefault,\n    getOptionValue = getOptionValueDefault,\n    getNewOptionData = getNewOptionDataDefault,\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue = DEFAULT_INPUT_VALUE,\n    onInputChange,\n    // other\n    disabled\n  } = _ref;\n  const [value, setValue] = useCustomEnsuredControl({\n    disabled,\n    value: valueProp ? transformValue(valueProp, getOptionValue, getOptionLabel) : undefined,\n    defaultValue: transformValue(defaultValue, getOptionValue, getOptionLabel),\n    onChange\n  });\n  const inputRef = React.useRef(null);\n  const [inputValue, setInputChange] = useEnsuredControl({\n    disabled,\n    value: inputValueProp,\n    defaultValue: defaultInputValue,\n    onChange: onInputChange\n  });\n  const toggleOption = React.useCallback((nextValueProp, isNewValue) => {\n    setValue(prevValue => {\n      const isLikeObjectOption = isValueLikeChipOptionObject(nextValueProp);\n      const resolvedOption = isLikeObjectOption ? getNewOptionData(nextValueProp.value, nextValueProp.label) : getNewOptionData(nextValueProp, typeof nextValueProp === 'string' ? nextValueProp : '');\n      const nextValue = prevValue.filter(option => resolvedOption.value !== option.value);\n      if (isNewValue === true) {\n        nextValue.push(isLikeObjectOption ? _object_spread({}, nextValueProp, resolvedOption) : resolvedOption);\n      }\n      return nextValue;\n    });\n  }, [setValue, getNewOptionData]);\n  const clearInput = React.useCallback(() => {\n    /* istanbul ignore if */if (!inputRef.current) {\n      return;\n    }\n    simulateReactInput(inputRef.current, '');\n  }, [inputRef]);\n  const addOption = React.useCallback(newValue => toggleOption(newValue, true), [toggleOption]);\n  const removeOption = React.useCallback(newValue => toggleOption(newValue, false), [toggleOption]);\n  const addOptionFromInput = React.useCallback(inputValue => {\n    const label = inputValue.trim();\n    if (label) {\n      addOption(label);\n      clearInput();\n    }\n  }, [addOption, clearInput]);\n  const reset = React.useCallback(() => {\n    setValue(defaultValue);\n  }, [defaultValue, setValue]);\n  const clearOptions = React.useCallback(() => {\n    setValue(DEFAULT_VALUE);\n    clearInput();\n  }, [clearInput, setValue]);\n  useNativeFormResetListener(inputRef, reset);\n  return {\n    value,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n    inputRef,\n    inputValue,\n    onInputChange: setInputChange,\n    clearInput,\n    clearOptions\n  };\n};","map":{"version":3,"names":["React","useCustomEnsuredControl","useEnsuredControl","useNativeFormResetListener","simulateReactInput","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","getNewOptionDataDefault","getOptionLabelDefault","getOptionValueDefault","isValueLikeChipOptionObject","transformValue","value","getOptionValue","getOptionLabel","map","option","_object_spread_props","_object_spread","label","useChipsInput","_ref","valueProp","defaultValue","onChange","getNewOptionData","inputValue","inputValueProp","defaultInputValue","onInputChange","disabled","setValue","undefined","inputRef","useRef","setInputChange","toggleOption","useCallback","nextValueProp","isNewValue","prevValue","isLikeObjectOption","resolvedOption","nextValue","filter","push","clearInput","current","addOption","newValue","removeOption","addOptionFromInput","trim","reset","clearOptions"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/ChipsInput/useChipsInput.ts"],"sourcesContent":["import * as React from 'react';\nimport { useCustomEnsuredControl, useEnsuredControl } from '../../hooks/useEnsuredControl';\nimport { useNativeFormResetListener } from '../../hooks/useNativeFormResetListener';\nimport { simulateReactInput, type SimulateReactInputTargetState } from '../../lib/react';\nimport {\n  DEFAULT_INPUT_VALUE,\n  DEFAULT_VALUE,\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n} from '../ChipsInputBase/constants';\nimport { isValueLikeChipOptionObject } from '../ChipsInputBase/helpers';\nimport type {\n  ChipOption,\n  ChipOptionLabel,\n  ChipOptionValue,\n  GetNewOptionData,\n  GetOptionLabel,\n  GetOptionValue,\n  UseChipsInputBaseProps,\n} from '../ChipsInputBase/types';\n\nexport const transformValue = <O extends ChipOption>(\n  value: O[],\n  getOptionValue: GetOptionValue<O>,\n  getOptionLabel: GetOptionLabel<O>,\n): Array<\n  O & {\n    label: ChipOptionLabel;\n    value: ChipOptionValue;\n  }\n> =>\n  value.map((option) => ({\n    ...option,\n    label: getOptionLabel(option),\n    value: getOptionValue(option),\n  }));\n\ninterface ToggleOption<O extends ChipOption> {\n  (optionForAdd: O | string, isNewValue: true): void;\n  (optionForRemove: O | ChipOptionValue, isNewValue: false): void;\n}\n\nexport interface UseChipsInputProps<O extends ChipOption = ChipOption>\n  extends UseChipsInputBaseProps<O> {\n  /**\n   * Селектор значения.\n   */\n  getOptionValue?: GetOptionValue<O>;\n  /**\n   * Селектор пользовательского представления.\n   */\n  getOptionLabel?: GetOptionLabel<O>;\n  /**\n   * Функция для создания новой опции.\n   */\n  getNewOptionData?: GetNewOptionData<O>;\n}\n\nexport const useChipsInput = <O extends ChipOption>({\n  // option\n  value: valueProp,\n  defaultValue = DEFAULT_VALUE,\n  onChange,\n  getOptionLabel = getOptionLabelDefault,\n  getOptionValue = getOptionValueDefault,\n  getNewOptionData = getNewOptionDataDefault,\n\n  // input\n  inputValue: inputValueProp,\n  defaultInputValue = DEFAULT_INPUT_VALUE,\n  onInputChange,\n\n  // other\n  disabled,\n}: UseChipsInputProps<O>): {\n  value: Array<\n    O & {\n      label: ChipOptionLabel;\n      value: ChipOptionValue;\n    }\n  >;\n  addOption: (newValue: O | string) => void;\n  addOptionFromInput: (inputValue: string) => void;\n  removeOption: (newValue: O | ChipOptionValue) => void;\n  clearOptions: () => void;\n  inputRef: React.RefObject<(HTMLInputElement & SimulateReactInputTargetState) | null>;\n  inputValue: string;\n  onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => any;\n  clearInput: () => void;\n} => {\n  const [value, setValue] = useCustomEnsuredControl({\n    disabled,\n    value: valueProp ? transformValue(valueProp, getOptionValue, getOptionLabel) : undefined,\n    defaultValue: transformValue(defaultValue, getOptionValue, getOptionLabel),\n    onChange,\n  });\n\n  const inputRef = React.useRef<(HTMLInputElement & SimulateReactInputTargetState) | null>(null);\n  const [inputValue, setInputChange] = useEnsuredControl({\n    disabled,\n    value: inputValueProp,\n    defaultValue: defaultInputValue,\n    onChange: onInputChange,\n  });\n\n  const toggleOption: ToggleOption<O> = React.useCallback(\n    (nextValueProp: O | ChipOptionValue, isNewValue: boolean) => {\n      setValue((prevValue) => {\n        const isLikeObjectOption = isValueLikeChipOptionObject(nextValueProp);\n        const resolvedOption = isLikeObjectOption\n          ? getNewOptionData(nextValueProp.value, nextValueProp.label)\n          : getNewOptionData(nextValueProp, typeof nextValueProp === 'string' ? nextValueProp : '');\n        const nextValue = prevValue.filter((option: O) => resolvedOption.value !== option.value);\n\n        if (isNewValue === true) {\n          nextValue.push(\n            isLikeObjectOption ? { ...nextValueProp, ...resolvedOption } : resolvedOption,\n          );\n        }\n\n        return nextValue;\n      });\n    },\n    [setValue, getNewOptionData],\n  );\n\n  const clearInput = React.useCallback(() => {\n    /* istanbul ignore if */\n    if (!inputRef.current) {\n      return;\n    }\n    simulateReactInput(inputRef.current, '');\n  }, [inputRef]);\n\n  const addOption = React.useCallback(\n    (newValue: O | string) => toggleOption(newValue, true),\n    [toggleOption],\n  );\n\n  const removeOption = React.useCallback(\n    (newValue: O | ChipOptionValue) => toggleOption(newValue, false),\n    [toggleOption],\n  );\n\n  const addOptionFromInput = React.useCallback(\n    (inputValue: string) => {\n      const label = inputValue.trim();\n      if (label) {\n        addOption(label);\n        clearInput();\n      }\n    },\n    [addOption, clearInput],\n  );\n\n  const reset = React.useCallback(() => {\n    setValue(defaultValue);\n  }, [defaultValue, setValue]);\n\n  const clearOptions = React.useCallback(() => {\n    setValue(DEFAULT_VALUE);\n    clearInput();\n  }, [clearInput, setValue]);\n\n  useNativeFormResetListener(inputRef, reset);\n\n  return {\n    value,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n\n    inputRef,\n    inputValue,\n    onInputChange: setInputChange,\n    clearInput,\n    clearOptions,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}