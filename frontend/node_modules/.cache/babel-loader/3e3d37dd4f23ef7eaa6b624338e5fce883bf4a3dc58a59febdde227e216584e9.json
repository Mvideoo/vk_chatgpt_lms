{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useExternRef } from \"../../hooks/useExternRef.js\";\nimport { usePlatform } from \"../../hooks/usePlatform.js\";\nimport { Removable } from \"../Removable/Removable.js\";\nimport { SimpleCell } from \"../SimpleCell/SimpleCell.js\";\nimport { CellCheckbox } from \"./CellCheckbox/CellCheckbox.js\";\nimport { CellDragger } from \"./CellDragger/CellDragger.js\";\nimport { DEFAULT_DRAGGABLE_LABEL } from \"./constants.js\";\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell = _param => {\n  var {\n      mode,\n      onRemove,\n      removePlaceholder = 'Удалить',\n      onDragFinish,\n      before,\n      after,\n      disabled,\n      draggable,\n      Component: ComponentProps,\n      onChange,\n      name,\n      value,\n      checked,\n      defaultChecked,\n      getRootRef,\n      draggerLabel = DEFAULT_DRAGGABLE_LABEL,\n      className,\n      style,\n      toggleButtonTestId,\n      removeButtonTestId\n    } = _param,\n    restProps = _object_without_properties(_param, [\"mode\", \"onRemove\", \"removePlaceholder\", \"onDragFinish\", \"before\", \"after\", \"disabled\", \"draggable\", \"Component\", \"onChange\", \"name\", \"value\", \"checked\", \"defaultChecked\", \"getRootRef\", \"draggerLabel\", \"className\", \"style\", \"toggleButtonTestId\", \"removeButtonTestId\"]);\n  const [dragging, setDragging] = React.useState(false);\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n  const Component = selectable ? 'label' : ComponentProps;\n  const platform = usePlatform();\n  const rootElRef = useExternRef(getRootRef);\n  const dragger = draggable ? /*#__PURE__*/_jsx(CellDragger, {\n    elRef: rootElRef,\n    className: classNames(\"vkuiCell__dragger\", !before && !selectable && \"vkuiCell__controlNoBefore\"),\n    onDragStateChange: setDragging,\n    onDragFinish: onDragFinish,\n    children: draggerLabel\n  }) : null;\n  let checkbox;\n  if (selectable) {\n    const checkboxProps = {\n      name,\n      value,\n      defaultChecked,\n      checked,\n      disabled,\n      onChange\n    };\n    checkbox = /*#__PURE__*/_jsx(CellCheckbox, _object_spread({\n      className: classNames(\"vkuiCell__checkbox\", !before && \"vkuiCell__controlNoBefore\")\n    }, checkboxProps));\n  }\n  const hasActive = !disabled && !dragging;\n  const cellClasses = classNames(\"vkuiCell__host\", dragging && \"vkuiCell__dragging\", platform === 'ios' && \"vkuiCell__ios\", removable && \"vkuiCell__removable\", Component === 'label' && \"vkuiCell__selectable\");\n  const simpleCellProps = _object_spread_props(_object_spread(_object_spread_props(_object_spread({\n    hasActive: hasActive,\n    hasHover: hasActive && !removable,\n    disabled\n  }, restProps), {\n    className: \"vkuiCell__content\"\n  }), Component && {\n    Component\n  }), {\n    before: /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [draggable && platform !== 'ios' && dragger, selectable && checkbox, before]\n    }),\n    after: /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [draggable && platform === 'ios' && dragger, after]\n    })\n  });\n  if (removable) {\n    return /*#__PURE__*/_jsx(Removable, {\n      className: classNames(cellClasses, className),\n      style: style,\n      getRootRef: rootElRef,\n      removePlaceholder: removePlaceholder,\n      onRemove: e => onRemove === null || onRemove === void 0 ? void 0 : onRemove(e, rootElRef.current),\n      toggleButtonTestId: toggleButtonTestId,\n      removeButtonTestId: removeButtonTestId,\n      disabled: disabled,\n      children: platform === 'ios' ? _ref => {\n        let {\n          isRemoving\n        } = _ref;\n        return /*#__PURE__*/_jsx(SimpleCell, _object_spread({}, simpleCellProps, isRemoving ? {\n          onClick: undefined\n        } : {}));\n      } : /*#__PURE__*/_jsx(SimpleCell, _object_spread({}, simpleCellProps))\n    });\n  }\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: classNames(cellClasses, className),\n    style: style,\n    ref: rootElRef,\n    children: /*#__PURE__*/_jsx(SimpleCell, _object_spread({}, simpleCellProps))\n  });\n};\nCell.Checkbox = CellCheckbox;","map":{"version":3,"names":["React","classNames","useExternRef","usePlatform","Removable","SimpleCell","CellCheckbox","CellDragger","DEFAULT_DRAGGABLE_LABEL","Cell","_param","mode","onRemove","removePlaceholder","onDragFinish","before","after","disabled","draggable","Component","ComponentProps","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","className","style","toggleButtonTestId","removeButtonTestId","restProps","_object_without_properties","dragging","setDragging","useState","selectable","removable","platform","rootElRef","dragger","_jsx","elRef","onDragStateChange","checkbox","checkboxProps","_object_spread","hasActive","cellClasses","simpleCellProps","_object_spread_props","hasHover","_jsxs","Fragment","e","current","_ref","isRemoving","onClick","undefined","ref","Checkbox"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/Cell/Cell.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport type { SwappedItemRange } from '../../hooks/useDraggableWithDomApi';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport type { HasRootRef } from '../../types';\nimport { Removable, type RemovableProps } from '../Removable/Removable';\nimport { SimpleCell, type SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { CellCheckbox, type CellCheckboxProps } from './CellCheckbox/CellCheckbox';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { DEFAULT_DRAGGABLE_LABEL } from './constants';\nimport styles from './Cell.module.css';\n\nexport interface CellProps\n  extends Omit<SimpleCellProps, 'getRootRef'>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: 'removable' | 'selectable';\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: (swappedItemRange: SwappedItemRange) => void;\n  /**\n   * Текст для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell: React.FC<CellProps> & {\n  Checkbox: typeof CellCheckbox;\n} = ({\n  mode,\n  onRemove,\n  removePlaceholder = 'Удалить',\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  draggable,\n  Component: ComponentProps,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = DEFAULT_DRAGGABLE_LABEL,\n  className,\n  style,\n  toggleButtonTestId,\n  removeButtonTestId,\n  ...restProps\n}: CellProps) => {\n  const [dragging, setDragging] = React.useState(false);\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n  const Component = selectable ? 'label' : ComponentProps;\n\n  const platform = usePlatform();\n\n  const rootElRef = useExternRef(getRootRef);\n\n  const dragger = draggable ? (\n    <CellDragger\n      elRef={rootElRef}\n      className={classNames(styles.dragger, !before && !selectable && styles.controlNoBefore)}\n      onDragStateChange={setDragging}\n      onDragFinish={onDragFinish}\n    >\n      {draggerLabel}\n    </CellDragger>\n  ) : null;\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      defaultChecked,\n      checked,\n      disabled,\n      onChange,\n    };\n    checkbox = (\n      <CellCheckbox\n        className={classNames(styles.checkbox, !before && styles.controlNoBefore)}\n        {...checkboxProps}\n      />\n    );\n  }\n\n  const hasActive = !disabled && !dragging;\n\n  const cellClasses = classNames(\n    styles.host,\n    dragging && styles.dragging,\n    platform === 'ios' && styles.ios,\n    removable && styles.removable,\n    Component === 'label' && styles.selectable,\n  );\n\n  const simpleCellProps: SimpleCellProps = {\n    hasActive: hasActive,\n    hasHover: hasActive && !removable,\n    disabled,\n    ...restProps,\n    className: styles.content,\n    // чтобы свойство, если не определено, не присутствовало в\n    // restProps явно как {'Component': undefined} и ниже не переопределяло\n    // возможное значение commonProps.Component = 'a' при слиянии двух объектов, как\n    // {...commonProps, ...restProps}\n    ...(Component && { Component }),\n    before: (\n      <React.Fragment>\n        {draggable && platform !== 'ios' && dragger}\n        {selectable && checkbox}\n        {before}\n      </React.Fragment>\n    ),\n    after: (\n      <React.Fragment>\n        {draggable && platform === 'ios' && dragger}\n        {after}\n      </React.Fragment>\n    ),\n  };\n\n  if (removable) {\n    return (\n      <Removable\n        className={classNames(cellClasses, className)}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove?.(e, rootElRef.current)}\n        toggleButtonTestId={toggleButtonTestId}\n        removeButtonTestId={removeButtonTestId}\n        disabled={disabled}\n      >\n        {platform === 'ios' ? (\n          ({ isRemoving }) => {\n            return (\n              <SimpleCell {...simpleCellProps} {...(isRemoving ? { onClick: undefined } : {})} />\n            );\n          }\n        ) : (\n          <SimpleCell {...simpleCellProps} />\n        )}\n      </Removable>\n    );\n  }\n\n  return (\n    <div className={classNames(cellClasses, className)} style={style} ref={rootElRef}>\n      <SimpleCell {...simpleCellProps} />\n    </div>\n  );\n};\n\nCell.Checkbox = CellCheckbox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}