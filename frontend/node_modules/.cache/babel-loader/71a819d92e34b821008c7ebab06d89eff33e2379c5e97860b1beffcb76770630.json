{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useTokensClassName } from \"./useTokenClassName.js\";\nconst InjectTokenClassNameToChild = _ref => {\n  let {\n    children\n  } = _ref;\n  const tokensClassName = useTokensClassName();\n  return /*#__PURE__*/React.cloneElement(children, {\n    className: classNames(tokensClassName, \"vkuitokens__defaultColor\", children.props.className)\n  });\n};\nexport const TokensClassProvider = _ref2 => {\n  let {\n    children\n  } = _ref2;\n  return React.Children.map(children, child => {\n    if (/*#__PURE__*/React.isValidElement(child)) {\n      return /*#__PURE__*/_jsx(InjectTokenClassNameToChild, {\n        children: child\n      });\n    }\n    return child;\n  });\n};","map":{"version":3,"names":["React","classNames","useTokensClassName","InjectTokenClassNameToChild","_ref","children","tokensClassName","cloneElement","className","props","TokensClassProvider","_ref2","Children","map","child","isValidElement","_jsx"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/lib/tokens/TokensClassProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useTokensClassName } from './useTokenClassName';\nimport styles from './TokensClassProvider.module.css';\n\ntype ProvidedChildProps = {\n  className?: string;\n};\n\ntype InjectTokenClassNameToChildProps = {\n  children: React.ReactElement<ProvidedChildProps>;\n};\n\nconst InjectTokenClassNameToChild = ({ children }: InjectTokenClassNameToChildProps) => {\n  const tokensClassName = useTokensClassName();\n\n  return React.cloneElement(children, {\n    className: classNames(tokensClassName, styles.defaultColor, children.props.className),\n  });\n};\n\nexport interface TokensClassProviderProps {\n  children: React.ReactNode;\n}\n\nexport const TokensClassProvider: React.FC<TokensClassProviderProps> = ({ children }) => {\n  return React.Children.map(children, (child) => {\n    if (React.isValidElement<ProvidedChildProps>(child)) {\n      return <InjectTokenClassNameToChild>{child}</InjectTokenClassNameToChild>;\n    }\n    return child;\n  });\n};\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,QAAQ;AAC3B,SAASC,kBAAkB,QAAQ;AAWnC,MAAMC,2BAAA,GAA8BC,IAAA,IAA+C;EAAA,IAA9C;IAAEC;EAAQ,CAAoC,GAAAD,IAAA;EACjF,MAAME,eAAA,GAAkBJ,kBAAA;EAExB,oBAAOF,KAAA,CAAMO,YAAY,CAACF,QAAA,EAAU;IAClCG,SAAA,EAAWP,UAAA,CAAWK,eAAA,8BAAsCD,QAAA,CAASI,KAAK,CAACD,SAAS;EACtF;AACF;AAMA,OAAO,MAAME,mBAAA,GAA0DC,KAAA,IAAa;EAAA,IAAZ;IAAEN;EAAQ,CAAE,GAAAM,KAAA;EAClF,OAAOX,KAAA,CAAMY,QAAQ,CAACC,GAAG,CAACR,QAAA,EAAWS,KAAA;IACnC,iBAAId,KAAA,CAAMe,cAAc,CAAqBD,KAAA,GAAQ;MACnD,oBAAOE,IAAA,CAACb,2BAAA;kBAA6BW;;IACvC;IACA,OAAOA,KAAA;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}