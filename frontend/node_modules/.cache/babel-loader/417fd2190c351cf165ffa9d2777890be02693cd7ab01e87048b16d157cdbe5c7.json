{"ast":null,"code":"'use client';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nconst TransitionDirectionContext = /*#__PURE__*/React.createContext(undefined);\nexport const NavTransitionDirectionProvider = _ref => {\n  let {\n    children,\n    isBack: isBackProp\n  } = _ref;\n  const parentIsBack = React.useContext(TransitionDirectionContext);\n  // if local isBack is undefined then transition happend on the parent side (probably Root)\n  const isBack = isBackProp !== undefined ? isBackProp : parentIsBack;\n  // 'direction' should always represent the direction state of the panel on mount\n  // save the on mount value of the panel to the state\n  // to make sure we don't trigger new re-render for the panel\n  // due to change in the prop passed to provider\n  const [isBackOnMount] = React.useState(isBack);\n  return /*#__PURE__*/_jsx(TransitionDirectionContext.Provider, {\n    value: isBackOnMount,\n    children: children\n  });\n};\nexport const useNavDirection = () => {\n  const isBack = React.useContext(TransitionDirectionContext);\n  const transitionDirection = isBack === undefined ? undefined : isBack ? 'backwards' : 'forwards';\n  return transitionDirection;\n};","map":{"version":3,"names":["React","TransitionDirectionContext","createContext","undefined","NavTransitionDirectionProvider","_ref","children","isBack","isBackProp","parentIsBack","useContext","isBackOnMount","useState","_jsx","Provider","value","useNavDirection","transitionDirection"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/NavTransitionDirectionContext/NavTransitionDirectionContext.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\n\ntype DirectionContextType = boolean | undefined;\n\nconst TransitionDirectionContext = React.createContext<DirectionContextType>(undefined);\n\nexport const NavTransitionDirectionProvider = ({\n  children,\n  isBack: isBackProp,\n}: React.PropsWithChildren<{ isBack: DirectionContextType }>): React.ReactNode => {\n  const parentIsBack = React.useContext(TransitionDirectionContext);\n  // if local isBack is undefined then transition happend on the parent side (probably Root)\n  const isBack = isBackProp !== undefined ? isBackProp : parentIsBack;\n\n  // 'direction' should always represent the direction state of the panel on mount\n  // save the on mount value of the panel to the state\n  // to make sure we don't trigger new re-render for the panel\n  // due to change in the prop passed to provider\n  const [isBackOnMount] = React.useState<DirectionContextType>(isBack);\n\n  return (\n    <TransitionDirectionContext.Provider value={isBackOnMount}>\n      {children}\n    </TransitionDirectionContext.Provider>\n  );\n};\n\nexport type TransitionDirection = undefined | 'forwards' | 'backwards';\n\nexport const useNavDirection = (): TransitionDirection => {\n  const isBack = React.useContext(TransitionDirectionContext);\n  const transitionDirection = isBack === undefined ? undefined : isBack ? 'backwards' : 'forwards';\n\n  return transitionDirection;\n};\n"],"mappings":"AAAA;;;AAEA,YAAYA,KAAA,MAAW;AAIvB,MAAMC,0BAAA,gBAA6BD,KAAA,CAAME,aAAa,CAAuBC,SAAA;AAE7E,OAAO,MAAMC,8BAAA,GAAiCC,IAAA,IAGc;EAAA,IAHb;IAC7CC,QAAQ;IACRC,MAAA,EAAQC;EAAU,CACwC,GAAAH,IAAA;EAC1D,MAAMI,YAAA,GAAeT,KAAA,CAAMU,UAAU,CAACT,0BAAA;EACtC;EACA,MAAMM,MAAA,GAASC,UAAA,KAAeL,SAAA,GAAYK,UAAA,GAAaC,YAAA;EAEvD;EACA;EACA;EACA;EACA,MAAM,CAACE,aAAA,CAAc,GAAGX,KAAA,CAAMY,QAAQ,CAAuBL,MAAA;EAE7D,oBACEM,IAAA,CAACZ,0BAAA,CAA2Ba,QAAQ;IAACC,KAAA,EAAOJ,aAAA;cACzCL;;AAGP;AAIA,OAAO,MAAMU,eAAA,GAAkBA,CAAA;EAC7B,MAAMT,MAAA,GAASP,KAAA,CAAMU,UAAU,CAACT,0BAAA;EAChC,MAAMgB,mBAAA,GAAsBV,MAAA,KAAWJ,SAAA,GAAYA,SAAA,GAAYI,MAAA,GAAS,cAAc;EAEtF,OAAOU,mBAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}