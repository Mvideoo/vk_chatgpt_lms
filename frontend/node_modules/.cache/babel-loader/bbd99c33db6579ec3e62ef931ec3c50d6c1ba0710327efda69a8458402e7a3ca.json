{"ast":null,"code":"import { leadingZero } from \"../other/numbers.js\";\nimport { isDateToday } from \"./isDateToday.js\";\nexport var SECONDS_IN_THE_DAY = 86400;\nvar MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n/**\n * Проверяет, что переданная дата - вчерашний день\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isDateYesterday } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isDateYesterday(new Date(), false);\n * ```\n */\nexport function isDateYesterday(date) {\n  var yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n/**\n * Проверяет, что переданная дата - завтрашний день\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isDateTomorrow } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isDateTomorrow(new Date(), false);\n * ```\n */\nexport function isDateTomorrow(date) {\n  var tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n/**\n * Возвращает новую дату — начало переданного дня\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getBeginningOfDay } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   getBeginningOfDay(new Date(2024, 0, 1, 12, 34, 56, 789)),\n *   new Date(2024, 0, 1),\n * );\n * ```\n *\n * @param date Дата\n */\nexport function getBeginningOfDay(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth();\n  var day = date.getDate();\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\n/**\n * Возвращает true, если год високосный\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isLeapYear } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isLeapYear(2024), true);\n * assert.strictEqual(isLeapYear(2025), false);\n * ```\n *\n * @param year Год\n */\nexport function isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getLastDayOfMonth } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(getLastDayOfMonth(2024, 2), 29);\n * assert.strictEqual(getLastDayOfMonth(2025, 2), 28);\n * ```\n *\n * @param year Год\n * @param month Месяц\n */\nexport function getLastDayOfMonth(year, month) {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && (month < 8 && month % 2 === 0 || month > 7 && month % 2 === 1)) {\n    return 30;\n  }\n  return 31;\n}\n/**\n * Ближайший понедельник в прошлом относительно date\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getStartOfWeek } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   getStartOfWeek(new Date(2024, 0, 1), 10),\n *   new Date(2024, 11, 31),\n * );\n * ```\n *\n * @param date Дата\n */\nexport function getStartOfWeek(date) {\n  var weekDay = date.getDay();\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n  return addDays(date, -weekDay + 1);\n}\n/**\n * Добавляет дни к дате и возвращает новый объект\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { addDays } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   addDays(new Date(2024, 0, 1), 10),\n *   new Date(2024, 0, 11),\n * );\n * ```\n *\n * @param date Дата\n * @param dayCount Количество дней, которые требуется добавить\n */\nexport function addDays(date, dayCount) {\n  var modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n/**\n * Создаёт дату из Unix Timestamp\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createDateFromUnixTimestamp } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   createDateFromUnixTimestamp(1704056400),\n *   new Date(2024, 0, 1),\n * );\n * ```\n *\n * @param timestamp Дата в формате unix timestamp (секунды)\n */\nexport function createDateFromUnixTimestamp(timestamp) {\n  return new Date(timestamp * 1000);\n}\n/**\n * Возвращает Unix Timestamp из даты\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getUnixTimestampFromDate } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(\n *   getUnixTimestampFromDate(new Date(2024, 0, 1)),\n *   1704056400,\n * );\n * ```\n *\n * @param date Дата, которую требуется перевести в Unix Timestamp\n */\nexport function getUnixTimestampFromDate(date) {\n  return Math.floor(date.getTime() / 1000);\n}\n/**\n * Возвращает дату в формате YYYY-MM-DD\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { convertDateToInputFormat } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(\n *   convertDateToInputFormat(new Date(2024, 0, 1)),\n *   \"2024-01-01\",\n * );\n * ```\n *\n * @param date Дата, которую требуется отформатировать\n */\nexport function convertDateToInputFormat(date) {\n  var day = date.getDate();\n  var month = date.getMonth() + 1;\n  var year = date.getFullYear();\n  return [year, leadingZero(month), leadingZero(day)].join('-');\n}","map":{"version":3,"names":["leadingZero","isDateToday","SECONDS_IN_THE_DAY","MILLISECONDS_IN_THE_DAY","isDateYesterday","date","yesterdayDate","Date","getTime","isDateTomorrow","tomorrowDate","getBeginningOfDay","year","getFullYear","month","getMonth","day","getDate","isLeapYear","getLastDayOfMonth","getStartOfWeek","weekDay","getDay","addDays","dayCount","modified","setDate","createDateFromUnixTimestamp","timestamp","getUnixTimestampFromDate","Math","floor","convertDateToInputFormat","join"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkjs/src/datetime/date.ts"],"sourcesContent":["import { leadingZero } from '../other/numbers';\nimport { isDateToday } from './isDateToday';\n\nexport const SECONDS_IN_THE_DAY = 86400;\nconst MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n\n/**\n * Проверяет, что переданная дата - вчерашний день\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isDateYesterday } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isDateYesterday(new Date(), false);\n * ```\n */\nexport function isDateYesterday(date: Date): boolean {\n  const yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n\n/**\n * Проверяет, что переданная дата - завтрашний день\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isDateTomorrow } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isDateTomorrow(new Date(), false);\n * ```\n */\nexport function isDateTomorrow(date: Date): boolean {\n  const tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n\n/**\n * Возвращает новую дату — начало переданного дня\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getBeginningOfDay } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   getBeginningOfDay(new Date(2024, 0, 1, 12, 34, 56, 789)),\n *   new Date(2024, 0, 1),\n * );\n * ```\n *\n * @param date Дата\n */\nexport function getBeginningOfDay(date: Date) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\n\n/**\n * Возвращает true, если год високосный\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isLeapYear } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isLeapYear(2024), true);\n * assert.strictEqual(isLeapYear(2025), false);\n * ```\n *\n * @param year Год\n */\nexport function isLeapYear(year: number) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getLastDayOfMonth } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(getLastDayOfMonth(2024, 2), 29);\n * assert.strictEqual(getLastDayOfMonth(2025, 2), 28);\n * ```\n *\n * @param year Год\n * @param month Месяц\n */\nexport function getLastDayOfMonth(year: number, month: number): number {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && ((month < 8 && month % 2 === 0) || (month > 7 && month % 2 === 1))) {\n    return 30;\n  }\n  return 31;\n}\n\n/**\n * Ближайший понедельник в прошлом относительно date\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getStartOfWeek } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   getStartOfWeek(new Date(2024, 0, 1), 10),\n *   new Date(2024, 11, 31),\n * );\n * ```\n *\n * @param date Дата\n */\nexport function getStartOfWeek(date: Date): Date {\n  const weekDay = date.getDay();\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n  return addDays(date, -weekDay + 1);\n}\n\n/**\n * Добавляет дни к дате и возвращает новый объект\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { addDays } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   addDays(new Date(2024, 0, 1), 10),\n *   new Date(2024, 0, 11),\n * );\n * ```\n *\n * @param date Дата\n * @param dayCount Количество дней, которые требуется добавить\n */\nexport function addDays(date: Date, dayCount: number): Date {\n  const modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n\n/**\n * Создаёт дату из Unix Timestamp\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createDateFromUnixTimestamp } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   createDateFromUnixTimestamp(1704056400),\n *   new Date(2024, 0, 1),\n * );\n * ```\n *\n * @param timestamp Дата в формате unix timestamp (секунды)\n */\nexport function createDateFromUnixTimestamp(timestamp: number): Date {\n  return new Date(timestamp * 1000);\n}\n\n/**\n * Возвращает Unix Timestamp из даты\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getUnixTimestampFromDate } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(\n *   getUnixTimestampFromDate(new Date(2024, 0, 1)),\n *   1704056400,\n * );\n * ```\n *\n * @param date Дата, которую требуется перевести в Unix Timestamp\n */\nexport function getUnixTimestampFromDate(date: Date): number {\n  return Math.floor(date.getTime() / 1000);\n}\n\n/**\n * Возвращает дату в формате YYYY-MM-DD\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { convertDateToInputFormat } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(\n *   convertDateToInputFormat(new Date(2024, 0, 1)),\n *   \"2024-01-01\",\n * );\n * ```\n *\n * @param date Дата, которую требуется отформатировать\n */\nexport function convertDateToInputFormat(date: Date): string {\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n\n  return [year, leadingZero(month), leadingZero(day)].join('-');\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ;AAC5B,SAASC,WAAW,QAAQ;AAE5B,OAAO,IAAMC,kBAAA,GAAqB;AAClC,IAAMC,uBAAA,GAA0BD,kBAAA,GAAqB;AAErD;;;;;;;;;;;AAWA,OAAO,SAASE,gBAAgBC,IAAU;EACxC,IAAMC,aAAA,GAAgB,IAAIC,IAAA,CAAKF,IAAA,CAAKG,OAAO,KAAKL,uBAAA;EAChD,OAAOF,WAAA,CAAYK,aAAA;AACrB;AAEA;;;;;;;;;;;AAWA,OAAO,SAASG,eAAeJ,IAAU;EACvC,IAAMK,YAAA,GAAe,IAAIH,IAAA,CAAKF,IAAA,CAAKG,OAAO,KAAKL,uBAAA;EAC/C,OAAOF,WAAA,CAAYS,YAAA;AACrB;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASC,kBAAkBN,IAAU;EAC1C,IAAMO,IAAA,GAAOP,IAAA,CAAKQ,WAAW;EAC7B,IAAMC,KAAA,GAAQT,IAAA,CAAKU,QAAQ;EAC3B,IAAMC,GAAA,GAAMX,IAAA,CAAKY,OAAO;EAExB,OAAO,IAAIV,IAAA,CAAKK,IAAA,EAAME,KAAA,EAAOE,GAAA,EAAK,GAAG,GAAG,GAAG;AAC7C;AAEA;;;;;;;;;;;;;;AAcA,OAAO,SAASE,WAAWN,IAAY;EACrC,OAAOA,IAAC,GAAO,MAAM,KAAKA,IAAA,GAAO,QAAQ,KAAMA,IAAA,GAAO,QAAQ;AAChE;AAEA;;;;;;;;;;;;;;;AAeA,OAAO,SAASO,kBAAkBP,IAAY,EAAEE,KAAa;EAC3D,IAAI,CAACA,KAAA,KAAU,GAAG;IAChB,OAAOI,UAAA,CAAWN,IAAA,IAAQ,KAAK;EACjC,OAAO,IAAIE,KAAA,GAAQ,MAAMA,KAAC,GAAQ,KAAKA,KAAA,GAAQ,MAAM,KAAOA,KAAA,GAAQ,KAAKA,KAAA,GAAQ,MAAM,CAAC,GAAI;IAC1F,OAAO;EACT;EACA,OAAO;AACT;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASM,eAAef,IAAU;EACvC,IAAMgB,OAAA,GAAUhB,IAAA,CAAKiB,MAAM;EAC3B,IAAID,OAAA,KAAY,GAAG;IACjB,OAAOE,OAAA,CAAQlB,IAAA,EAAM,CAAC;EACxB;EACA,OAAOkB,OAAA,CAAQlB,IAAA,EAAM,CAACgB,OAAA,GAAU;AAClC;AAEA;;;;;;;;;;;;;;;;;AAiBA,OAAO,SAASE,QAAQlB,IAAU,EAAEmB,QAAgB;EAClD,IAAMC,QAAA,GAAW,IAAIlB,IAAA,CAAKF,IAAA,CAAKG,OAAO;EACtCiB,QAAA,CAASC,OAAO,CAACD,QAAA,CAASR,OAAO,KAAKO,QAAA;EACtC,OAAOC,QAAA;AACT;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASE,4BAA4BC,SAAiB;EAC3D,OAAO,IAAIrB,IAAA,CAAKqB,SAAA,GAAY;AAC9B;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASC,yBAAyBxB,IAAU;EACjD,OAAOyB,IAAA,CAAKC,KAAK,CAAC1B,IAAA,CAAKG,OAAO,KAAK;AACrC;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASwB,yBAAyB3B,IAAU;EACjD,IAAMW,GAAA,GAAMX,IAAA,CAAKY,OAAO;EACxB,IAAMH,KAAA,GAAQT,IAAA,CAAKU,QAAQ,KAAK;EAChC,IAAMH,IAAA,GAAOP,IAAA,CAAKQ,WAAW;EAE7B,OAAO,CAACD,IAAA,EAAMZ,WAAA,CAAYc,KAAA,GAAQd,WAAA,CAAYgB,GAAA,EAAK,CAACiB,IAAI,CAAC;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}