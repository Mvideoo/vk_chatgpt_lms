{"ast":null,"code":"import * as React from \"react\";\nimport { shouldTriggerClickOnEnterOrSpace } from \"./accessibility.js\";\nimport { isHTMLElement } from \"./dom.js\";\nexport function setRef(element1, ref) {\n  if (ref) {\n    if (typeof ref === 'function') {\n      ref(element1);\n    } else {\n      ref.current = element1;\n    }\n  }\n}\nexport function multiRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  let current = null;\n  return {\n    get current() {\n      return current;\n    },\n    set current(element) {\n      current = element;\n      refs.forEach(ref => ref && setRef(element, ref));\n    }\n  };\n}\nexport const stopPropagation = event => event.stopPropagation();\nexport function addClassNameToElement(element1, className) {\n  const elementClassName = element1.getAttribute('class') || '';\n  const updatedClassName = `${elementClassName}${elementClassName ? ' ' : ''}${className}`;\n  element1.setAttribute('class', updatedClassName);\n}\nexport function removeClassNameFromElement(element1, classNameToRemove) {\n  const classNamesArray = (element1.getAttribute('class') || '').split(/\\s+/);\n  const elementIndexToRemove = classNamesArray.findIndex(className => className === classNameToRemove);\n  if (elementIndexToRemove === -1) {\n    return;\n  }\n  classNamesArray.splice(elementIndexToRemove, 1);\n  element1.setAttribute('class', classNamesArray.join(' '));\n}\nexport const excludeKeysWithUndefined = obj => {\n  const filteredObj = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && obj[key] !== undefined) {\n      filteredObj[key] = obj[key];\n    }\n  }\n  return filteredObj;\n};\nexport const isDOMTypeElement = element1 => typeof element1.type === 'string';\nexport function isValidNotReactFragmentElement(children) {\n  return React.isValidElement(children) &&\n  // @ts-expect-error: TS2339 $$typeof всегда symbol, в отличии от type, благодаря этому пропускаем лишние проверки на тип.\n  children.$$typeof !== Symbol.for('react.fragment');\n}\nexport function isForwardRefElement(children) {\n  if (!React.isValidElement(children)) {\n    return false;\n  }\n  // @ts-expect-error: TS2339 $$typeof всегда symbol, в отличии от type, благодаря этому пропускаем лишние проверки на тип.\n  // черпаем вдохновение из react-is https://github.com/facebook/react/blob/d48dbb824985166ecb7b2959db03090a8593dce0/packages/react-is/src/ReactIs.js#L119-L121\n  const typeOfOfType = children.type && children.type.$$typeof;\n  return typeOfOfType === Symbol.for('react.forward_ref');\n}\n/**\n * При использовании пропа fetchPriority генерируется warning \"Invalid DOM property\" (версия React 18.*)\n * Ворнинга нет в React версии 19.*, поэтому пока поддерживаем 2 версии наименования\n */\nexport function getFetchPriorityProp(value) {\n  if (React.version.startsWith('19')) {\n    return {\n      fetchPriority: value\n    };\n  }\n  return {\n    fetchpriority: value\n  };\n}\n/*\n * [a11y]\n * Обрабатывает событие onkeydown\n * для кастомных доступных элементов:\n * - role=\"link\" (активация по Enter)\n * - role=\"button\" (активация по Space и Enter)\n */\nexport function clickByKeyboardHandler(event) {\n  var _event_target_click, _event_target;\n  if (!isHTMLElement(event.target) || !shouldTriggerClickOnEnterOrSpace(event)) {\n    return;\n  }\n  event.preventDefault();\n  (_event_target_click = (_event_target = event.target).click) === null || _event_target_click === void 0 ? void 0 : _event_target_click.call(_event_target);\n}","map":{"version":3,"names":["React","shouldTriggerClickOnEnterOrSpace","isHTMLElement","setRef","element1","ref","current","multiRef","_len","arguments","length","refs","Array","_key","element","forEach","stopPropagation","event","addClassNameToElement","className","elementClassName","getAttribute","updatedClassName","setAttribute","removeClassNameFromElement","classNameToRemove","classNamesArray","split","elementIndexToRemove","findIndex","splice","join","excludeKeysWithUndefined","obj","filteredObj","key","hasOwnProperty","undefined","isDOMTypeElement","type","isValidNotReactFragmentElement","children","isValidElement","$$typeof","Symbol","for","isForwardRefElement","typeOfOfType","getFetchPriorityProp","value","version","startsWith","fetchPriority","fetchpriority","clickByKeyboardHandler","_event_target_click","_event_target","target","preventDefault","click","call"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/lib/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { shouldTriggerClickOnEnterOrSpace } from './accessibility';\nimport { isHTMLElement } from './dom';\n\nexport type ImgOnlyAttributes = {\n  [index in Exclude<\n    keyof React.ImgHTMLAttributes<HTMLImageElement>,\n    keyof React.HTMLAttributes<HTMLImageElement>\n  >]: React.ImgHTMLAttributes<HTMLImageElement>[index];\n};\n\nexport function setRef<T>(element: T, ref?: React.Ref<T>): void {\n  if (ref) {\n    if (typeof ref === 'function') {\n      ref(element);\n    } else {\n      (ref as React.RefObject<T>).current = element;\n    }\n  }\n}\n\nexport function multiRef<T>(...refs: Array<React.Ref<T> | undefined>): React.RefObject<T | null> {\n  let current: T | null = null;\n  return {\n    get current() {\n      return current;\n    },\n    set current(element) {\n      current = element;\n      refs.forEach((ref) => ref && setRef(element, ref));\n    },\n  };\n}\n\nexport const stopPropagation = <T extends React.SyntheticEvent>(event: T): void =>\n  event.stopPropagation();\n\nexport function addClassNameToElement(element: HTMLElement, className: string): void {\n  const elementClassName = element.getAttribute('class') || '';\n  const updatedClassName = `${elementClassName}${elementClassName ? ' ' : ''}${className}`;\n\n  element.setAttribute('class', updatedClassName);\n}\n\nexport function removeClassNameFromElement(element: HTMLElement, classNameToRemove: string): void {\n  const classNamesArray = (element.getAttribute('class') || '').split(/\\s+/);\n  const elementIndexToRemove = classNamesArray.findIndex(\n    (className) => className === classNameToRemove,\n  );\n  if (elementIndexToRemove === -1) {\n    return;\n  }\n  classNamesArray.splice(elementIndexToRemove, 1);\n\n  element.setAttribute('class', classNamesArray.join(' '));\n}\n\ntype ExcludeKeysWithUndefined<T> = {\n  [P in keyof T]?: Exclude<T[P], undefined>;\n};\n\nexport const excludeKeysWithUndefined = <T extends Record<string | number | symbol, any>>(\n  obj: T,\n): ExcludeKeysWithUndefined<T> => {\n  const filteredObj: ExcludeKeysWithUndefined<T> = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && obj[key] !== undefined) {\n      filteredObj[key] = obj[key];\n    }\n  }\n  return filteredObj;\n};\n\nexport const isDOMTypeElement = <\n  P extends React.HTMLAttributes<T> | React.SVGAttributes<T>,\n  T extends Element,\n>(\n  element: React.ReactElement,\n): element is Omit<React.DOMElement<P, T>, 'ref'> & { ref?: React.Ref<T> | undefined } =>\n  typeof element.type === 'string';\n\nexport function isValidNotReactFragmentElement(\n  children: Parameters<typeof React.isValidElement>[0],\n): children is React.ReactElement<Record<PropertyKey, any>> {\n  return (\n    React.isValidElement(children) &&\n    // @ts-expect-error: TS2339 $$typeof всегда symbol, в отличии от type, благодаря этому пропускаем лишние проверки на тип.\n    children.$$typeof !== Symbol.for('react.fragment')\n  );\n}\n\nexport function isForwardRefElement<\n  P extends React.HTMLAttributes<T> | React.SVGAttributes<T>,\n  T extends Element,\n>(\n  children: Parameters<typeof React.isValidElement>[0],\n): children is Omit<React.DOMElement<P, T>, 'ref'> & { ref?: React.Ref<T> | undefined } {\n  if (!React.isValidElement(children)) {\n    return false;\n  }\n\n  // @ts-expect-error: TS2339 $$typeof всегда symbol, в отличии от type, благодаря этому пропускаем лишние проверки на тип.\n  // черпаем вдохновение из react-is https://github.com/facebook/react/blob/d48dbb824985166ecb7b2959db03090a8593dce0/packages/react-is/src/ReactIs.js#L119-L121\n  const typeOfOfType = children.type && children.type.$$typeof;\n  return typeOfOfType === Symbol.for('react.forward_ref');\n}\n\n/**\n * При использовании пропа fetchPriority генерируется warning \"Invalid DOM property\" (версия React 18.*)\n * Ворнинга нет в React версии 19.*, поэтому пока поддерживаем 2 версии наименования\n */\nexport function getFetchPriorityProp(value: React.ImgHTMLAttributes<HTMLElement>['fetchPriority']):\n  | {\n      fetchPriority: 'high' | 'low' | 'auto' | undefined;\n    }\n  | {\n      fetchpriority: 'high' | 'low' | 'auto' | undefined;\n    } {\n  if (React.version.startsWith('19')) {\n    return { fetchPriority: value };\n  }\n  return { fetchpriority: value };\n}\n\n/*\n * [a11y]\n * Обрабатывает событие onkeydown\n * для кастомных доступных элементов:\n * - role=\"link\" (активация по Enter)\n * - role=\"button\" (активация по Space и Enter)\n */\nexport function clickByKeyboardHandler(event: React.KeyboardEvent<HTMLDivElement>): void {\n  if (!isHTMLElement(event.target) || !shouldTriggerClickOnEnterOrSpace(event)) {\n    return;\n  }\n\n  event.preventDefault();\n  event.target.click?.();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}