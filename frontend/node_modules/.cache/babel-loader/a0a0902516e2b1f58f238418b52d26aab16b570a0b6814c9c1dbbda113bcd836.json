{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from 'react';\nimport { appearanceTypes, useIconAppearance } from '../IconAppearanceProvider/IconAppearanceProvider';\nimport { getDensityBucketAppearanceKey } from './utils/getDensityBucketAppearanceKey';\n// https://developer.android.com/training/multiscreen/screendensities#TaskProvideAltBmp\nvar dppxModifiersMap = {\n  mdpi: 1,\n  hdpi: 1.5,\n  // Должно быть 2, но так как мы пропускаем при генерации hdpi, понижаем это значение.\n  // Считаем избыточным генерацию hdpi, xhdpi в использовании для hdpi не сильно шакалится.\n  xhdpi: 1.5,\n  xxhdpi: 3,\n  xxxhdpi: 4\n};\nvar densityBucketTypes = Object.keys(dppxModifiersMap);\nvar RasterIcon = /*#__PURE__*/React.memo(function RasterIcon(_param) {\n  var getRootRef = _param.getRootRef,\n    id = _param.id,\n    size = _param.size,\n    className = _param.className,\n    restProps = _object_without_properties(_param, [\"getRootRef\", \"id\", \"size\", \"className\"]);\n  var appearance = useIconAppearance();\n  var srcSet = densityBucketTypes.reduce(function (set, densityBucket) {\n    var densityAppearanceKey = getDensityBucketAppearanceKey(appearance, densityBucket);\n    var src = restProps[densityAppearanceKey];\n    delete restProps[densityAppearanceKey];\n    var _iteratorNormalCompletion = true,\n      _didIteratorError = false,\n      _iteratorError = undefined;\n    try {\n      for (var _iterator = appearanceTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var appearance1 = _step.value;\n        var densityAppearanceKey1 = getDensityBucketAppearanceKey(appearance1, densityBucket);\n        if (!src) {\n          src = restProps[densityAppearanceKey1];\n        }\n        delete restProps[densityAppearanceKey1];\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    if (src) {\n      set.push(\"\".concat(src, \" \").concat(dppxModifiersMap[densityBucket], \"x\"));\n    }\n    return set;\n  }, []).join(', ');\n  return /*#__PURE__*/React.createElement(\"img\", _object_spread({\n    ref: getRootRef,\n    \"aria-hidden\": \"true\",\n    alt: \"\",\n    className: ['vkuiIcon', \"vkuiIcon--\".concat(size), \"vkuiIcon--w-\".concat(size), \"vkuiIcon--h-\".concat(size), \"vkuiIcon--\".concat(id), 'vkuiRasterIcon', className].join(' ').trim(),\n    width: size,\n    height: size,\n    srcSet: srcSet,\n    loading: \"lazy\",\n    draggable: false\n  }, restProps));\n});\nexport function makeRasterIcon(componentName, id, size, densityBucketAppearanceSet) {\n  var Icon = function (props) {\n    return /*#__PURE__*/React.createElement(RasterIcon, _object_spread({\n      id: id,\n      size: size\n    }, densityBucketAppearanceSet, props));\n  };\n  Icon.size = size;\n  Icon.isRasterIcon = true;\n  Icon.displayName = componentName;\n  return Icon;\n}","map":{"version":3,"names":["React","appearanceTypes","useIconAppearance","getDensityBucketAppearanceKey","dppxModifiersMap","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","densityBucketTypes","Object","keys","RasterIcon","memo","_param","getRootRef","id","size","className","restProps","_object_without_properties","appearance","srcSet","reduce","set","densityBucket","densityAppearanceKey","src","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","appearance1","value","densityAppearanceKey1","err","return","push","concat","join","createElement","_object_spread","ref","alt","trim","width","height","loading","draggable","makeRasterIcon","componentName","densityBucketAppearanceSet","Icon","props","isRasterIcon","displayName"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/node_modules/@vkontakte/icons/node_modules/@vkontakte/icons-sprite/src/raster/components/RasterIcon/RasterIcon.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport {\n  appearanceTypes,\n  useIconAppearance,\n} from '../IconAppearanceProvider/IconAppearanceProvider';\nimport type { DensityBucketAppearanceSet, DensityBucketType } from './types';\nimport { getDensityBucketAppearanceKey } from './utils/getDensityBucketAppearanceKey';\n\ninterface RasterIconBaseProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  getRootRef?: React.Ref<HTMLImageElement>;\n}\n\ninterface RasterIconInternalProps extends DensityBucketAppearanceSet {\n  id: string;\n  size: number;\n}\n\ntype RasterIconProps = RasterIconInternalProps & RasterIconBaseProps;\n\n// https://developer.android.com/training/multiscreen/screendensities#TaskProvideAltBmp\nconst dppxModifiersMap: Record<DensityBucketType, number> = {\n  mdpi: 1,\n  hdpi: 1.5,\n  // Должно быть 2, но так как мы пропускаем при генерации hdpi, понижаем это значение.\n  // Считаем избыточным генерацию hdpi, xhdpi в использовании для hdpi не сильно шакалится.\n  xhdpi: 1.5,\n  xxhdpi: 3,\n  xxxhdpi: 4,\n};\n\nconst densityBucketTypes = Object.keys(dppxModifiersMap) as DensityBucketType[];\n\nconst RasterIcon = React.memo(function RasterIcon({\n  getRootRef,\n  id,\n  size,\n  className,\n  ...restProps\n}: RasterIconProps) {\n  const appearance = useIconAppearance();\n\n  const srcSet = densityBucketTypes\n    .reduce<string[]>((set, densityBucket) => {\n      const densityAppearanceKey = getDensityBucketAppearanceKey(appearance, densityBucket);\n      let src = restProps[densityAppearanceKey];\n      delete restProps[densityAppearanceKey];\n\n      for (const appearance of appearanceTypes) {\n        const densityAppearanceKey = getDensityBucketAppearanceKey(appearance, densityBucket);\n        if (!src) {\n          src = restProps[densityAppearanceKey];\n        }\n\n        delete restProps[densityAppearanceKey];\n      }\n\n      if (src) {\n        set.push(`${src} ${dppxModifiersMap[densityBucket]}x`);\n      }\n\n      return set;\n    }, [])\n    .join(', ');\n\n  return (\n    <img\n      ref={getRootRef}\n      aria-hidden=\"true\"\n      alt=\"\"\n      className={[\n        'vkuiIcon',\n        `vkuiIcon--${size}`,\n        `vkuiIcon--w-${size}`,\n        `vkuiIcon--h-${size}`,\n        `vkuiIcon--${id}`,\n        'vkuiRasterIcon',\n        className,\n      ]\n        .join(' ')\n        .trim()}\n      width={size}\n      height={size}\n      srcSet={srcSet}\n      loading=\"lazy\"\n      draggable={false}\n      {...restProps}\n    />\n  );\n});\n\nexport function makeRasterIcon<Props extends RasterIconBaseProps>(\n  componentName: string,\n  id: string,\n  size: number,\n  densityBucketAppearanceSet: DensityBucketAppearanceSet,\n): React.FC<Props> {\n  const Icon = (props: Props): JSX.Element => {\n    return <RasterIcon id={id} size={size} {...densityBucketAppearanceSet} {...props} />;\n  };\n\n  Icon.size = size;\n  Icon.isRasterIcon = true;\n  Icon.displayName = componentName;\n\n  return Icon;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}