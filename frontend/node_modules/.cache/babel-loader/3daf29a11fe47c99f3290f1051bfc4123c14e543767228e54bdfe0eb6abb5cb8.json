{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { isEqual } from \"@vkontakte/vkjs\";\nimport { defaultFilterFn } from \"../../lib/select.js\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect.js\";\nimport { transformValue, useChipsInput } from \"../ChipsInput/useChipsInput.js\";\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, getNewOptionDataDefault, getOptionLabelDefault, getOptionValueDefault } from \"../ChipsInputBase/constants.js\";\nimport { DEFAULT_EMPTY_TEXT, DEFAULT_SELECTED_BEHAVIOR, isNotServicePreset } from \"./constants.js\";\nexport const useChipsSelect = _ref => {\n  let {\n    // common\n    disabled,\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionLabel = getOptionLabelDefault,\n    getOptionValue = getOptionValueDefault,\n    getNewOptionData = getNewOptionDataDefault,\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue = DEFAULT_INPUT_VALUE,\n    onInputChange: onInputChangeProp,\n    // dropdown\n    creatable = false,\n    emptyText = DEFAULT_EMPTY_TEXT,\n    filterFn = defaultFilterFn,\n    sortFn = false,\n    selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n    options: optionsProp = DEFAULT_VALUE,\n    onClose,\n    onOpen\n  } = _ref;\n  const _useChipsInput = useChipsInput({\n      // option\n      value: valueProp,\n      defaultValue,\n      onChange,\n      getOptionValue,\n      getOptionLabel,\n      getNewOptionData,\n      // input\n      inputValue: inputValueProp,\n      defaultInputValue,\n      onInputChange: onInputChangeProp,\n      // other\n      disabled\n    }),\n    {\n      value,\n      inputValue,\n      onInputChange\n    } = _useChipsInput,\n    restChipsInputProps = _object_without_properties(_useChipsInput, [\"value\", \"inputValue\", \"onInputChange\"]);\n  // dropdown\n  const [opened, setOpened] = React.useState(false);\n  const [options, setOptions] = React.useState(() => opened ? transformOptions({\n    value,\n    getOptionValue,\n    getOptionLabel,\n    inputValue,\n    emptyText,\n    creatable,\n    filterFn,\n    sortFn,\n    options: optionsProp,\n    selectedBehavior\n  }) : []);\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState(0);\n  const [focusedOption, setFocusedOption] = React.useState(null);\n  const handleOpened = React.useCallback(isOpened => {\n    isOpened ? onOpen === null || onOpen === void 0 ? void 0 : onOpen() : onClose === null || onClose === void 0 ? void 0 : onClose();\n    setOpened(isOpened);\n  }, [onOpen, onClose]);\n  const handleInputChange = React.useCallback(event => {\n    onInputChange(event);\n    if (!opened) {\n      handleOpened(true);\n      setFocusedOptionIndex(0);\n    }\n  }, [onInputChange, opened, handleOpened]);\n  useIsomorphicLayoutEffect(function handleDropdownOpen() {\n    if (!opened) {\n      return;\n    }\n    setOptions(prevOptions => {\n      const nextOptions = transformOptions({\n        value,\n        getOptionValue,\n        getOptionLabel,\n        inputValue,\n        emptyText,\n        creatable,\n        filterFn,\n        sortFn,\n        options: optionsProp,\n        selectedBehavior\n      });\n      if (isEqual(prevOptions, nextOptions)) {\n        return prevOptions;\n      }\n      return nextOptions;\n    });\n  }, [opened, value, getOptionLabel, getOptionValue, inputValue, optionsProp, creatable, selectedBehavior, filterFn, sortFn]);\n  return _object_spread_props(_object_spread({}, restChipsInputProps), {\n    // options\n    value,\n    // input\n    inputValue,\n    onInputChange: handleInputChange,\n    // dropdown states\n    options,\n    opened,\n    setOpened: handleOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex\n  });\n};\nfunction transformOptions(_ref2) {\n  let {\n    value,\n    getOptionValue = getOptionValueDefault,\n    getOptionLabel = getOptionLabelDefault,\n    inputValue = DEFAULT_INPUT_VALUE,\n    emptyText = DEFAULT_EMPTY_TEXT,\n    creatable = false,\n    sortFn = false,\n    filterFn = defaultFilterFn,\n    options: optionsProp = DEFAULT_VALUE,\n    selectedBehavior = DEFAULT_SELECTED_BEHAVIOR\n  } = _ref2;\n  const filteredOptionsProp = filterFn ? optionsProp.filter(option => filterFn(inputValue, option, getOptionLabel)) : optionsProp;\n  if (filteredOptionsProp.length === 0) {\n    if (inputValue !== DEFAULT_INPUT_VALUE && typeof creatable === 'string') {\n      return [{\n        actionText: creatable\n      }];\n    }\n    return [{\n      placeholder: emptyText\n    }];\n  }\n  if (sortFn) {\n    filteredOptionsProp.sort((optionA, optionB) => sortFn(optionA, optionB, inputValue));\n  }\n  const parsedOptions = transformValue(filteredOptionsProp, getOptionValue, getOptionLabel);\n  if (selectedBehavior === 'hide') {\n    const selected = value.map(item => item.value);\n    return parsedOptions.filter(item => isNotServicePreset(item) ? !selected.includes(item.value) : false);\n  }\n  return parsedOptions;\n}","map":{"version":3,"names":["React","isEqual","defaultFilterFn","useIsomorphicLayoutEffect","transformValue","useChipsInput","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","getNewOptionDataDefault","getOptionLabelDefault","getOptionValueDefault","DEFAULT_EMPTY_TEXT","DEFAULT_SELECTED_BEHAVIOR","isNotServicePreset","useChipsSelect","_ref","disabled","value","valueProp","defaultValue","onChange","getOptionLabel","getOptionValue","getNewOptionData","inputValue","inputValueProp","defaultInputValue","onInputChange","onInputChangeProp","creatable","emptyText","filterFn","sortFn","selectedBehavior","options","optionsProp","onClose","onOpen","_useChipsInput","restChipsInputProps","_object_without_properties","opened","setOpened","useState","setOptions","transformOptions","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","handleOpened","useCallback","isOpened","handleInputChange","event","handleDropdownOpen","prevOptions","nextOptions","_object_spread_props","_object_spread","_ref2","filteredOptionsProp","filter","option","length","actionText","placeholder","sort","optionA","optionB","parsedOptions","selected","map","item","includes"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/ChipsSelect/useChipsSelect.ts"],"sourcesContent":["import * as React from 'react';\nimport { isEqual } from '@vkontakte/vkjs';\nimport { type SimulateReactInputTargetState } from '../../lib/react';\nimport { defaultFilterFn, type FilterFn, type SortFn } from '../../lib/select';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport {\n  transformValue,\n  useChipsInput,\n  type UseChipsInputProps,\n} from '../ChipsInput/useChipsInput';\nimport {\n  DEFAULT_INPUT_VALUE,\n  DEFAULT_VALUE,\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n} from '../ChipsInputBase/constants';\nimport type { ChipOption, ChipOptionLabel, ChipOptionValue } from '../ChipsInputBase/types';\nimport { DEFAULT_EMPTY_TEXT, DEFAULT_SELECTED_BEHAVIOR, isNotServicePreset } from './constants';\nimport type { OptionPreset } from './types';\n\nexport interface UseChipsSelectProps<O extends ChipOption = ChipOption>\n  extends UseChipsInputProps<O> {\n  options?: O[];\n  /**\n   * Возможность создавать чипы которых нет в списке:\n   * - `true` – добавление по кнопке Enter;\n   * - `<текст>` – помимо возможности добавления через Enter, в пункте меню появится кнопка с текстом.\n   * Текст для пункта, создающего чипы при клике, также отвечает за то, будет ли показан этот пункт\n   * (показывается после того как в списке не останется опций).\n   */\n  creatable?: boolean | string;\n  /**\n   * Текст, который показывается если список опций пуст\n   */\n  emptyText?: string;\n  /**\n   * Показывать или скрывать уже выбранные опции.\n   */\n  selectedBehavior?: 'hide' | 'highlight';\n  filterFn?: false | FilterFn<O>;\n  sortFn?: false | SortFn<O>;\n  /**\n   * Будет вызвано в момент скрытия выпадающего списка\n   */\n  onClose?: VoidFunction;\n  /**\n   * Будет вызвано в момент открытия выпадающего списка\n   */\n  onOpen?: VoidFunction;\n}\n\nexport const useChipsSelect = <O extends ChipOption>({\n  // common\n  disabled,\n\n  // option\n  value: valueProp,\n  defaultValue,\n  onChange,\n  getOptionLabel = getOptionLabelDefault,\n  getOptionValue = getOptionValueDefault,\n  getNewOptionData = getNewOptionDataDefault,\n\n  // input\n  inputValue: inputValueProp,\n  defaultInputValue = DEFAULT_INPUT_VALUE,\n  onInputChange: onInputChangeProp,\n\n  // dropdown\n  creatable = false,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  filterFn = defaultFilterFn,\n  sortFn = false,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  options: optionsProp = DEFAULT_VALUE,\n  onClose,\n  onOpen,\n}: UseChipsSelectProps<O>): {\n  // options\n  value: Array<\n    O & {\n      label: ChipOptionLabel;\n      value: ChipOptionValue;\n    }\n  >;\n  // input\n  inputValue: string;\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  // dropdown states\n  options: Array<OptionPreset<O>>;\n  opened: boolean;\n  setOpened: (isOpened: boolean) => void;\n  focusedOption: O | null;\n  focusedOptionIndex: number | null;\n  setFocusedOption: React.Dispatch<React.SetStateAction<O | null>>;\n  setFocusedOptionIndex: React.Dispatch<React.SetStateAction<number | null>>;\n  addOption: (newValue: string | O) => void;\n  addOptionFromInput: (inputValue: string) => void;\n  removeOption: (newValue: ChipOptionValue | O) => void;\n  clearOptions: () => void;\n  inputRef: React.RefObject<(HTMLInputElement & SimulateReactInputTargetState) | null>;\n  clearInput: () => void;\n} => {\n  const { value, inputValue, onInputChange, ...restChipsInputProps } = useChipsInput({\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue,\n    onInputChange: onInputChangeProp,\n\n    // other\n    disabled,\n  });\n\n  // dropdown\n  const [opened, setOpened] = React.useState(false);\n  const [options, setOptions] = React.useState<Array<OptionPreset<O>>>(() =>\n    opened\n      ? transformOptions({\n          value,\n          getOptionValue,\n          getOptionLabel,\n          inputValue,\n          emptyText,\n          creatable,\n          filterFn,\n          sortFn,\n          options: optionsProp,\n          selectedBehavior,\n        })\n      : [],\n  );\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | null>(0);\n  const [focusedOption, setFocusedOption] = React.useState<O | null>(null);\n\n  const handleOpened = React.useCallback(\n    (isOpened: boolean) => {\n      isOpened ? onOpen?.() : onClose?.();\n      setOpened(isOpened);\n    },\n    [onOpen, onClose],\n  );\n\n  const handleInputChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onInputChange(event);\n\n      if (!opened) {\n        handleOpened(true);\n        setFocusedOptionIndex(0);\n      }\n    },\n    [onInputChange, opened, handleOpened],\n  );\n\n  useIsomorphicLayoutEffect(\n    function handleDropdownOpen() {\n      if (!opened) {\n        return;\n      }\n\n      setOptions((prevOptions) => {\n        const nextOptions = transformOptions({\n          value,\n          getOptionValue,\n          getOptionLabel,\n          inputValue,\n          emptyText,\n          creatable,\n          filterFn,\n          sortFn,\n          options: optionsProp,\n          selectedBehavior,\n        });\n\n        if (isEqual(prevOptions, nextOptions)) {\n          return prevOptions;\n        }\n\n        return nextOptions;\n      });\n    },\n    [\n      opened,\n      value,\n      getOptionLabel,\n      getOptionValue,\n      inputValue,\n      optionsProp,\n      creatable,\n      selectedBehavior,\n      filterFn,\n      sortFn,\n    ],\n  );\n\n  return {\n    ...restChipsInputProps,\n\n    // options\n    value,\n\n    // input\n    inputValue,\n    onInputChange: handleInputChange,\n\n    // dropdown states\n    options,\n    opened,\n    setOpened: handleOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  };\n};\n\nfunction transformOptions<O extends ChipOption>({\n  value,\n  getOptionValue = getOptionValueDefault,\n  getOptionLabel = getOptionLabelDefault,\n  inputValue = DEFAULT_INPUT_VALUE,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  creatable = false,\n  sortFn = false,\n  filterFn = defaultFilterFn,\n  options: optionsProp = DEFAULT_VALUE,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n}: Required<Pick<UseChipsSelectProps<O>, 'value'>> &\n  Pick<\n    UseChipsSelectProps<O>,\n    | 'getOptionValue'\n    | 'getOptionLabel'\n    | 'inputValue'\n    | 'emptyText'\n    | 'creatable'\n    | 'filterFn'\n    | 'sortFn'\n    | 'options'\n    | 'selectedBehavior'\n  >) {\n  const filteredOptionsProp = filterFn\n    ? optionsProp.filter((option) => filterFn(inputValue, option, getOptionLabel))\n    : optionsProp;\n\n  if (filteredOptionsProp.length === 0) {\n    if (inputValue !== DEFAULT_INPUT_VALUE && typeof creatable === 'string') {\n      return [{ actionText: creatable }];\n    }\n    return [{ placeholder: emptyText }];\n  }\n\n  if (sortFn) {\n    filteredOptionsProp.sort((optionA, optionB) => sortFn(optionA, optionB, inputValue));\n  }\n\n  const parsedOptions = transformValue(filteredOptionsProp, getOptionValue, getOptionLabel);\n\n  if (selectedBehavior === 'hide') {\n    const selected = value.map((item) => item.value);\n    return parsedOptions.filter((item) =>\n      isNotServicePreset(item) ? !selected.includes(item.value) : false,\n    );\n  }\n  return parsedOptions;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}