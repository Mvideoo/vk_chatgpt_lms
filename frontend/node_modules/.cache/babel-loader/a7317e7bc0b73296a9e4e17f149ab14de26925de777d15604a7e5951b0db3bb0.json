{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useAdaptivity } from \"../../../hooks/useAdaptivity.js\";\nimport { useTokensClassName } from \"../../../lib/tokens/useTokenClassName.js\";\nimport { useConfigProvider } from \"../../ConfigProvider/ConfigProviderContext.js\";\nimport { RootComponent } from \"../../RootComponent/RootComponent.js\";\nimport { AppRootContext } from \"../AppRootContext.js\";\nimport { getSafeAreaInsetsAsCssVariables, getUserSelectModeClassName } from \"../helpers.js\";\nconst sizeYClassNames = {\n  none: \"vkuiAppRootStyleContainer__sizeYNone\",\n  compact: \"vkuiAppRootStyleContainer__sizeYCompact\"\n};\nexport function useAppRootStyles() {\n  const {\n    safeAreaInsets,\n    mode,\n    userSelectMode\n  } = React.useContext(AppRootContext);\n  const {\n    hasPointer,\n    sizeY = 'none'\n  } = useAdaptivity();\n  const {\n    isWebView\n  } = useConfigProvider();\n  const userSelectModeClassName = getUserSelectModeClassName({\n    userSelectMode,\n    isWebView,\n    hasPointer\n  });\n  const tokensClassName = useTokensClassName();\n  return {\n    style: safeAreaInsets ? getSafeAreaInsetsAsCssVariables(safeAreaInsets) : undefined,\n    className: classNames(\"vkuiAppRootStyleContainer__host\", mode === 'embedded' && \"vkuiAppRootStyleContainer__embedded\", sizeY !== 'regular' && sizeYClassNames[sizeY], userSelectModeClassName, tokensClassName)\n  };\n}\n/**\n * Специальный контейнер для переиспользования стилей, токенов и safe-area-inset в:\n * - точке монтирования приложения – `AppRoot`;\n * - точке монтирования порталов для модальных окон – `AppRootPortal`.\n *\n * @private\n */\nexport function AppRootStyleContainer(props) {\n  const {\n    style: appRootStyle,\n    className: appRootClassName\n  } = useAppRootStyles();\n  return /*#__PURE__*/_jsx(RootComponent, _object_spread({\n    baseClassName: appRootClassName,\n    baseStyle: appRootStyle\n  }, props));\n}","map":{"version":3,"names":["React","classNames","useAdaptivity","useTokensClassName","useConfigProvider","RootComponent","AppRootContext","getSafeAreaInsetsAsCssVariables","getUserSelectModeClassName","sizeYClassNames","none","compact","useAppRootStyles","safeAreaInsets","mode","userSelectMode","useContext","hasPointer","sizeY","isWebView","userSelectModeClassName","tokensClassName","style","undefined","className","AppRootStyleContainer","props","appRootStyle","appRootClassName","_jsx","_object_spread","baseClassName","baseStyle"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/AppRoot/AppRootStyleContainer/AppRootStyleContainer.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../../hooks/useAdaptivity';\nimport { useTokensClassName } from '../../../lib/tokens/useTokenClassName';\nimport { useConfigProvider } from '../../ConfigProvider/ConfigProviderContext';\nimport { RootComponent, type RootComponentProps } from '../../RootComponent/RootComponent';\nimport { AppRootContext } from '../AppRootContext';\nimport { getSafeAreaInsetsAsCssVariables, getUserSelectModeClassName } from '../helpers';\nimport styles from './AppRootStyleContainer.module.css';\n\nconst sizeYClassNames = {\n  none: styles.sizeYNone,\n  compact: styles.sizeYCompact,\n};\n\nexport function useAppRootStyles() {\n  const { safeAreaInsets, mode, userSelectMode } = React.useContext(AppRootContext);\n  const { hasPointer, sizeY = 'none' } = useAdaptivity();\n  const { isWebView } = useConfigProvider();\n  const userSelectModeClassName = getUserSelectModeClassName({\n    userSelectMode,\n    isWebView,\n    hasPointer,\n  });\n  const tokensClassName = useTokensClassName();\n\n  return {\n    style: safeAreaInsets ? getSafeAreaInsetsAsCssVariables(safeAreaInsets) : undefined,\n    className: classNames(\n      styles.host,\n      mode === 'embedded' && styles.embedded,\n      sizeY !== 'regular' && sizeYClassNames[sizeY],\n      userSelectModeClassName,\n      tokensClassName,\n    ),\n  };\n}\n\ntype AppRootStyleContainerProps = RootComponentProps<HTMLDivElement>;\n\n/**\n * Специальный контейнер для переиспользования стилей, токенов и safe-area-inset в:\n * - точке монтирования приложения – `AppRoot`;\n * - точке монтирования порталов для модальных окон – `AppRootPortal`.\n *\n * @private\n */\nexport function AppRootStyleContainer(props: AppRootStyleContainerProps) {\n  const { style: appRootStyle, className: appRootClassName } = useAppRootStyles();\n\n  return <RootComponent baseClassName={appRootClassName} baseStyle={appRootStyle} {...props} />;\n}\n"],"mappings":"AAAA;;;;AAEA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,QAAQ;AAC3B,SAASC,aAAa,QAAQ;AAC9B,SAASC,kBAAkB,QAAQ;AACnC,SAASC,iBAAiB,QAAQ;AAClC,SAASC,aAAa,QAAiC;AACvD,SAASC,cAAc,QAAQ;AAC/B,SAASC,+BAA+B,EAAEC,0BAA0B,QAAQ;AAG5E,MAAMC,eAAA,GAAkB;EACtBC,IAAI;EACJC,OAAO;AACT;AAEA,OAAO,SAASC,iBAAA;EACd,MAAM;IAAEC,cAAc;IAAEC,IAAI;IAAEC;EAAc,CAAE,GAAGf,KAAA,CAAMgB,UAAU,CAACV,cAAA;EAClE,MAAM;IAAEW,UAAU;IAAEC,KAAA,GAAQ;EAAM,CAAE,GAAGhB,aAAA;EACvC,MAAM;IAAEiB;EAAS,CAAE,GAAGf,iBAAA;EACtB,MAAMgB,uBAAA,GAA0BZ,0BAAA,CAA2B;IACzDO,cAAA;IACAI,SAAA;IACAF;EACF;EACA,MAAMI,eAAA,GAAkBlB,kBAAA;EAExB,OAAO;IACLmB,KAAA,EAAOT,cAAA,GAAiBN,+BAAA,CAAgCM,cAAA,IAAkBU,SAAA;IAC1EC,SAAA,EAAWvB,UAAA,oCAETa,IAAA,KAAS,qDACTI,KAAA,KAAU,aAAaT,eAAe,CAACS,KAAA,CAAM,EAC7CE,uBAAA,EACAC,eAAA;EAEJ;AACF;AAIA;;;;;;;AAOA,OAAO,SAASI,sBAAsBC,KAAiC;EACrE,MAAM;IAAEJ,KAAA,EAAOK,YAAY;IAAEH,SAAA,EAAWI;EAAgB,CAAE,GAAGhB,gBAAA;EAE7D,oBAAOiB,IAAA,CAACxB,aAAA,EAAAyB,cAAA;IAAcC,aAAA,EAAeH,gBAAA;IAAkBI,SAAA,EAAWL;KAAkBD,KAAA;AACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}