{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { isHTMLElement } from \"@vkontakte/vkui-floating-ui/utils/dom\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity.js\";\nimport { useExternRef } from \"../../hooks/useExternRef.js\";\nimport { getHorizontalFocusGoTo, Keys } from \"../../lib/accessibility.js\";\nimport { contains as checkTargetIsInputEl, contains, getActiveElementByAnotherElement } from \"../../lib/dom.js\";\nimport { FormField } from \"../FormField/FormField.js\";\nimport { FormFieldClearButton } from \"../FormFieldClearButton/FormFieldClearButton.js\";\nimport { Text } from \"../Typography/Text/Text.js\";\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, renderChipDefault } from \"./constants.js\";\nimport { getChipOptionIndexByHTMLElement, getChipOptionIndexByValueProp, getChipOptionValueByHTMLElement, getNextChipOptionIndexByNavigateToProp, isInputValueEmpty } from \"./helpers.js\";\nconst sizeYClassNames = {\n  none: \"vkuiChipsInputBase__sizeYNone\",\n  compact: \"vkuiChipsInputBase__sizeYCompact\"\n};\nexport const ChipsInputBase = _param => {\n  var {\n      // FormFieldProps\n      getRootRef,\n      style,\n      className,\n      before,\n      after,\n      status,\n      mode,\n      maxHeight,\n      // option\n      value = DEFAULT_VALUE,\n      onAddChipOption,\n      onRemoveChipOption: onRemoveChipOptionProp,\n      renderChip = renderChipDefault,\n      // input\n      getRef,\n      id: idProp,\n      inputValue = DEFAULT_INPUT_VALUE,\n      placeholder,\n      disabled,\n      readOnly,\n      addOnBlur,\n      onBlur,\n      onInputChange,\n      // clear\n      ClearButton = FormFieldClearButton,\n      clearButtonShown,\n      clearButtonTestId,\n      onClear\n    } = _param,\n    restProps = _object_without_properties(_param, [\"getRootRef\", \"style\", \"className\", \"before\", \"after\", \"status\", \"mode\", \"maxHeight\", \"value\", \"onAddChipOption\", \"onRemoveChipOption\", \"renderChip\", \"getRef\", \"id\", \"inputValue\", \"placeholder\", \"disabled\", \"readOnly\", \"addOnBlur\", \"onBlur\", \"onInputChange\", \"ClearButton\", \"clearButtonShown\", \"clearButtonTestId\", \"onClear\"]);\n  const {\n    sizeY = 'none'\n  } = useAdaptivity();\n  const idGenerated = React.useId();\n  const inputRef = useExternRef(getRef);\n  const listboxRef = React.useRef(null);\n  const valueLength = value.length;\n  const withPlaceholder = valueLength === 0;\n  const [lastFocusedChipOptionIndex, setLastFocusedChipOptionIndex] = React.useState(0);\n  const resetChipOptionFocusToInputEl = inputEl => {\n    setLastFocusedChipOptionIndex(0);\n    inputEl.focus();\n  };\n  const moveFocusToChipOption = (currentIndex, navigateTo, listboxEl) => {\n    const index = getNextChipOptionIndexByNavigateToProp(currentIndex, navigateTo, valueLength);\n    // eslint-disable-next-line no-restricted-properties\n    const foundEl = listboxEl.querySelector(`[data-index=\"${index}\"]`);\n    if (foundEl) {\n      setLastFocusedChipOptionIndex(index);\n      foundEl.focus();\n    }\n  };\n  const removeChipOption = (o, index) => {\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */if (!inputRef.current || !listboxRef.current) {\n      return;\n    }\n    if (valueLength > 1) {\n      if (index === valueLength - 1) {\n        moveFocusToChipOption(index, 'prev', listboxRef.current);\n      } else {\n        moveFocusToChipOption(index, 'next', listboxRef.current);\n      }\n    } else {\n      resetChipOptionFocusToInputEl(inputRef.current);\n    }\n    onRemoveChipOptionProp(o);\n  };\n  const handleListboxKeyDown = event => {\n    const targetEl = event.target;\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (event.defaultPrevented || !listboxRef.current || !isHTMLElement(targetEl)) {\n      return;\n    }\n    switch (event.key) {\n      case Keys.ENTER:\n        {\n          if (!readOnly && checkTargetIsInputEl(targetEl, inputRef.current) && inputRef.current && !isInputValueEmpty(inputRef.current)) {\n            event.preventDefault();\n            onAddChipOption(inputRef.current.value);\n          }\n          break;\n        }\n      case Keys.DELETE:\n      case Keys.BACKSPACE:\n        {\n          if (!readOnly && valueLength > 0) {\n            if (!checkTargetIsInputEl(targetEl, inputRef.current)) {\n              event.preventDefault();\n              removeChipOption(getChipOptionValueByHTMLElement(targetEl), getChipOptionIndexByHTMLElement(targetEl));\n            } else if (event.key === Keys.BACKSPACE && isInputValueEmpty(inputRef.current)) {\n              event.preventDefault();\n              moveFocusToChipOption(getChipOptionIndexByHTMLElement(targetEl), 'last', listboxRef.current);\n            }\n          }\n          break;\n        }\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT:\n        {\n          if (valueLength !== 0 && !checkTargetIsInputEl(targetEl, inputRef.current)) {\n            event.preventDefault();\n            moveFocusToChipOption(getChipOptionIndexByHTMLElement(targetEl), getHorizontalFocusGoTo(event.key), listboxRef.current);\n          }\n          break;\n        }\n    }\n  };\n  const handleInputBlur = event => {\n    if (onBlur) {\n      onBlur(event);\n    }\n    if (addOnBlur && !event.defaultPrevented && inputRef.current) {\n      onAddChipOption(inputRef.current.value);\n    }\n  };\n  const handleChipRemove = (event, v) => {\n    event.preventDefault();\n    event.stopPropagation();\n    removeChipOption(v, getChipOptionIndexByValueProp(v, value));\n  };\n  const handleRootClick = event => {\n    if (event.defaultPrevented || contains(event.currentTarget, getActiveElementByAnotherElement(event.currentTarget))) {\n      return;\n    }\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  const clearButton = React.useMemo(() => {\n    if (clearButtonShown) {\n      return /*#__PURE__*/_jsx(ClearButton, {\n        onClick: onClear,\n        disabled: disabled,\n        \"data-testid\": clearButtonTestId\n      });\n    }\n    return undefined;\n  }, [ClearButton, clearButtonShown, clearButtonTestId, disabled, onClear]);\n  const afterItems = React.useMemo(() => {\n    if (clearButton || after) {\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [clearButton, after]\n      });\n    }\n    return undefined;\n  }, [after, clearButton]);\n  return /*#__PURE__*/_jsx(FormField, {\n    Component: \"div\",\n    getRootRef: getRootRef,\n    style: style,\n    disabled: disabled,\n    before: before,\n    after: afterItems,\n    status: status,\n    mode: mode,\n    className: className,\n    maxHeight: maxHeight,\n    onClick: disabled ? undefined : handleRootClick,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: classNames(\"vkuiChipsInputBase__host\", sizeY !== 'regular' && sizeYClassNames[sizeY], withPlaceholder && \"vkuiChipsInputBase__hasPlaceholder\"),\n      // для a11y\n      ref: listboxRef,\n      role: \"listbox\",\n      \"aria-orientation\": \"horizontal\",\n      \"aria-disabled\": disabled,\n      \"aria-readonly\": readOnly,\n      onKeyDown: disabled ? undefined : handleListboxKeyDown,\n      children: [value.map((option, index) => /*#__PURE__*/_jsx(React.Fragment, {\n        children: renderChip({\n          'Component': 'div',\n          'value': option.value,\n          'label': option.label,\n          'disabled': option.disabled || disabled,\n          'readOnly': option.readOnly || readOnly,\n          'className': \"vkuiChipsInputBase__chip\",\n          'onRemove': handleChipRemove,\n          // чтобы можно было легче найти этот чип в DOM\n          'data-index': index,\n          'data-value': option.value,\n          // для a11y\n          'tabIndex': lastFocusedChipOptionIndex === index ? 0 : -1,\n          'role': 'option',\n          'aria-selected': true,\n          'aria-posinset': index + 1,\n          'aria-setsize': valueLength\n        }, option)\n      }, `${typeof option.value}-${option.value}`)), /*#__PURE__*/_jsx(Text, _object_spread_props(_object_spread({\n        autoCapitalize: \"none\",\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        spellCheck: false\n      }, restProps), {\n        Component: \"input\",\n        type: \"text\",\n        id: idProp || `chips-input-base-generated-id-${idGenerated}`,\n        getRootRef: inputRef,\n        className: \"vkuiChipsInputBase__el\",\n        disabled: disabled,\n        readOnly: readOnly,\n        placeholder: withPlaceholder ? placeholder : undefined,\n        value: inputValue,\n        onChange: onInputChange,\n        onBlur: handleInputBlur\n      }))]\n    })\n  });\n};","map":{"version":3,"names":["React","classNames","isHTMLElement","useAdaptivity","useExternRef","getHorizontalFocusGoTo","Keys","contains","checkTargetIsInputEl","getActiveElementByAnotherElement","FormField","FormFieldClearButton","Text","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","renderChipDefault","getChipOptionIndexByHTMLElement","getChipOptionIndexByValueProp","getChipOptionValueByHTMLElement","getNextChipOptionIndexByNavigateToProp","isInputValueEmpty","sizeYClassNames","none","compact","ChipsInputBase","_param","getRootRef","style","className","before","after","status","mode","maxHeight","value","onAddChipOption","onRemoveChipOption","onRemoveChipOptionProp","renderChip","getRef","id","idProp","inputValue","placeholder","disabled","readOnly","addOnBlur","onBlur","onInputChange","ClearButton","clearButtonShown","clearButtonTestId","onClear","restProps","_object_without_properties","sizeY","idGenerated","useId","inputRef","listboxRef","useRef","valueLength","length","withPlaceholder","lastFocusedChipOptionIndex","setLastFocusedChipOptionIndex","useState","resetChipOptionFocusToInputEl","inputEl","focus","moveFocusToChipOption","currentIndex","navigateTo","listboxEl","index","foundEl","querySelector","removeChipOption","o","current","handleListboxKeyDown","event","targetEl","target","defaultPrevented","key","ENTER","preventDefault","DELETE","BACKSPACE","ARROW_UP","ARROW_LEFT","ARROW_DOWN","ARROW_RIGHT","handleInputBlur","handleChipRemove","v","stopPropagation","handleRootClick","currentTarget","clearButton","useMemo","_jsx","onClick","undefined","afterItems","_jsxs","_Fragment","Component","ref","role","onKeyDown","map","option","Fragment","label","_object_spread_props","_object_spread","autoCapitalize","autoComplete","autoCorrect","spellCheck","type","onChange"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { isHTMLElement } from '@vkontakte/vkui-floating-ui/utils/dom';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { getHorizontalFocusGoTo, Keys } from '../../lib/accessibility';\nimport {\n  contains as checkTargetIsInputEl,\n  contains,\n  getActiveElementByAnotherElement,\n} from '../../lib/dom';\nimport { FormField } from '../FormField/FormField';\nimport { FormFieldClearButton } from '../FormFieldClearButton/FormFieldClearButton';\nimport { Text } from '../Typography/Text/Text';\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, renderChipDefault } from './constants';\nimport {\n  getChipOptionIndexByHTMLElement,\n  getChipOptionIndexByValueProp,\n  getChipOptionValueByHTMLElement,\n  getNextChipOptionIndexByNavigateToProp,\n  isInputValueEmpty,\n} from './helpers';\nimport type { ChipOption, ChipOptionValue, ChipsInputBasePrivateProps, NavigateTo } from './types';\nimport styles from './ChipsInputBase.module.css';\n\nconst sizeYClassNames = {\n  none: styles.sizeYNone,\n  compact: styles.sizeYCompact,\n} as const;\n\nexport const ChipsInputBase = <O extends ChipOption>({\n  // FormFieldProps\n  getRootRef,\n  style,\n  className,\n  before,\n  after,\n  status,\n  mode,\n  maxHeight,\n\n  // option\n  value = DEFAULT_VALUE,\n  onAddChipOption,\n  onRemoveChipOption: onRemoveChipOptionProp,\n  renderChip = renderChipDefault,\n\n  // input\n  getRef,\n  id: idProp,\n  inputValue = DEFAULT_INPUT_VALUE,\n  placeholder,\n  disabled,\n  readOnly,\n  addOnBlur,\n  onBlur,\n  onInputChange,\n\n  // clear\n  ClearButton = FormFieldClearButton,\n  clearButtonShown,\n  clearButtonTestId,\n  onClear,\n  ...restProps\n}: ChipsInputBasePrivateProps<O>): React.ReactNode => {\n  const { sizeY = 'none' } = useAdaptivity();\n  const idGenerated = React.useId();\n  const inputRef = useExternRef(getRef);\n  const listboxRef = React.useRef<HTMLDivElement>(null);\n\n  const valueLength = value.length;\n  const withPlaceholder = valueLength === 0;\n  const [lastFocusedChipOptionIndex, setLastFocusedChipOptionIndex] = React.useState(0);\n\n  const resetChipOptionFocusToInputEl = (inputEl: HTMLInputElement) => {\n    setLastFocusedChipOptionIndex(0);\n    inputEl.focus();\n  };\n\n  const moveFocusToChipOption = (\n    currentIndex: number,\n    navigateTo: NavigateTo,\n    listboxEl: HTMLElement,\n  ) => {\n    const index = getNextChipOptionIndexByNavigateToProp(currentIndex, navigateTo, valueLength);\n    // eslint-disable-next-line no-restricted-properties\n    const foundEl = listboxEl.querySelector<HTMLElement>(`[data-index=\"${index}\"]`);\n\n    if (foundEl) {\n      setLastFocusedChipOptionIndex(index);\n      foundEl.focus();\n    }\n  };\n\n  const removeChipOption = (o: O | ChipOptionValue, index: number) => {\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (!inputRef.current || !listboxRef.current) {\n      return;\n    }\n\n    if (valueLength > 1) {\n      if (index === valueLength - 1) {\n        moveFocusToChipOption(index, 'prev', listboxRef.current);\n      } else {\n        moveFocusToChipOption(index, 'next', listboxRef.current);\n      }\n    } else {\n      resetChipOptionFocusToInputEl(inputRef.current);\n    }\n\n    onRemoveChipOptionProp(o);\n  };\n\n  const handleListboxKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const targetEl = event.target;\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (event.defaultPrevented || !listboxRef.current || !isHTMLElement(targetEl)) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ENTER: {\n        if (\n          !readOnly &&\n          checkTargetIsInputEl(targetEl, inputRef.current) &&\n          inputRef.current &&\n          !isInputValueEmpty(inputRef.current)\n        ) {\n          event.preventDefault();\n          onAddChipOption(inputRef.current.value);\n        }\n        break;\n      }\n      case Keys.DELETE:\n      case Keys.BACKSPACE: {\n        if (!readOnly && valueLength > 0) {\n          if (!checkTargetIsInputEl(targetEl, inputRef.current)) {\n            event.preventDefault();\n            removeChipOption(\n              getChipOptionValueByHTMLElement(targetEl),\n              getChipOptionIndexByHTMLElement(targetEl),\n            );\n          } else if (event.key === Keys.BACKSPACE && isInputValueEmpty(inputRef.current)) {\n            event.preventDefault();\n            moveFocusToChipOption(\n              getChipOptionIndexByHTMLElement(targetEl),\n              'last',\n              listboxRef.current,\n            );\n          }\n        }\n        break;\n      }\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT: {\n        if (valueLength !== 0 && !checkTargetIsInputEl(targetEl, inputRef.current)) {\n          event.preventDefault();\n          moveFocusToChipOption(\n            getChipOptionIndexByHTMLElement(targetEl),\n            getHorizontalFocusGoTo(event.key),\n            listboxRef.current,\n          );\n        }\n        break;\n      }\n    }\n  };\n\n  const handleInputBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (addOnBlur && !event.defaultPrevented && inputRef.current) {\n      onAddChipOption(inputRef.current.value);\n    }\n  };\n\n  const handleChipRemove = (event: React.MouseEvent, v: ChipOptionValue) => {\n    event.preventDefault();\n    event.stopPropagation();\n    removeChipOption(v, getChipOptionIndexByValueProp(v, value));\n  };\n\n  const handleRootClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (\n      event.defaultPrevented ||\n      contains(event.currentTarget, getActiveElementByAnotherElement(event.currentTarget))\n    ) {\n      return;\n    }\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  const clearButton = React.useMemo(() => {\n    if (clearButtonShown) {\n      return <ClearButton onClick={onClear} disabled={disabled} data-testid={clearButtonTestId} />;\n    }\n    return undefined;\n  }, [ClearButton, clearButtonShown, clearButtonTestId, disabled, onClear]);\n\n  const afterItems = React.useMemo(() => {\n    if (clearButton || after) {\n      return (\n        <>\n          {clearButton}\n          {after}\n        </>\n      );\n    }\n    return undefined;\n  }, [after, clearButton]);\n\n  return (\n    <FormField\n      Component=\"div\"\n      getRootRef={getRootRef}\n      style={style}\n      disabled={disabled}\n      before={before}\n      after={afterItems}\n      status={status}\n      mode={mode}\n      className={className}\n      maxHeight={maxHeight}\n      onClick={disabled ? undefined : handleRootClick}\n    >\n      <div\n        className={classNames(\n          styles.host,\n          sizeY !== 'regular' && sizeYClassNames[sizeY],\n          withPlaceholder && styles.hasPlaceholder,\n        )}\n        // для a11y\n        ref={listboxRef}\n        role=\"listbox\"\n        aria-orientation=\"horizontal\"\n        aria-disabled={disabled}\n        aria-readonly={readOnly}\n        onKeyDown={disabled ? undefined : handleListboxKeyDown}\n      >\n        {value.map((option, index) => (\n          <React.Fragment key={`${typeof option.value}-${option.value}`}>\n            {renderChip(\n              {\n                'Component': 'div',\n                'value': option.value,\n                'label': option.label,\n                'disabled': option.disabled || disabled,\n                'readOnly': option.readOnly || readOnly,\n                'className': styles.chip,\n                'onRemove': handleChipRemove,\n                // чтобы можно было легче найти этот чип в DOM\n                'data-index': index,\n                'data-value': option.value,\n                // для a11y\n                'tabIndex': lastFocusedChipOptionIndex === index ? 0 : -1,\n                'role': 'option',\n                'aria-selected': true,\n                'aria-posinset': index + 1,\n                'aria-setsize': valueLength,\n              },\n              option,\n            )}\n          </React.Fragment>\n        ))}\n        <Text\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          {...restProps}\n          Component=\"input\"\n          type=\"text\"\n          id={idProp || `chips-input-base-generated-id-${idGenerated}`}\n          getRootRef={inputRef}\n          className={styles.el}\n          disabled={disabled}\n          readOnly={readOnly}\n          placeholder={withPlaceholder ? placeholder : undefined}\n          value={inputValue}\n          onChange={onInputChange}\n          onBlur={handleInputBlur}\n        />\n      </div>\n    </FormField>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}