{"ast":null,"code":"import { _ as _to_consumable_array } from \"@swc/helpers/_/_to_consumable_array\";\nimport { uniqueArrayFallback } from \"../internal/uniqueArray.js\";\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(createArray(5), [0, 1, 2, 3, 4]);\n * assert.deepStrictEqual(createArray(3, 2), [2, 3, 4]);\n * ```\n *\n * @param arrayLength Длина массива\n * @param startIndex Начальный индекс (по умолчанию 0)\n */\nexport function createArray(arrayLength) {\n  var startIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n  return Array.from({\n    length: arrayLength\n  }, function (_, index) {\n    return startIndex + index;\n  });\n}\n/**\n * Вычисляет сумму элементов массива\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(sumArray([0, 1, 2, 3, 4]), 10);\n * ```\n */\nexport function sumArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce(function (previous, current) {\n    return current + previous;\n  });\n}\n/**\n * Находит среднее арифметическое элементов массива\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(averageArray([0, 1, 2, 3, 4]), 2);\n * ```\n */\nexport function averageArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n/**\n * Возвращает новый массив с уникальными элементами\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(uniqueArray([1, 1, 2, 2, 3]), [1, 2, 3]);\n * ```\n */\nexport function uniqueArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n  return uniqueArrayFallback(array);\n}\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray(array) {\n  var result = array.slice();\n  for (var i = result.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var ref;\n    ref = [result[j], result[i]], result[i] = ref[0], result[j] = ref[1], ref;\n  }\n  return result;\n}\n/**\n * Разбивает массив на чанки\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   chunkArray([1,2,3,4,5,6,7], 2),\n *   [[1,2], [3,4], [5,6], [7]],\n * );\n * ```\n */\nexport function chunkArray(array, size) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n  if (!size) {\n    return [array];\n  }\n  var head = array.slice(0, size);\n  var tail = array.slice(size);\n  return [head].concat(_to_consumable_array(chunkArray(tail, size)));\n}\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray() {\n  var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],\n    value = arguments.length > 1 ? arguments[1] : void 0;\n  var index = array.indexOf(value);\n  if (index < 0) {\n    return array;\n  } else {\n    return _to_consumable_array(array.slice(0, index)).concat(_to_consumable_array(array.slice(index + 1)));\n  }\n}\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference() {\n  var array1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],\n    array2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n  return array1.reduce(function (res, item) {\n    if (!array2.includes(item)) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}","map":{"version":3,"names":["uniqueArrayFallback","createArray","arrayLength","startIndex","arguments","length","Array","from","_","index","sumArray","array","isArray","reduce","previous","current","averageArray","uniqueArray","Set","shuffleArray","result","slice","i","j","Math","floor","random","ref","chunkArray","size","head","tail","concat","_to_consumable_array","omitFromArray","value","indexOf","difference","array1","array2","res","item","includes","push"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkjs/src/array/arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from '../internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(createArray(5), [0, 1, 2, 3, 4]);\n * assert.deepStrictEqual(createArray(3, 2), [2, 3, 4]);\n * ```\n *\n * @param arrayLength Длина массива\n * @param startIndex Начальный индекс (по умолчанию 0)\n */\nexport function createArray(arrayLength: number, startIndex = 0): number[] {\n  return Array.from({ length: arrayLength }, (_, index) => startIndex + index);\n}\n\n/**\n * Вычисляет сумму элементов массива\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(sumArray([0, 1, 2, 3, 4]), 10);\n * ```\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(averageArray([0, 1, 2, 3, 4]), 2);\n * ```\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(uniqueArray([1, 1, 2, 2, 3]), [1, 2, 3]);\n * ```\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  const result = array.slice();\n\n  for (let i = result.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    [result[i], result[j]] = [result[j], result[i]];\n  }\n\n  return result;\n}\n\n/**\n * Разбивает массив на чанки\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   chunkArray([1,2,3,4,5,6,7], 2),\n *   [[1,2], [3,4], [5,6], [7]],\n * );\n * ```\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (!array2.includes(item)) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}