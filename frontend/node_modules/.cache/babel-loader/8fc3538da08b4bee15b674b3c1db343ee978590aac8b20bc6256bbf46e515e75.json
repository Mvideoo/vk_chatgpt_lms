{"ast":null,"code":"import { _ as _type_of } from \"@swc/helpers/_/_type_of\";\nexport function isObjectLike(object) {\n  return (typeof object === \"undefined\" ? \"undefined\" : _type_of(object)) === 'object' && object !== null;\n}\nexport function isArray(object) {\n  return Array.isArray(object);\n}\nexport function isObject(object) {\n  return Object.prototype.toString.call(object) === '[object Object]';\n}\nexport function isUndefined(object) {\n  return typeof object === 'undefined';\n}\nexport function isFunction(object) {\n  return typeof object === 'function';\n}\nexport function isFormData(object) {\n  return object && Object.prototype.toString.call(object) === '[object FormData]';\n}\nexport function isString(object) {\n  return typeof object === 'string';\n}\n/**\n * Проверяет что переданное значение является `Number`\n *\n * ## Пример\n *\n * ```ts\n * import assert from 'node:assert';\n * import { isNumber } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isNumber(3), true);\n * assert.strictEqual(isNumber(Infinity), true);\n * assert.strictEqual(isNumber('3'), false);\n * ```\n *\n * Для исключения `Infinity` `-Infinity` и `NaN` используйте `Number.isFinite`\n *\n * ```ts\n * import assert from 'node:assert';\n *\n * assert.strictEqual(Number.isFinite(3), true);\n * assert.strictEqual(Number.isFinite(Infinity), false);\n * assert.strictEqual(Number.isFinite('3'), false);\n * ```\n */\nexport function isNumber(object) {\n  return typeof object === 'number';\n}\nexport function isPromiseLike(object) {\n  return (isObject(object) || isFunction(object)) && isFunction(object.then);\n}","map":{"version":3,"names":["isObjectLike","object","_type_of","isArray","Array","isObject","Object","prototype","toString","call","isUndefined","isFunction","isFormData","isString","isNumber","isPromiseLike","then"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkjs/src/typecheck/type_checkers.ts"],"sourcesContent":["export function isObjectLike(object: any): boolean {\n  return typeof object === 'object' && object !== null;\n}\n\nexport function isArray(object: any): object is any[] {\n  return Array.isArray(object);\n}\n\nexport function isObject(object: any): boolean {\n  return Object.prototype.toString.call(object) === '[object Object]';\n}\n\nexport function isUndefined(object: any): object is undefined {\n  return typeof object === 'undefined';\n}\n\nexport function isFunction(object: any): object is (...args: any[]) => any {\n  return typeof object === 'function';\n}\n\nexport function isFormData(object: any): object is FormData {\n  return object && Object.prototype.toString.call(object) === '[object FormData]';\n}\n\nexport function isString(object: any): object is string {\n  return typeof object === 'string';\n}\n\n/**\n * Проверяет что переданное значение является `Number`\n *\n * ## Пример\n *\n * ```ts\n * import assert from 'node:assert';\n * import { isNumber } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isNumber(3), true);\n * assert.strictEqual(isNumber(Infinity), true);\n * assert.strictEqual(isNumber('3'), false);\n * ```\n *\n * Для исключения `Infinity` `-Infinity` и `NaN` используйте `Number.isFinite`\n *\n * ```ts\n * import assert from 'node:assert';\n *\n * assert.strictEqual(Number.isFinite(3), true);\n * assert.strictEqual(Number.isFinite(Infinity), false);\n * assert.strictEqual(Number.isFinite('3'), false);\n * ```\n */\nexport function isNumber(object: any): object is number {\n  return typeof object === 'number';\n}\n\nexport function isPromiseLike<T = any>(object: any): object is PromiseLike<T> {\n  return (isObject(object) || isFunction(object)) && isFunction(object.then);\n}\n"],"mappings":";AAAA,OAAO,SAASA,aAAaC,MAAW;EACtC,OAAO,QAAOA,MAAA,iCAAPC,QAAA,CAAOD,MAAA,CAAK,MAAM,YAAYA,MAAA,KAAW;AAClD;AAEA,OAAO,SAASE,QAAQF,MAAW;EACjC,OAAOG,KAAA,CAAMD,OAAO,CAACF,MAAA;AACvB;AAEA,OAAO,SAASI,SAASJ,MAAW;EAClC,OAAOK,MAAA,CAAOC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACR,MAAA,MAAY;AACpD;AAEA,OAAO,SAASS,YAAYT,MAAW;EACrC,OAAO,OAAOA,MAAA,KAAW;AAC3B;AAEA,OAAO,SAASU,WAAWV,MAAW;EACpC,OAAO,OAAOA,MAAA,KAAW;AAC3B;AAEA,OAAO,SAASW,WAAWX,MAAW;EACpC,OAAOA,MAAA,IAAUK,MAAA,CAAOC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACR,MAAA,MAAY;AAC9D;AAEA,OAAO,SAASY,SAASZ,MAAW;EAClC,OAAO,OAAOA,MAAA,KAAW;AAC3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,SAASa,SAASb,MAAW;EAClC,OAAO,OAAOA,MAAA,KAAW;AAC3B;AAEA,OAAO,SAASc,cAAuBd,MAAW;EAChD,OAAO,CAACI,QAAA,CAASJ,MAAA,KAAWU,UAAA,CAAWV,MAAA,CAAM,KAAMU,UAAA,CAAWV,MAAA,CAAOe,IAAI;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}