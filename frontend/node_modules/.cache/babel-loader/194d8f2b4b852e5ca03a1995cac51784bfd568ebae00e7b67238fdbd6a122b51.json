{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { classNames, hasReactNode } from \"@vkontakte/vkjs\";\nimport { RootComponent } from \"../RootComponent/RootComponent.js\";\nimport { Footnote } from \"../Typography/Footnote/Footnote.js\";\nimport { ScreenSpinnerContext } from \"./context.js\";\nconst stateClassNames = {\n  cancelable: \"vkuiScreenSpinner__stateCancelable\",\n  done: \"vkuiScreenSpinner__stateDone\",\n  error: \"vkuiScreenSpinner__stateError\",\n  custom: \"vkuiScreenSpinner__stateCustom\"\n};\nconst modeClassNames = {\n  shadow: \"vkuiScreenSpinner__modeShadow\",\n  overlay: \"vkuiScreenSpinner__modeOverlay\"\n};\nexport const ScreenSpinnerContainer = _param => {\n  var {\n      state = 'loading',\n      mode = 'shadow',\n      customIcon,\n      label,\n      children\n    } = _param,\n    restProps = _object_without_properties(_param, [\"state\", \"mode\", \"customIcon\", \"label\", \"children\"]);\n  return /*#__PURE__*/_jsx(ScreenSpinnerContext.Provider, {\n    value: {\n      state,\n      label,\n      customIcon\n    },\n    children: /*#__PURE__*/_jsxs(RootComponent, _object_spread_props(_object_spread({\n      baseClassName: classNames(\"vkuiScreenSpinner__host\", modeClassNames[mode], state !== 'loading' && stateClassNames[state], hasReactNode(label) && \"vkuiScreenSpinner__hasLabel\")\n    }, restProps), {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"vkuiScreenSpinner__iconSlot\",\n        children: children\n      }), hasReactNode(label) && /*#__PURE__*/_jsx(Footnote, {\n        className: \"vkuiScreenSpinner__label\",\n        \"aria-hidden\": true,\n        children: label\n      })]\n    }))\n  });\n};\nScreenSpinnerContainer.displayName = 'ScreenSpinnerContainer';","map":{"version":3,"names":["React","classNames","hasReactNode","RootComponent","Footnote","ScreenSpinnerContext","stateClassNames","cancelable","done","error","custom","modeClassNames","shadow","overlay","ScreenSpinnerContainer","_param","state","mode","customIcon","label","children","restProps","_object_without_properties","_jsx","Provider","value","_jsxs","_object_spread_props","_object_spread","baseClassName","className","displayName"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/ScreenSpinner/ScreenSpinnerContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport type { HTMLAttributesWithRootRef } from '../../types';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport { ScreenSpinnerContext } from './context';\nimport { type ScreenSpinnerProps } from './types';\nimport styles from './ScreenSpinner.module.css';\n\nconst stateClassNames = {\n  cancelable: styles.stateCancelable,\n  done: styles.stateDone,\n  error: styles.stateError,\n  custom: styles.stateCustom,\n};\n\nconst modeClassNames = {\n  shadow: styles.modeShadow,\n  overlay: styles.modeOverlay,\n};\n\ntype ScreenSpinnerContainerProps = HTMLAttributesWithRootRef<HTMLSpanElement> &\n  Pick<ScreenSpinnerProps, 'state' | 'mode' | 'label' | 'customIcon'>;\n\nexport const ScreenSpinnerContainer: React.FC<ScreenSpinnerContainerProps> = ({\n  state = 'loading',\n  mode = 'shadow',\n  customIcon,\n  label,\n  children,\n  ...restProps\n}: ScreenSpinnerContainerProps) => {\n  return (\n    <ScreenSpinnerContext.Provider value={{ state, label, customIcon }}>\n      <RootComponent\n        baseClassName={classNames(\n          styles.host,\n          modeClassNames[mode],\n          state !== 'loading' && stateClassNames[state],\n          hasReactNode(label) && styles.hasLabel,\n        )}\n        {...restProps}\n      >\n        <div className={styles.iconSlot}>{children}</div>\n        {hasReactNode(label) && (\n          <Footnote className={styles.label} aria-hidden>\n            {label}\n          </Footnote>\n        )}\n      </RootComponent>\n    </ScreenSpinnerContext.Provider>\n  );\n};\n\nScreenSpinnerContainer.displayName = 'ScreenSpinnerContainer';\n"],"mappings":";;;;AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,EAAEC,YAAY,QAAQ;AAEzC,SAASC,aAAa,QAAQ;AAC9B,SAASC,QAAQ,QAAQ;AACzB,SAASC,oBAAoB,QAAQ;AAIrC,MAAMC,eAAA,GAAkB;EACtBC,UAAU;EACVC,IAAI;EACJC,KAAK;EACLC,MAAM;AACR;AAEA,MAAMC,cAAA,GAAiB;EACrBC,MAAM;EACNC,OAAO;AACT;AAKA,OAAO,MAAMC,sBAAA,GAAgEC,MAAA;MAAC;MAC5EC,KAAA,GAAQ,SAAS;MACjBC,IAAA,GAAO,QAAQ;MACfC,UAAU;MACVC,KAAK;MACLC;IAAQ,CAEoB,GAAAL,MAAA;IADzBM,SAAA,GAAAC,0BAAA,CAAAP,MAAA,GALH,SACA,QACA,cACA,SACA,W;EAGA,oBACEQ,IAAA,CAAClB,oBAAA,CAAqBmB,QAAQ;IAACC,KAAA,EAAO;MAAET,KAAA;MAAOG,KAAA;MAAOD;IAAW;cAC/D,aAAAQ,KAAA,CAACvB,aAAA,EAAAwB,oBAAA,CAAAC,cAAA;MACCC,aAAA,EAAe5B,UAAA,4BAEbU,cAAc,CAACM,IAAA,CAAK,EACpBD,KAAA,KAAU,aAAaV,eAAe,CAACU,KAAA,CAAM,EAC7Cd,YAAA,CAAaiB,KAAA;OAEXE,SAAA;8BAEJE,IAAA,CAAC;QAAIO,SAAS;kBAAoBV;UACjClB,YAAA,CAAaiB,KAAA,kBACZI,IAAA,CAACnB,QAAA;QAAS0B,SAAS;QAAgB,aAAW;kBAC3CX;;;;AAMb;AAEAL,sBAAA,CAAuBiB,WAAW,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}