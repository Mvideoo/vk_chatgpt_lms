{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useRef } from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { getTextFromChildren } from \"../../../lib/children.js\";\nimport { useIsomorphicLayoutEffect } from \"../../../lib/useIsomorphicLayoutEffect.js\";\nimport { RootComponent } from \"../../RootComponent/RootComponent.js\";\n/** Компонент ограничивает текстовый контент, убирая его в многоточие.\n *\n * @since 6.1.0\n * @see https://vkcom.github.io/VKUI/#/EllipsisText\n */\nconst EllipsisText = _param => {\n  var {\n      Component = 'span',\n      className,\n      children,\n      maxWidth,\n      maxLines = 1,\n      disableNativeTitle = false\n    } = _param,\n    restProps = _object_without_properties(_param, [\"Component\", \"className\", \"children\", \"maxWidth\", \"maxLines\", \"disableNativeTitle\"]);\n  const contentRef = useRef(null);\n  useIsomorphicLayoutEffect(() => {\n    if (contentRef && contentRef.current) {\n      contentRef.current.style.setProperty('-webkit-line-clamp', maxLines > 1 ? `${maxLines}` : '');\n    }\n  }, [contentRef, maxLines]);\n  return /*#__PURE__*/_jsx(RootComponent, _object_spread_props(_object_spread({\n    Component: Component,\n    className: classNames(\"vkuiEllipsisText__host\", disableNativeTitle && \"vkuiEllipsisText__disableNativeTitle\", className),\n    title: disableNativeTitle ? undefined : getTextFromChildren(children)\n  }, restProps), {\n    children: /*#__PURE__*/_jsx(\"span\", {\n      style: {\n        maxWidth\n      },\n      ref: contentRef,\n      className: classNames(\"vkuiEllipsisText__content\", maxLines > 1 && \"vkuiEllipsisText__contentMultiline\"),\n      children: children\n    })\n  }));\n};\nexport { EllipsisText };","map":{"version":3,"names":["useRef","classNames","getTextFromChildren","useIsomorphicLayoutEffect","RootComponent","EllipsisText","_param","Component","className","children","maxWidth","maxLines","disableNativeTitle","restProps","_object_without_properties","contentRef","current","style","setProperty","_jsx","_object_spread_props","_object_spread","title","undefined","ref"],"sources":["/Users/viktoriaromazanova/PycharmProjects/vk_chatgpt/frontend/node_modules/@vkontakte/vkui/src/components/Typography/EllipsisText/EllipsisText.tsx"],"sourcesContent":["'use client';\n\nimport { useRef } from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { getTextFromChildren } from '../../../lib/children';\nimport { useIsomorphicLayoutEffect } from '../../../lib/useIsomorphicLayoutEffect';\nimport type { HasRootRef } from '../../../types';\nimport { RootComponent, type RootComponentProps } from '../../RootComponent/RootComponent';\nimport styles from './EllipsisText.module.css';\n\nexport interface EllipsisTextProps\n  extends Omit<RootComponentProps<HTMLElement>, 'title'>,\n    HasRootRef<HTMLElement> {\n  /**\n   * Пользовательская маскимальная ширина.\n   *\n   * Используйте в случаях, когда у контейнера ширина зависит от размера контента,\n   * другими словами, когда ширина не ограничена.\n   */\n  maxWidth?: number;\n  /**\n   * Максимальное количество видимых строк\n   *\n   * > При `maxLines > 1` используется свойство line-clamp, которое поддерживается не всеми версиями браузеров. Используйте с осторожностью\n   * > @see [line-clamp](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp)\n   */\n  maxLines?: number;\n  /**\n   * Отключает отображение нативного тултипа с полным текстом\n   */\n  disableNativeTitle?: boolean;\n}\n\n/** Компонент ограничивает текстовый контент, убирая его в многоточие.\n *\n * @since 6.1.0\n * @see https://vkcom.github.io/VKUI/#/EllipsisText\n */\nconst EllipsisText = ({\n  Component = 'span',\n  className,\n  children,\n  maxWidth,\n  maxLines = 1,\n  disableNativeTitle = false,\n  ...restProps\n}: EllipsisTextProps): React.ReactNode => {\n  const contentRef = useRef<HTMLSpanElement | null>(null);\n\n  useIsomorphicLayoutEffect(() => {\n    if (contentRef && contentRef.current) {\n      contentRef.current.style.setProperty('-webkit-line-clamp', maxLines > 1 ? `${maxLines}` : '');\n    }\n  }, [contentRef, maxLines]);\n\n  return (\n    <RootComponent\n      Component={Component}\n      className={classNames(\n        styles.host,\n        disableNativeTitle && styles.disableNativeTitle,\n        className,\n      )}\n      title={disableNativeTitle ? undefined : getTextFromChildren(children)}\n      {...restProps}\n    >\n      <span\n        style={{ maxWidth }}\n        ref={contentRef}\n        className={classNames(styles.content, maxLines > 1 && styles.contentMultiline)}\n      >\n        {children}\n      </span>\n    </RootComponent>\n  );\n};\n\nexport { EllipsisText };\n"],"mappings":"AAAA;;;;;;AAEA,SAASA,MAAM,QAAQ;AACvB,SAASC,UAAU,QAAQ;AAC3B,SAASC,mBAAmB,QAAQ;AACpC,SAASC,yBAAyB,QAAQ;AAE1C,SAASC,aAAa,QAAiC;AA0BvD;;;;;AAKA,MAAMC,YAAA,GAAeC,MAAA;MAAC;MACpBC,SAAA,GAAY,MAAM;MAClBC,SAAS;MACTC,QAAQ;MACRC,QAAQ;MACRC,QAAA,GAAW,CAAC;MACZC,kBAAA,GAAqB;IAAK,CAER,GAAAN,MAAA;IADfO,SAAA,GAAAC,0BAAA,CAAAR,MAAA,GANH,aACA,aACA,YACA,YACA,YACA,qB;EAGA,MAAMS,UAAA,GAAaf,MAAA,CAA+B;EAElDG,yBAAA,CAA0B;IACxB,IAAIY,UAAA,IAAcA,UAAA,CAAWC,OAAO,EAAE;MACpCD,UAAA,CAAWC,OAAO,CAACC,KAAK,CAACC,WAAW,CAAC,sBAAsBP,QAAA,GAAW,IAAI,GAAGA,QAAA,EAAU,GAAG;IAC5F;EACF,GAAG,CAACI,UAAA,EAAYJ,QAAA,CAAS;EAEzB,oBACEQ,IAAA,CAACf,aAAA,EAAAgB,oBAAA,CAAAC,cAAA;IACCd,SAAA,EAAWA,SAAA;IACXC,SAAA,EAAWP,UAAA,2BAETW,kBAAA,4CACAJ,SAAA;IAEFc,KAAA,EAAOV,kBAAA,GAAqBW,SAAA,GAAYrB,mBAAA,CAAoBO,QAAA;KACxDI,SAAA;cAEJ,aAAAM,IAAA,CAAC;MACCF,KAAA,EAAO;QAAEP;MAAS;MAClBc,GAAA,EAAKT,UAAA;MACLP,SAAA,EAAWP,UAAA,8BAA2BU,QAAA,GAAW;gBAEhDF;;;AAIT;AAEA,SAASJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}